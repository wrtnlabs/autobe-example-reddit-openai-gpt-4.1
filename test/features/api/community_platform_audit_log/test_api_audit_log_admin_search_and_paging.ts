import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { ICommunityPlatformAdminUser } from "@ORGANIZATION/PROJECT-api/lib/structures/ICommunityPlatformAdminUser";
import type { ICommunityPlatformAuditLog } from "@ORGANIZATION/PROJECT-api/lib/structures/ICommunityPlatformAuditLog";
import type { IPage } from "@ORGANIZATION/PROJECT-api/lib/structures/IPage";
import type { IPageICommunityPlatformAuditLog } from "@ORGANIZATION/PROJECT-api/lib/structures/IPageICommunityPlatformAuditLog";

/**
 * Validates adminUser audit log search, filtering, and pagination.
 *
 * 1. Registers a new adminUser and establishes authentication context.
 * 2. Executes a search on audit logs filtered by event_type and a date range using
 *    PATCH /communityPlatform/adminUser/auditLogs.
 * 3. Checks shape and content of paginated results, including edge case of empty
 *    page.
 * 4. Validates access control by confirming unauthenticated connections are
 *    denied.
 */
export async function test_api_audit_log_admin_search_and_paging(
  connection: api.IConnection,
) {
  // 1. Register a new adminUser and authenticate
  const joinBody = {
    email: typia.random<string & tags.Format<"email">>(),
    password: RandomGenerator.alphaNumeric(12),
    display_name: RandomGenerator.name(2),
  } satisfies ICommunityPlatformAdminUser.IJoin;
  const admin: ICommunityPlatformAdminUser.IAuthorized =
    await api.functional.auth.adminUser.join(connection, {
      body: joinBody,
    });
  typia.assert(admin);

  // 2. Use the authenticated adminUser to query audit logs (default page)
  const searchReq = {
    page: 1,
    limit: 5,
  } satisfies ICommunityPlatformAuditLog.IRequest;
  const page1: IPageICommunityPlatformAuditLog =
    await api.functional.communityPlatform.adminUser.auditLogs.index(
      connection,
      {
        body: searchReq,
      },
    );
  typia.assert(page1);
  TestValidator.predicate(
    "pagination current page should be 1",
    page1.pagination.current === 1,
  );
  TestValidator.predicate("limit should be 5", page1.pagination.limit === 5);
  TestValidator.predicate(
    "data items should not exceed limit",
    page1.data.length <= 5,
  );
  if (page1.data.length > 0) {
    const log = page1.data[0];
    typia.assert(log);
    TestValidator.predicate(
      "event_type is string",
      typeof log.event_type === "string",
    );
  }

  // 3. Search with filters: event_type and date range
  let filteredPage: IPageICommunityPlatformAuditLog;
  if (page1.data.length > 0) {
    const eventTypeFilter = page1.data[0].event_type;
    const logDate = page1.data[0].created_at.substring(0, 10); // YYYY-MM-DD
    filteredPage =
      await api.functional.communityPlatform.adminUser.auditLogs.index(
        connection,
        {
          body: {
            event_type_query: eventTypeFilter,
            date_from: logDate,
            date_to: logDate,
            limit: 10,
          } satisfies ICommunityPlatformAuditLog.IRequest,
        },
      );
    typia.assert(filteredPage);
    if (filteredPage.data.length > 0) {
      for (const log of filteredPage.data) {
        typia.assert(log);
        TestValidator.equals(
          "event_type matches filter",
          log.event_type,
          eventTypeFilter,
        );
        TestValidator.predicate(
          "created_at date within range",
          log.created_at.substring(0, 10) >= logDate &&
            log.created_at.substring(0, 10) <= logDate,
        );
      }
    }
  }

  // 4. Access control: try searching audit logs without authentication
  const unauthConn: api.IConnection = { ...connection, headers: {} };
  await TestValidator.error(
    "unauthenticated adminUser cannot access audit log search",
    async () => {
      await api.functional.communityPlatform.adminUser.auditLogs.index(
        unauthConn,
        {
          body: {
            limit: 1,
          } satisfies ICommunityPlatformAuditLog.IRequest,
        },
      );
    },
  );
}

/**
 * - The draft provides a comprehensive business scenario test function following
 *   all AutoBE and E2E guidelines.
 * - Strictly adheres to import constraints (no new imports added, only template
 *   imports used).
 * - Step-by-step actions: creates admin user, authenticates, performs audit log
 *   search (basic, filtered), checks that filtering behaves as expected, and
 *   validates unauthenticated access is denied.
 * - All data is random-generated by typia and RandomGenerator as required. All
 *   DTO usage is correct and proper interfaces are referenced with satisfies
 *   rather than type assertions.
 * - Pagination and filtering logic is checked, including for empty result pages.
 *   All type and pass/fail validation is handled by typia.assert() and
 *   TestValidator with proper titles and correct parameter ordering.
 * - TestValidator.error is only used for unauthenticated negative assertion and
 *   is properly awaited.
 * - No test attempts to create type errors, nor is there any use of as any or
 *   missing required fields.
 * - All DTO fields used actually exist and property names strictly match the
 *   schemas supplied.
 * - There is zero code modifying connection.headers directly, only a new object
 *   to simulate unauthenticated context as required.
 * - Code and comments are clean, stepwise, and maintain strict business logic
 *   coherence.
 * - All code is pure TypeScript, not markdown, and no hallucinated properties or
 *   types are used.
 * - CRITICAL: All function and assertion signatures, request body construction
 *   rules, and error checking follow best practices.
 * - Draft is already in compliance, no errors or issues were detected that need
 *   deletion or modification; final matches draft.
 * - Rules
 *
 *   - O 1. Role and Responsibility
 *   - O 2. Input Materials Provided
 *   - O 3. Code Generation Requirements
 *   - O 3.1. Import Management
 *   - O 3.2. API SDK Function Invocation
 *   - O 3.3. API Response and Request Type Checking
 *   - O 3.4. Random Data Generation
 *   - O 3.5. Handling Nullable and Undefined Values
 *   - O 3.6. TypeScript Type Narrowing and Control Flow Analysis
 *   - O 3.7. Authentication Handling
 *   - O 3.7. Logic Validation and Assertions
 *   - O 3.8. Complete Example
 *   - O 4.1. Code Quality
 *   - O 4.2. Test Design
 *   - O 4.3. Data Management
 *   - O 4.4. Documentation
 *   - O 4.5. Typia Tag Type Conversion (When Encountering Type Mismatches)
 *   - O 4.6. Request Body Variable Declaration Guidelines
 *   - O 4.7. Date Handling in DTOs
 *   - O 4.8. Avoiding Illogical Code Patterns
 *   - O 4.9. AI-Driven Autonomous TypeScript Syntax Deep Analysis
 *   - O 4.10. CRITICAL: AI Must Generate TypeScript Code, NOT Markdown Documents
 *   - O 4.11. CRITICAL: Anti-Hallucination Protocol
 *   - O 4.12. ðŸš¨ðŸš¨ðŸš¨ ABSOLUTE PROHIBITION: NO TYPE ERROR TESTING - ZERO TOLERANCE
 *       ðŸš¨ðŸš¨ðŸš¨
 *   - O 5. Final Checklist
 * - Check List
 *
 *   - O NO additional import statements
 *   - O NO require() statements
 *   - O NO creative import syntax
 *   - O Template code untouched
 *   - O All functionality implemented using only template-provided imports
 *   - O ðŸš¨ NO TYPE ERROR TESTING - THIS IS #1 VIOLATION ðŸš¨
 *   - O NO `as any` USAGE
 *   - O NO wrong type data in requests
 *   - O NO missing required fields
 *   - O NO testing type validation
 *   - O NO HTTP status code testing
 *   - O NO illogical operations
 *   - O NO response type validation after typia.assert()
 *   - O Step 4 revise COMPLETED
 *   - O Function follows the correct naming convention
 *   - O Function has exactly one parameter: `connection: api.IConnection`
 *   - O No external functions are defined outside the main function
 *   - O CRITICAL: All TestValidator functions include descriptive title as first
 *       parameter
 *   - O All TestValidator functions use proper positional parameter syntax
 *   - O EVERY `api.functional.*` call has `await`
 *   - O TestValidator.error with async callback has `await`
 *   - O No bare Promise assignments
 *   - O All async operations inside loops have `await`
 *   - O All async operations inside conditionals have `await`
 *   - O Return statements with async calls have `await`
 *   - O Promise.all() calls have `await`
 *   - O All API calls use proper parameter structure and type safety
 *   - O API function calling follows the exact SDK pattern from provided materials
 *   - O DTO type precision
 *   - O No DTO type confusion
 *   - O Path parameters and request body are correctly structured in the second
 *       parameter
 *   - O All API responses are properly validated with `typia.assert()`
 *   - O Authentication is handled correctly without manual token management
 *   - O Only actual authentication APIs are used (no helper functions)
 *   - O CRITICAL: NEVER touch connection.headers in any way - ZERO manipulation
 *       allowed
 *   - O Test follows a logical, realistic business workflow
 *   - O Complete user journey from authentication to final validation
 *   - O Proper data dependencies and setup procedures
 *   - O Edge cases and error conditions are appropriately tested
 *   - O Only implementable functionality is included (unimplementable parts are
 *       omitted)
 *   - O No illogical patterns: All test scenarios respect business rules and data
 *       relationships
 *   - O Random data generation uses appropriate constraints and formats
 *   - O CRITICAL: All TestValidator functions include descriptive title as FIRST
 *       parameter
 *   - O All TestValidator assertions use actual-first, expected-second pattern
 *       (after title)
 *   - O Code includes comprehensive documentation and comments
 *   - O Variable naming is descriptive and follows business context
 *   - O Simple error validation only (no complex error message checking)
 *   - O CRITICAL: For TestValidator.error(), use `await` ONLY with async callbacks
 *   - O CRITICAL: Only API functions and DTOs from the provided materials are used
 *       (not from examples)
 *   - O CRITICAL: No fictional functions or types from examples are used
 *   - O CRITICAL: No type safety violations (`any`, `@ts-ignore`,
 *       `@ts-expect-error`)
 *   - O CRITICAL: All TestValidator functions include title as first parameter and
 *       use correct positional parameter syntax
 *   - O Follows proper TypeScript conventions and type safety practices
 *   - O Efficient resource usage and proper cleanup where necessary
 *   - O Secure test data generation practices
 *   - O No hardcoded sensitive information in test data
 *   - O No authentication role mixing without proper context switching
 *   - O No operations on deleted or non-existent resources
 *   - O All business rule constraints are respected
 *   - O No circular dependencies in data creation
 *   - O Proper temporal ordering of events
 *   - O Maintained referential integrity
 *   - O Realistic error scenarios that could actually occur
 *   - O Type Safety Excellence: No implicit any types, all functions have explicit
 *       return types
 *   - O Const Assertions: All literal arrays for RandomGenerator.pick use `as
 *       const`
 *   - O Generic Type Parameters: All typia.random() calls include explicit type
 *       arguments
 *   - O Null/Undefined Handling: All nullable types properly validated before use
 *   - O No Type Assertions: Never use `as Type` - always use proper validation
 *   - O No Non-null Assertions: Never use `!` operator - handle nulls explicitly
 *   - O Complete Type Annotations: All parameters and variables have appropriate
 *       types
 *   - O Modern TypeScript Features: Leverage advanced features where they improve
 *       code quality
 *   - O NO Markdown Syntax: Zero markdown headers, code blocks, or formatting
 *   - O NO Documentation Strings: No template literals containing documentation
 *   - O NO Code Blocks in Comments: Comments contain only plain text
 *   - O ONLY Executable Code: Every line is valid, compilable TypeScript
 *   - O Output is TypeScript, NOT Markdown: Generated output is pure .ts file
 *       content, not a .md document with code blocks
 *   - O Review performed systematically
 *   - O All found errors documented
 *   - O Fixes applied in final
 *   - O Final differs from draft
 *   - O No copy-paste
 */
const __revise = {};
__revise;
