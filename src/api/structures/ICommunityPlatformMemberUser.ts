import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Member user entity for platform. Represents all registered users able to
 * create posts, comment, vote, join/leave communities. All fields reflect the
 * current status as persisted in the DB (community_platform_memberusers).
 * Sensitive internal references (e.g. credential links) are present but
 * business logic ensures privacy in web interfaces. See field-level
 * descriptions for precision.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformMemberUser = {
  /**
   * Unique identifier for this member user, as per
   * community_platform_memberusers.id. Immutable primary key.
   */
  id: string & tags.Format<"uuid">;

  /**
   * References credentials in community_platform_user_credentials.id.
   * Immutable after creation.
   */
  user_credential_id: string & tags.Format<"uuid">;

  /**
   * Display name of the user (0â€“32 characters, optional). If null or empty,
   * display as 'Anonymous' in frontend.
   */
  display_name?:
    | (string & tags.MinLength<0> & tags.MaxLength<32>)
    | null
    | undefined;

  /**
   * Status of the user account, e.g., 'active', 'suspended',
   * 'pending_deletion'. Used for business logic enforcement.
   */
  status: string;

  /** Timestamp when this user account was created. ISO 8601 format; immutable. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the user account was last updated. ISO 8601 format. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion; null if the account is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformMemberUser {
  /**
   * Payload for registration of a new member user. Collects minimal PII:
   * required email and secure password, with optional display name. Email
   * must be unique; password is never stored/returned as sent.
   */
  export type IJoin = {
    /**
     * User's email address for account registration/login. Must be unique
     * system-wide. Subject to format validation and business logic.
     */
    email: string & tags.Format<"email">;

    /**
     * Password chosen by the user (plaintext over the wire; will be hashed
     * backend). Must meet platform security policy for minimum
     * length/complexity.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<72>;

    /**
     * Optional display name to be shown for user actions (posts/comments).
     * If not provided or empty, will default to "Anonymous" as per business
     * rules.
     */
    display_name?: (string & tags.MaxLength<32>) | null | undefined;
  };

  /**
   * Response data for authorized session after join, login, or token refresh.
   * Includes member user identity, issued auth token set, and account status.
   * Used for session management and UI personalization.
   */
  export type IAuthorized = {
    /**
     * Member user's UUID assigned at registration or authentication. Used
     * as identity in all business operations and references.
     */
    id: string & tags.Format<"uuid">;

    /**
     * References credentials in community_platform_user_credentials.id.
     * Immutable after creation.
     */
    user_credential_id: string & tags.Format<"uuid">;

    /**
     * Display name for user, used for all posts/comments. May be null if
     * unset, in which case frontend displays 'Anonymous'.
     */
    display_name?: (string & tags.MaxLength<32>) | null | undefined;

    /**
     * Account status value (e.g., 'active', 'suspended', etc.) as per
     * business/platform rules. Represents whether the account is operable
     * by user.
     */
    status: string;

    /**
     * Timestamp when this user account was created. ISO 8601 format;
     * immutable.
     */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the user account was last updated. ISO 8601 format. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp for soft deletion; null if the account is active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request object for memberUser login. Used to authenticate an existing
   * registered user. Email must match platform credentials, and password is
   * required.
   */
  export type ILogin = {
    /**
     * Email for login. Must match an existing registered user credential.
     * Used for authentication as memberUser.
     */
    email: string & tags.Format<"email">;

    /**
     * Password for login. Plain text should only be sent client-side;
     * backend expects hashed or securely transmitted password.
     */
    password: string;
  };

  /**
   * Request object for memberUser session refresh. Requires a valid refresh
   * token to obtain new JWT tokens.
   */
  export type IRefresh = {
    /**
     * Refresh token issued at previous authentication. Used to request new
     * access/refresh token pair. Must be valid and not expired/revoked.
     */
    refresh_token: string;
  };

  /**
   * Filter, search, pagination, and sorting criteria for searching and
   * listing member users as supported by admin interfaces and personal
   * management flows. All fields are optional.
   */
  export type IRequest = {
    /** Page number for pagination. Optional; must be >= 1 if provided. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of records per page. Optional; must be >= 1 if provided. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Display name of the member user to filter by. Optional; partial
     * matches allowed. Maximum 32 characters.
     */
    display_name?:
      | (string & tags.MinLength<0> & tags.MaxLength<32>)
      | null
      | undefined;

    /**
     * Status string to filter member users by account status (e.g.,
     * 'active', 'suspended'). Optional.
     */
    status?: string | null | undefined;

    /**
     * Sorting string, e.g., 'created_at desc', 'display_name asc'.
     * Optional.
     */
    sort?: string | null | undefined;

    /**
     * Filter to users created after this ISO 8601 timestamp (inclusive).
     * Optional.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter to users created before this ISO 8601 timestamp (inclusive).
     * Optional.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary details for a registered member user, reflecting essential user
   * directory/profile fields only.
   *
   * The schema exposes key business identifiers and display name, but omits
   * sensitive or credential information for privacy. Used in search,
   * membership lists, post attribution, and business logic involving users.
   * All properties correlate to columns in `community_platform_memberusers`.
   */
  export type ISummary = {
    /**
     * Unique member user id, as in `community_platform_memberusers.id`.
     *
     * Primary identifier for all core business/user-facing operations.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Display name chosen by the member user, shown on posts/comments.
     *
     * Optional (`display_name` in schema, nullable). If not set, defaults
     * to 'Anonymous' for business logic and UI.
     */
    display_name?: string | null | undefined;

    /**
     * Current status of the member user account (e.g. 'active',
     * 'suspended', 'deleted').
     *
     * Mapped from the `status` column; controls eligibility for platform
     * actions in business logic.
     */
    status: string;

    /**
     * Timestamp when the member user account was created.
     *
     * References the `created_at` column. Used in audit, onboarding, and
     * feed personalization.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Latest update timestamp for member user profile or status.
     *
     * Derived from the `updated_at` column for audit and change monitoring.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
