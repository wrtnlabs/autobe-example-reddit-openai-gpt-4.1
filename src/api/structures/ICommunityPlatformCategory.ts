import { tags } from "typia";

/**
 * Represents a single platform category for sub-community classification.
 *
 * Categories define the classification for all communities, including display
 * order, name, and tooltip. Follows strict naming/ordering business rules as
 * specified in schema and requirements. Used system-wide for category
 * selection, search, and display.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCategory = {
  /**
   * Unique identifier for the category (UUID, primary key).
   *
   * Used as reference for lookup and assignment.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique, case-insensitive name for the category.
   *
   * Business rule: must be 5–32 characters, a-zA-Z0-9-_ only. This field is
   * immutable after creation. Used in UI selectors and community creation
   * flows.
   */
  name: string;

  /**
   * Display order for list sorting.
   *
   * Integer for ordering categories in menus and lists; must be
   * unique/platform-ordered. Used for ranked display.
   */
  display_order: number & tags.Type<"int32">;

  /**
   * Optional description/tooltip for UI and context (up to 200 characters).
   *
   * Gives extra info to users in selectors, helps with search/findability;
   * null allowed if not set.
   */
  description?: string | null | undefined;

  /**
   * Timestamp of category creation (ISO8601 format).
   *
   * Used for audit and backend diagnostics.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of most recent update (ISO8601 format).
   *
   * Updates whenever category description or display_order is changed.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCategory {
  /**
   * Request object for searching, sorting, and paginating category listings
   * in admin/member UIs.
   *
   * Allows advanced filtering by name and description as well as paging
   * controls and sort criteria.
   */
  export type IRequest = {
    /**
     * Optional name filter for category listing.
     *
     * This is a case-insensitive string filter. Minimum 2 characters are
     * required when using for keyword search; longer allowed for direct
     * matches. Used in UI search and filter behaviors.
     */
    name?: string | undefined;

    /**
     * Optional filter on description (tooltip/context), supports search
     * with trigram acceleration.
     *
     * Used to search for categories with certain description fragments.
     */
    description?: string | undefined;

    /**
     * Field used to determine sorting order (e.g., display_order, name,
     * etc).
     */
    sortBy?: string | undefined;

    /**
     * Sort order direction for results.
     *
     * Can be "asc" or "desc"; controls list sort logic in admin/user UIs.
     */
    sortDir?: "asc" | "desc" | undefined;

    /** Page number for paginated results. Minimum value is 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum records per returned page. Should follow platform-wide
     * standards.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Input for creating a new platform category via admin management
   * interface.
   *
   * Requires valid name (unique, formatted), initial display order, and
   * optional description for category context/tooltip.
   */
  export type ICreate = {
    /**
     * Unique platform category name for the new record.
     *
     * Business rule: must be 5–32 characters using a-zA-Z0-9-_. This field
     * is system-unique, case-insensitive, and required for valid category
     * insertion. Immutable after creation.
     */
    name: string;

    /**
     * Display sort order value (integer > 0 recommended).
     *
     * Determines ranked position of the category in UI selectors and
     * business logic sorting. Must be unique among categories for
     * predictable display.
     */
    display_order: number & tags.Type<"int32">;

    /**
     * Optional description/tooltip, up to 200 characters, for UI and
     * business context. Null allowed if empty.
     */
    description?: string | null | undefined;
  };

  /**
   * Input object for updating an existing platform category's editable
   * properties.
   *
   * Allows modification of display_order or description. Category name is
   * immutable.
   */
  export type IUpdate = {
    /**
     * Updated display sort order for the category.
     *
     * May be changed to re-rank category visibility in selectors—no effect
     * on name.
     */
    display_order?: (number & tags.Type<"int32">) | undefined;

    /**
     * New description (up to 200 chars) for category tooltip/context. Null
     * allowed if not provided.
     */
    description?: string | null | undefined;
  };

  /**
   * Summary information about a category used for community classification
   * and UI selectors. Mirrors core fields of community_platform_categories
   * for fast listing, filtering, and selection.
   */
  export type ISummary = {
    /**
     * Unique identifier for the category. Primary key of
     * community_platform_categories.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Category name, unique and must match naming/business logic
     * (case-insensitive, 5-32 characters, alphanumeric +
     * hyphen/underscore).
     */
    name: string;

    /**
     * Order for display in UI or selectors. Business logic: sequential
     * integer starting from 1.
     */
    display_order: number & tags.Type<"int32">;

    /** Optional description (max 200 chars) for tooltips/context. */
    description?: string | null | undefined;

    /** Time the category was created (RFC 3339/ISO 8601, immutable/audit). */
    created_at: string & tags.Format<"date-time">;

    /** Last updated time (RFC 3339/ISO 8601). */
    updated_at: string & tags.Format<"date-time">;
  };
}
