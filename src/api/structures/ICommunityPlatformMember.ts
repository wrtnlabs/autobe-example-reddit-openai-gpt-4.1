import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a registered member (user) identity for the community platform,
 * excluding password-related fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformMember = {
  /** System-generated unique identifier for the member. */
  id: string & tags.Format<"uuid">;

  /** The email address of the member, used as the login/account identifier. */
  email: string & tags.Format<"email">;

  /**
   * Preferred display name for the user, up to 32 chars. Used as author name
   * in posts/comments. If null, displays as 'Anonymous'.
   */
  display_name?: string | null;

  /**
   * Active account flag for business logic. Set to false if
   * banned/inactive/deleted.
   */
  is_active: boolean;

  /** Most recent successful login timestamp, updated on every login. */
  last_login_at?: (string & tags.Format<"date-time">) | null;

  /** Timestamp when member account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of member account update/metadata change. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when account was soft-deleted. Null for normal accounts. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformMember {
  /**
   * Payload for creating a new member (user) identity. Client must provide a
   * unique email and password. Display name is optional.
   */
  export type ICreate = {
    /**
     * Unique email address for the member. Must not already be in use.
     * Required.
     */
    email: string & tags.Format<"email">;

    /**
     * User's chosen password. Must be minimum 8 characters, including at
     * least one letter and one number. Will be securely hashed
     * server-side.
     */
    password: string;

    /**
     * Optional alias or display name (max 32 chars). Defaults to
     * 'Anonymous' if not set.
     */
    display_name?: string | null;
  };

  /**
   * Login credentials for member authentication. Email and password are both
   * required.
   */
  export type ILogin = {
    /** Registered email address for login. */
    email: string & tags.Format<"email">;

    /** Password for authentication (never stored or echoed on server). */
    password: string;
  };

  /** Payload for member session renewal via JWT refresh_token. */
  export type IRefreshRequest = {
    /** Member's JWT refresh token; must be valid and within expiration. */
    refresh_token: string;
  };

  /**
   * Response object for member session and login/registration. Returns issued
   * tokens and full member identity (excluding password/hash).
   */
  export type IAuthorized = {
    /** JWT token information for authentication */
    token: IAuthorizationToken;
    member: ICommunityPlatformMember;
  };

  /**
   * Request payload for initiating a member password reset. Provides the
   * email address; no indication given as to whether it is found in the
   * system, for security.
   */
  export type IPasswordResetInitiate = {
    /**
     * The member's email address. Must be provided to initiate the password
     * reset workflow.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Status message confirming initiation of the member password reset
   * workflow.
   *
   * Returned after a successful call to the password reset initiation
   * endpoint.
   */
  export type IPasswordResetInitiateResponse = {
    /**
     * A status message indicating that the password reset process was
     * initiated.
     *
     * This field confirms that the reset workflow has started and does not
     * leak account existence.
     */
    status: string;
  };

  /**
   * Input for completing a member's password reset using the provided token
   * and new password.
   *
   * Used by the password reset completion endpoint for members.
   */
  export type IPasswordResetComplete = {
    /**
     * The one-time use secure password reset token sent to the member's
     * email address during the reset initiation step.
     *
     * Required for verifying and completing the password reset process.
     */
    reset_token: string;

    /**
     * The new password supplied by the member for account recovery. Must
     * meet system password complexity rules (e.g., at least 8 characters,
     * mix of letters/numbers). This password is never stored directly, only
     * as a secure hash.
     */
    new_password: string;
  };

  /**
   * Response body for successful completion of a member password reset.
   *
   * Confirms to the user that their password is now changed and ready for
   * login.
   */
  export type IPasswordResetCompleteResponse = {
    /**
     * A status message confirming the completion of the password reset
     * process.
     *
     * Indicates that the password has been successfully changed and the
     * member must re-authenticate.
     */
    status: string;
  };
}
