import { tags } from "typia";

/**
 * Represents a registered external integration (such as an OAuth provider,
 * webhook, analytics endpoint, or other third-party service).
 *
 * This entity contains all configuration and audit data required to integrate
 * the platform with external/partner services. It is managed only by admin
 * users and includes fields for operational status, connectivity, custom config
 * JSON, and audit metadata. All fields correspond directly to the Prisma model
 * with the same name. Sensitive data—such as credentials or secret keys—should
 * only be surfaced in the config_json to authorized admin users, and never
 * exposed via public or member-level APIs.
 *
 * For full business/technical context, see the system's Prisma model and
 * documented integration business logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformExternalIntegration = {
  /**
   * Unique identifier (UUID) for the external integration. This value is
   * generated by the system and is used for referencing the integration in
   * all API operations and audit logs.
   *
   * Read-only property, never required for creation but always present in
   * results. Sourced from the Prisma model's primary key.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique name for the external integration (e.g., 'GoogleOAuth',
   * 'SendGrid', 'Webhook-Analytics'). Must remain unique per system
   * constraints and is case-insensitive. Once set, considered immutable for
   * business/audit integrity.
   *
   * Business rule: uniqueness is enforced at the database/index layer;
   * duplicate names are not permitted.
   */
  integration_name: string;

  /**
   * The base URL for the third-party integration provider, such as the OAuth
   * token endpoint or webhook receiver. Optional; may be null if not required
   * for a system-internal service. Up to 80000 chars allowed per Prisma
   * column constraints.
   */
  provider_url?: string | null | undefined;

  /**
   * Operational status of the integration. Possible values typically include:
   * enabled, disabled, error, and pending_setup.
   *
   * The application logic and admin interfaces should restrict changes to
   * this field according to business rules.
   */
  status: string;

  /**
   * Arbitrary JSON string holding configuration data/secrets for the
   * integration. Only accessible to admin users due to sensitivity. The
   * schema does not enforce data structure—conforms to the external system's
   * requirements. Example: '{"client_id":"abc","secret":"xyz"}'
   */
  config_json: string;

  /**
   * Timestamp of the last successful event or synchronization with the
   * third-party integration (ISO 8601 format). Optional; null if syncs have
   * never succeeded.
   */
  last_successful_sync_at?:
    | (string & tags.Format<"date-time">)
    | null
    | undefined;

  /**
   * Timestamp when this integration record was created (ISO 8601). Always set
   * by the system at creation time. Used for audit and admin dashboard
   * purposes.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last update to this integration (ISO 8601). Updated with
   * every change for tracking/audit compliance.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformExternalIntegration {
  /**
   * Request type for searching and paginating platform external integrations.
   * Supports filters by name, provider, status, creation/update timestamps,
   * and pagination controls. Used by administrative management tools to
   * audit, create, or maintain integrations.
   */
  export type IRequest = {
    /**
     * Filter for integration records by name (case-insensitive). Used for
     * searching or partial match operations.
     */
    integration_name?: string | undefined;

    /**
     * Query parameter for searching by provider URL or domain, supports
     * substring filtering for integration attribution.
     */
    provider_url?: string | undefined;

    /**
     * Filter by the current operational status ('enabled', 'disabled',
     * 'pending', etc.). Returns only integrations in the specified state.
     */
    status?: string | undefined;

    /**
     * Inclusive lower bound for filtering records created at or after this
     * timestamp.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive upper bound for filtering records created before or at this
     * timestamp.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Lower bound for filtering integrations updated on or after this
     * timestamp.
     */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound for filtering integrations updated before or at this
     * timestamp.
     */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for result pagination. Defaults to 1 if omitted. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of results per page for pagination. Defaults to standard page
     * size if not supplied.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Request DTO for creating a new external integration. Follows server-side
   * validation rules for unique naming, security of configuration JSON, and
   * business status requirements. All fields align with the Prisma external
   * integrations model. Used exclusively by admin users to onboard new
   * providers or services.
   */
  export type ICreate = {
    /**
     * Unique name (string) for the new integration. Must be provided at
     * creation time and is subject to uniqueness constraints across all
     * integrations. Example: 'GoogleOAuth', 'Webhook-Analytics'.
     */
    integration_name: string;

    /**
     * Provider endpoints (URLs) as required by integration business logic.
     * Nullable for integrations that do not call out to external URLs.
     */
    provider_url?: string | null | undefined;

    /**
     * Initial operational status. Common values: enabled, disabled, error,
     * pending_setup. This determines whether the integration is active in
     * backend workflows.
     */
    status: string;

    /**
     * JSON string storing integration configuration details, credentials,
     * or secrets. Sensitive—must follow admin/security guidelines for
     * storage.
     */
    config_json: string;

    /**
     * Timestamp for the last successful handshake or event with the
     * provider (nullable). Leave null if never synced.
     */
    last_successful_sync_at?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;
  };

  /**
   * Request DTO for updating mutable fields of an external integration.
   * Admin-only access; supports changes to operational status, configuration
   * data, and sync metadata. All changes are tracked via audit logs and
   * updated_at field at the entity level.
   */
  export type IUpdate = {
    /**
     * Mutable field for changing provider endpoint/URL. Can be null for
     * integrations that do not use a specific URL.
     */
    provider_url?: string | null | undefined;

    /**
     * Mutable operational status of the integration (enabled, disabled,
     * error, etc.). Must match business logic constraints.
     */
    status?: string | undefined;

    /**
     * Mutable JSON string representing reconfiguration of credentials,
     * endpoints, or integration state.
     */
    config_json?: string | undefined;

    /**
     * Timestamp for the most recent provider sync, used for admin audit and
     * health checks (optional/null).
     */
    last_successful_sync_at?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;
  };

  /**
   * Administrative summary describing a registered platform external
   * integration (webhook, OAuth, API, etc.)
   *
   * This schema provides a concise view of the key metadata for an external
   * integration: unique id, display name, provider endpoint, status, and
   * event timestamps. All properties correspond to columns in the Prisma
   * `community_platform_external_integrations` table, and allow for system
   * configuration, compliance auditing, and dashboard rendering. Sensitive
   * configuration fields (such as credentials) are omitted in this summary.
   */
  export type ISummary = {
    /**
     * Unique identifier for the external integration record.
     *
     * References the `community_platform_external_integrations.id` primary
     * key in the Prisma schema. Used in API calls and business logic
     * involving external system configuration.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique, descriptive name for the external integration.
     *
     * As defined in `integration_name` column, this value is required to be
     * unique, for example: 'GoogleOAuth', 'StripeWebhook', or
     * 'Analytics-Partner'. Used as a primary display and logical
     * identifier.
     */
    integration_name: string;

    /**
     * Base URL or endpoint reference for the third-party provider.
     *
     * Nullable and may not be present for some integrations. As mapped from
     * the optional `provider_url` in the schema, should match a valid URI
     * if provided.
     */
    provider_url?: (string & tags.Format<"uri">) | null | undefined;

    /**
     * Operational status for the integration: e.g. 'enabled', 'disabled',
     * 'pending', 'error'.
     *
     * Correlates with the `status` column in the Prisma schema, controls
     * activation and monitoring state in business logic. Enum status values
     * are enforced system-wide.
     */
    status: string;

    /**
     * Timestamp of last successful event or handshake from the external
     * integration.
     *
     * Sourced from `last_successful_sync_at`, nullable to indicate no
     * events yet. Returned in ISO 8601 format if present.
     */
    last_successful_sync_at?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * Timestamp when this integration entry was created.
     *
     * Maps to the `created_at` column and is always provided. Used for
     * audit and configuration lifecycle tracking.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last update to integration details/configuration.
     *
     * Corresponds to the `updated_at` field used for auditing and change
     * tracking.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
