import { tags } from "typia";

/**
 * Appeal entity for moderation/admin appeals workflow, tracing dispute
 * lifecycle. Mirrors Prisma and business rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAppeal = {
  /** Unique UUID primary key for this appeal. */
  id: string & tags.Format<"uuid">;

  /** The member user who filed this appeal. Prisma: member_id. */
  member_id: string & tags.Format<"uuid">;

  /**
   * Admin action (moderation, suspension, etc.) being appealed. Prisma:
   * admin_action_id.
   */
  admin_action_id: string & tags.Format<"uuid">;

  /**
   * Status of the appeal (e.g. submitted, under_review, resolved, reversed,
   * rejected).
   */
  appeal_status: string;

  /** Optional moderator/admin rationale for decision on this appeal. */
  decision_reason?: string | null;

  /** Admin who handled this appeal (nullable until processed). */
  admin_id?: (string & tags.Format<"uuid">) | null;

  /** Timestamp the appeal was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for latest update to this appeal. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformAppeal {
  /**
   * Appeal search and filter request parameters. Used for admin/member
   * pagination, filter, and process analytics.
   */
  export type IRequest = {
    /** Pagination: current page of appeal search. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Max number of appeals per page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Filter for appeals by this member ID. */
    member_id?: string & tags.Format<"uuid">;

    /** Filter for appeals to or handled by this admin. */
    admin_id?: string & tags.Format<"uuid">;

    /** Filter for appeals connected to this admin action. */
    admin_action_id?: string & tags.Format<"uuid">;

    /**
     * Filter for the status field of appeals (e.g. submitted, resolved,
     * rejected).
     */
    appeal_status?: string;

    /** Filter/partial match for moderator/admin decision rationale. */
    decision_reason?: string;

    /** Lower time bound for appeal created_at. */
    created_at_from?: string & tags.Format<"date-time">;

    /** Upper time bound for appeal created_at. */
    created_at_to?: string & tags.Format<"date-time">;

    /** Lower bound for appeal updated_at. */
    updated_at_from?: string & tags.Format<"date-time">;

    /** Upper bound for appeal updated_at. */
    updated_at_to?: string & tags.Format<"date-time">;
  };

  /**
   * Payload for creating a new member-filed moderation/admin appeal. Only
   * required fields: admin_action_id, appeal_status.
   */
  export type ICreate = {
    /** The administrative action id being appealed. Prisma: admin_action_id. */
    admin_action_id: string & tags.Format<"uuid">;

    /** Initial status for the appeal (typically 'submitted'). */
    appeal_status: string;

    /** Explanatory text provided by appellant, if any. */
    decision_reason?: string | null;
  };

  /**
   * Appeal update payload for changing status, rationale or assignment. Used
   * by admins to resolve/process appeals.
   */
  export type IUpdate = {
    /**
     * Updated status for the appeal (e.g. under_review, resolved, rejected,
     * etc.).
     */
    appeal_status?: string;

    /** Updated admin rationale for decision on this appeal. */
    decision_reason?: string | null;

    /**
     * The admin id handling/modifying this appeal (for transitions to
     * reviewed, resolved, etc.).
     */
    admin_id?: string & tags.Format<"uuid">;
  };

  /**
   * Summary view of appeals for paginated responses. Mirrors full entity
   * except may omit deeply nested or audit-only fields.
   */
  export type ISummary = {
    /** Unique UUID primary key for this appeal. */
    id: string & tags.Format<"uuid">;

    /** ID of the member who filed this appeal. Prisma: member_id. */
    member_id: string & tags.Format<"uuid">;

    /**
     * ID of the admin/moderation action the appeal references. Prisma:
     * admin_action_id.
     */
    admin_action_id: string & tags.Format<"uuid">;

    /**
     * Status of the appeal (e.g. submitted, under_review, resolved,
     * reversed, rejected).
     */
    appeal_status: string;

    /**
     * Admin or moderator decision notes for this appeal (could be null if
     * unresolved).
     */
    decision_reason?: string | null;

    /** Assigned admin handling the appeal (nullable if not assigned yet). */
    admin_id?: (string & tags.Format<"uuid">) | null;

    /** Creation timestamp for this appeal record. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp for the latest status update. */
    updated_at: string & tags.Format<"date-time">;
  };
}
