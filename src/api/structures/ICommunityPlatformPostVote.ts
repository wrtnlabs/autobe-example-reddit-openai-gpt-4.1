import { tags } from "typia";

/**
 * A platform user's vote on a post. Each vote record represents a unique
 * user-to-post voting state, used for analytics and per-user score calculation.
 * Voter may be member user or admin user. Update and delete require ownership
 * validation. Used in voting, feed score display, and audit views.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPostVote = {
  /**
   * Unique identifier for this post vote (UUID). Used for reference,
   * updating, or deletion. Generated upon vote creation.
   */
  id: string & tags.Format<"uuid">;

  /** Target post ID being voted on (UUID). Relates to the post entity. */
  community_platform_post_id: string & tags.Format<"uuid">;

  /**
   * UUID of the member user who voted; null if not a member user. Set for
   * authenticated user votes only.
   */
  voter_memberuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the admin user who voted; null if not an admin user. Set for
   * admin voting actions only.
   */
  voter_adminuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Current vote state of the user on the post: exactly one of 'upvote',
   * 'downvote', or 'none'. Used for toggling, analytics, and
   * per-user-per-post voting business rules.
   */
  vote_state: "upvote" | "downvote" | "none";

  /**
   * Timestamp when this vote record was first created (ISO 8601, UTC). Used
   * for audit and sorting.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this vote record was last updated (ISO 8601, UTC). Updated
   * whenever the vote is toggled.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformPostVote {
  /**
   * Create or toggle a user's vote for a specific post. Must provide target
   * post_id and vote state (chosen from 'upvote', 'downvote', or 'none').
   * Used by PATCH/POST vote endpoints. Ownership and one-vote-per-user
   * enforced at API/business logic layer.
   */
  export type ICreate = {
    /**
     * The unique identifier of the post being voted on. Must be a valid
     * UUID corresponding to a post in the system. Used for establishing the
     * per-user-per-post vote relation.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * Vote state for this post: 'upvote', 'downvote', or 'none'
     * (toggle/removal; none removes the vote for this user on the post).
     * Only allowed values. Enforced by business logic; required in all
     * create/toggle actions.
     */
    vote_state: "upvote" | "downvote" | "none";
  };

  /**
   * Update a post vote entryâ€”only allows changing the vote_state ('upvote',
   * 'downvote', 'none'). Used for toggling/removal in vote update endpoints
   * by vote owners.
   */
  export type IUpdate = {
    /**
     * Vote state to apply to this post-vote entry: one of 'upvote',
     * 'downvote', or 'none' to remove vote. Only allowed values; used for
     * toggling/updating vote state.
     */
    vote_state: "upvote" | "downvote" | "none";
  };
}
