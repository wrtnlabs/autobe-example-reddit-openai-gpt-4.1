import { tags } from "typia";

/**
 * A comment entity as stored in the community_platform_comments table. Contains
 * post association, author (member/guest/admin), body, display_name,
 * timestamps, and optional deletion info. Used for comment detailed view,
 * thread rendering, and audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformComment = {
  /**
   * Primary key for this comment record. UUID generated at creation.
   * community_platform_comments.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the post to which this comment belongs. Foreign key to
   * community_platform_posts.id.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * For replies, the ID of the parent comment this is replying to. Null for
   * top-level comments. community_platform_comments.parent_comment_id
   */
  parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Member user ID if authored by a registered user. Null otherwise.
   * community_platform_comments.author_memberuser_id
   */
  author_memberuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Guest user ID if comment was created by an unauthenticated visitor. Null
   * otherwise. community_platform_comments.author_guestuser_id
   */
  author_guestuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Admin user ID if authored by a platform admin. Null otherwise.
   * community_platform_comments.author_adminuser_id
   */
  author_adminuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Content of the comment. Plain text. 2–2,000 characters. No markup or
   * scripts allowed. community_platform_comments.body.
   */
  body: string;

  /**
   * Optional display name to show as author identity. If null, display as
   * 'Anonymous'. Max 32 characters. community_platform_comments.display_name
   */
  display_name?: string | null | undefined;

  /** Timestamp when the comment was created in ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last modification of the comment in ISO8601. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when soft-deleted. Null if comment is active. Used for
   * compliance/audit. community_platform_comments.deleted_at
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformComment {
  /**
   * Request payload used for searching or querying comments. Optional filters
   * on post, author, parent (for nesting), keyword, and pagination/sorting.
   * For comment search APIs.
   */
  export type IRequest = {
    /**
     * Optional filter to restrict results to comments belonging to this
     * post. Maps to community_platform_comments.post_id. UUID as string.
     */
    post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter to get replies to a specific comment (nested
     * comments). Matches community_platform_comments.parent_comment_id.
     * Null for top-level. UUID as string.
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter to restrict results to comments authored by a given
     * member user. References community_platform_memberusers.id. UUID as
     * string.
     */
    author_memberuser_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter to restrict results to guest-authored comments.
     * References community_platform_guestusers.id. UUID as string.
     */
    author_guestuser_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for comments from admin authors. References
     * community_platform_adminusers.id. UUID as string.
     */
    author_adminuser_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional search keyword for plain-text comment body.
     * Trigram/full-text search on body column in
     * community_platform_comments. Minimum 2 characters is recommended.
     */
    body_query?: string | undefined;

    /**
     * Sort order. 'newest' for most recent creation date, 'top' for highest
     * vote score. Default is 'newest'.
     */
    sort_by?: "newest" | "top" | undefined;

    /** Results page number for pagination. 1-based. */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Page size—the number of results per page. Default is 20, max
     * typically enforced by application.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request body for creating a comment. Specifies the target post,
   * optionally the parent comment (for replies), the plain-text body, and
   * optional display_name. Follows content and business validation rules.
   */
  export type ICreate = {
    /**
     * UUID of the post to which the comment will be attached.
     * community_platform_comments.post_id
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * If this is a reply, the ID of the parent comment being replied to.
     * Null or omitted for top-level comments.
     * community_platform_comments.parent_comment_id
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Main text content of the comment. Must be 2–2,000 characters, plain
     * text only. Escaped as per business rules.
     * community_platform_comments.body
     */
    body: string;

    /**
     * (Optional) Display name shown as the comment author. If empty or
     * null, will display as 'Anonymous'. Max 32 chars.
     * community_platform_comments.display_name
     */
    display_name?: string | null | undefined;
  };

  /**
   * Request body for updating a comment's text and display name. Only these
   * fields are patchable; all others are immutable. Updates are audit-logged
   * via updated_at field.
   */
  export type IUpdate = {
    /**
     * Plain-text body to update for this comment. Must remain 2–2,000
     * characters.
     */
    body?: string | undefined;

    /**
     * (Optional) Display name to update for this comment. Null or empty for
     * 'Anonymous'. Max 32 chars. community_platform_comments.display_name.
     */
    display_name?: string | null | undefined;
  };

  /**
   * Summary information for a comment, designed for use in comment lists,
   * thread headers, or search results. Exposes safe, non-sensitive display
   * fields only. Omits author/account references, providing only context,
   * parent, and UI display guidance.
   *
   * Derived from community_platform_comments. All fields included are
   * required for typical thread rendering and allow navigation in discussion
   * overview.
   */
  export type ISummary = {
    /**
     * Unique comment identifier (UUID). Direct reference to
     * community_platform_comments.id for detailed comment workflows,
     * edit/delete, and reply/thread management.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The ID of the post to which this comment is attached. Links the
     * comment summary to its discussion context. From
     * community_platform_comments.post_id.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * Optional UUID of the parent comment for nested/threaded replies. Null
     * or omitted if the comment is a top-level comment. From
     * community_platform_comments.parent_comment_id.
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional display name (0–32 chars) shown for the comment author. If
     * not set, UI falls back to 'Anonymous' per privacy rules. Never used
     * for authentication. Maps to
     * community_platform_comments.display_name.
     */
    display_name?: string | null | undefined;

    /**
     * Creation timestamp for the comment (ISO8601 format). From
     * community_platform_comments.created_at. Used for sorting threads and
     * time-based display.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
