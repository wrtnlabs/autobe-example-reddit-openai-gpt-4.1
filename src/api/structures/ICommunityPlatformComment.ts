import { tags } from "typia";

/**
 * Primary business entity for comments on posts. Contains author, parent,
 * threading, vote score, and all audit timestamps. Used for both top-level and
 * threaded replies.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformComment = {
  /** Primary key for the comment entity (UUID). */
  id: string & tags.Format<"uuid">;

  /** ID of post to which this comment belongs. */
  post_id: string & tags.Format<"uuid">;

  /** ID of member who created this comment. */
  author_id: string & tags.Format<"uuid">;

  /**
   * If present, the UUID of the parent comment for threaded replies. Nullable
   * for top-level comments.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Text content of the comment (plain text, 2-2000 characters,
   * scripts/markup forbidden).
   */
  content: string;

  /** Indicates whether the comment has been edited after creation. */
  edited: boolean;

  /** Net vote score (upvotes minus downvotes). May be null for no votes. */
  score?: (number & tags.Type<"int32">) | null;

  /** Creation timestamp (ISO 8601 UTC, required). */
  created_at: string & tags.Format<"date-time">;

  /** Last modification timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp; comment is hidden if present. Nullable for
   * active comments.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformComment {
  /**
   * Request body payload for searching, filtering, and paginating comments,
   * supporting text search, sorting, and field-based filtering. For advanced
   * comment search and listing APIs.
   */
  export type IRequest = {
    /** Page number for pagination. Optional. Defaults to 1. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Maximum comments per page. Optional. Defaults to admin or system
     * value.
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Sort order or column (e.g., 'created_at', 'score', etc.). Optional. */
    sort_by?: string;

    /** Search string (content substring, full-text, etc.). Optional. */
    query?: string;

    /** Restrict search to comments for a single post. Optional. */
    post_id?: string & tags.Format<"uuid">;

    /** Filter by specific comment author. Optional. */
    author_id?: string & tags.Format<"uuid">;

    /** Start of creation date range filter, ISO 8601 format. Optional. */
    created_from?: string & tags.Format<"date-time">;

    /** End of creation date range filter, ISO 8601 format. Optional. */
    created_to?: string & tags.Format<"date-time">;
  };

  /**
   * Summary view of a comment for lists, search results, or paginated
   * displays. Omits thread/parent, deleted_at, and deep linkages.
   */
  export type ISummary = {
    /** Unique ID of the comment. Primary key. */
    id: string & tags.Format<"uuid">;

    /** Post ID to which this comment is attached. */
    post_id: string & tags.Format<"uuid">;

    /** Member ID who authored the comment. */
    author_id: string & tags.Format<"uuid">;

    /** Text content of the comment. Truncated or summarized for list views. */
    content: string;

    /** Timestamp of comment creation. */
    created_at: string & tags.Format<"date-time">;

    /**
     * Current net vote score at time of retrieval, may be null for no votes
     * yet.
     */
    score?: (number & tags.Type<"int32">) | null;

    /** Whether the comment has been edited since creation. */
    edited: boolean;
  };

  /**
   * Request body for creating a new comment. Contains post reference,
   * optional parent, and plain text content for the new comment.
   */
  export type ICreate = {
    /** ID of the post to which the comment is being added. */
    post_id: string & tags.Format<"uuid">;

    /**
     * If the comment is a reply, the parent comment's UUID; null if
     * top-level.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** Text content of the comment (2-2000 chars, plain text). */
    content: string;
  };

  /**
   * Payload for updating a comment.
   *
   * Used for editing the content of an existing comment. Only `content` is
   * editable; other fields remain unchanged. The input must comply with
   * length constraints and must not contain scripts or code.
   */
  export type IUpdate = {
    /**
     * New plain-text content for the comment (2-2000 chars, no
     * code/scripts).
     */
    content: string & tags.MinLength<2> & tags.MaxLength<2000>;
  };
}
