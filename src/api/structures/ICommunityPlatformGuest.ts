import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * External guest/anonymous session for analytics/audit. Pseudonymous persistent
 * identifier, IP, UA, and timestamps. Used for non-authenticated interaction
 * logs. Public business APIs do not expose PII, only statistical references.
 * Used internally for analytics and to power read-only guest flows. Guests
 * cannot create content, join, or interact beyond viewing public site data. No
 * email, password, or personal info. Retained as long as required by analytics
 * retention policy.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformGuest = {
  /** Unique persistent identifier for guest analytics record. */
  id: string & tags.Format<"uuid">;

  /** Pseudonymous browser/user identifier used for analytics (cookie/fp). */
  guest_identifier: string;

  /** IP address (may be null, pseudo-anonymized). */
  ip_address?: string | null;

  /** Browser or device user agent info (may be null). */
  user_agent?: string | null;

  /** Creation timestamp for guest entity. */
  created_at: string & tags.Format<"date-time">;

  /** If set, time when guest was removed from analytics. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformGuest {
  /**
   * Guest account creation requires no client-side payload. The backend will
   * generate a new guest identity, tracking only device/session info.
   */
  export type ICreate = {};

  /** Payload with refresh_token to renew a guest (anonymous) session. */
  export type IRefreshRequest = {
    /**
     * The refresh token previously issued to the guest for session renewal.
     * Must be a valid JWT string.
     */
    refresh_token: string;
  };

  /**
   * Response object for guest session authorization, returning JWT tokens and
   * guest identity info.
   */
  export type IAuthorized = {
    /** JWT token information for authentication */
    token: IAuthorizationToken;
    guest: ICommunityPlatformGuest;
  };

  /**
   * Request object for advanced, paginated/filterable queries over
   * unauthenticated guest visitor records.
   */
  export type IRequest = {
    /**
     * Pseudonymous unique identifier for the guest (session token, cookie,
     * etc.)
     */
    guest_identifier?: string;

    /**
     * IP address (string, typically dotted-decimal IPv4 or IPv6 hex) for
     * filtering analytics data.
     */
    ip_address?: string;

    /** User agent/browser/device fingerprint for filtering guest records. */
    user_agent?: string;

    /** Return only records created after this timestamp (ISO8601 UTC). */
    created_after?: string & tags.Format<"date-time">;

    /**
     * Return only guest records created before this timestamp (ISO8601
     * UTC).
     */
    created_before?: string & tags.Format<"date-time">;

    /** Current page number (1-based) for pagination. */
    page?: number;

    /** Records per page to return in results. */
    limit?: number;
  };
}
