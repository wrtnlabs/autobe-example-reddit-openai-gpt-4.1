import { tags } from "typia";

/**
 * A single community rule entity, representing one numbered rule within a
 * sub-community.
 *
 * Corresponds to a row in the community_platform_community_rules table. Each
 * rule includes its UUID, associated community, sequential index (rule_index),
 * the rule's text (business constraint: max 100 characters), and creation
 * timestamp.
 *
 * Rules are always attached to a specific community and used for display,
 * moderation, and business logic. The rule_index determines presentation order
 * (enforced per-community). The rule_text field is application-validated for
 * plain text and length enforcement. All fields match the original Prisma
 * schema and its index/consistency constraints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityRule = {
  /**
   * UUID that serves as the primary key for the rule, matching the `id`
   * column in the schema. Uniquely identifies the rule for updates/deletion.
   * Format: RFC4122 UUID.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the parent community that owns this rule, as in the
   * `community_id` column. Business rule: required for attachment, not
   * user-editable post-creation.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Order of the rule in the community (starting at 1). Business logic
   * enforces a maximum of 10 rules per community. Used for display
   * numbering.
   */
  rule_index: number & tags.Type<"int32">;

  /**
   * Text content of the community rule, plain-text only, maximum 100
   * characters per business rule. Used in info boxes and moderation logic.
   */
  rule_text: string & tags.MaxLength<100>;

  /**
   * ISO8601 UTC timestamp for when the rule record was created, as per the
   * `created_at` column in the schema. Used for audit and ordering.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommunityRule {
  /**
   * Request type for searching or paginating rules in a community, supporting
   * filters by text, index, or paging. Used by owners for managing community
   * guidelines and by UI for rules search features.
   */
  export type IRequest = {
    /**
     * Optional search filter for matching rule content. Returns only rules
     * whose rule_text includes or matches this value.
     */
    rule_text?: string | undefined;

    /**
     * Optional search filter for matching the exact rule order/index within
     * a community's rule set.
     */
    rule_index?: (number & tags.Type<"int32">) | undefined;

    /** Optional 1-based page number for pagination of rule results. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Optional maximum page size (number of rules per page). */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * DTO for creating a new community rule associated with a community.
   * Requires only the rule's text content.
   *
   * Corresponds to the `rule_text` input when inserting into
   * community_platform_community_rules. Index/order and association are
   * handled automatically. Business validation restricts rule_text to plain
   * text (max 100 characters), with length enforced by platform logic.
   *
   * Additional logic prevents exceeding per-community rule limits (max 10).
   */
  export type ICreate = {
    /**
     * Plain-text content for the new rule (max 100 chars). Cannot be empty;
     * length is validated on creation.
     */
    rule_text: string & tags.MaxLength<100>;
  };

  /**
   * DTO for updating the content of an existing community rule. Allows only
   * the rule_text field (cannot edit index or association).
   *
   * Partial update: business logic and schema allow only the text to be
   * modified. Length constraint (max 100 chars, plain text) enforced. Used by
   * PATCH/PUT endpoints for changing rule content after creation. Index and
   * ownership remain unchanged.
   */
  export type IUpdate = {
    /**
     * Textual content for the rule after update (max 100 characters per
     * business rule). Optional for PATCH/PUT semantics.
     */
    rule_text?: (string & tags.MaxLength<100>) | undefined;
  };
}
