import { tags } from "typia";

/**
 * Audit log record for a moderation or admin action. This entity records the
 * action taken by an admin on a target business entity (community, post,
 * comment, user, etc.), including action type, affected entity, admin,
 * rationale (optional), result, and timestamp. Schema matches
 * 'community_platform_admin_actions' table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAdminAction = {
  /** Primary key for this admin/moderation action record (UUID). */
  id: string & tags.Format<"uuid">;

  /** UUID of the admin who performed this action. */
  admin_id: string & tags.Format<"uuid">;

  /**
   * Type of moderation or admin action taken (e.g., delete_post,
   * suspend_user, restore_community).
   */
  action_type: string;

  /**
   * Type of entity affected by this action, such as 'community', 'post',
   * 'comment', 'user', 'membership', etc.
   */
  target_entity: string;

  /** UUID of the affected entity linked by this admin action. */
  target_entity_id: string & tags.Format<"uuid">;

  /** Optional explanation or rationale for the action as provided by admin. */
  reason?: string | null;

  /** Result/outcome of the action (e.g., success, error, restored, etc.). */
  result: string;

  /** UTC ISO 8601 timestamp when this admin action was created. */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformAdminAction {
  /**
   * Request body for searching, filtering, sorting, and paginating
   * admin/moderation actions. Used for querying audit records.
   */
  export type IRequest = {
    /** UUID of the admin who performed the action. Optional filter. */
    admin_id?: string & tags.Format<"uuid">;

    /**
     * Type of action taken (e.g. delete_post, suspend_user). Optional
     * filter.
     */
    action_type?: string;

    /** Type of entity affected (e.g. post, comment, user). Optional filter. */
    target_entity?: string;

    /**
     * UUID of the targeted business entity (community/post/comment/user).
     * Optional filter.
     */
    target_entity_id?: string & tags.Format<"uuid">;

    /** Filter on admin reason for action. Optional. */
    reason?: string;

    /** Filter based on result value (success, error, etc). Optional. */
    result?: string;

    /**
     * Filter for actions created after this UTC datetime (inclusive).
     * Optional.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Filter for actions created before this UTC datetime (inclusive).
     * Optional.
     */
    created_to?: string & tags.Format<"date-time">;

    /** Pagination: page number (optional, default 1). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Pagination: items per page (optional, default 100). */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Sort by a specific field (e.g. created_at). Optional. */
    sort_by?: string;

    /** Sort direction. Optional. */
    sort_dir?: "asc" | "desc";
  };

  /**
   * Request body for creating a new admin/moderation action entry for the
   * audit log. Includes required entity references and result; rationale is
   * optional.
   */
  export type ICreate = {
    /** UUID of the admin user performing this action (required). */
    admin_id: string & tags.Format<"uuid">;

    /**
     * Type of moderation/admin action (e.g. delete_post, suspend_user).
     * Required.
     */
    action_type: string;

    /**
     * Business entity affected by the admin action. E.g. 'community',
     * 'post', 'comment', 'user'.
     */
    target_entity: string;

    /** UUID of the entity being acted upon (required). */
    target_entity_id: string & tags.Format<"uuid">;

    /** Optional rationale/message for the action. Accepts null. */
    reason?: string | null;

    /** Outcome/result of action (e.g. success, error). Required. */
    result: string;
  };

  /**
   * Request body for updating admin/moderation action audit log records.
   * Reason/result may be updated separately after action creation.
   */
  export type IUpdate = {
    /** New/updated rationale for this action. Accepts null to clear. */
    reason?: string | null;

    /** Updated outcome/result field for the action. */
    result?: string;
  };
}
