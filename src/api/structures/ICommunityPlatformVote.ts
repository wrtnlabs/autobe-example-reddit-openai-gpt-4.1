import { tags } from "typia";

/**
 * Vote record for a post or comment. Indicates a single user's upvote,
 * downvote, or neutral action on either a post or a comment. One vote per
 * user/target is enforced. Follows the 'community_platform_votes' Prisma table
 * design. Value must be 1, -1, or 0.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformVote = {
  /** Primary key. UUID for the vote record. */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the member who cast the vote on a post or comment. References
   * 'community_platform_members.id'.
   */
  voter_id: string & tags.Format<"uuid">;

  /**
   * UUID of the post that is the target of this vote (if a post vote). Null
   * if not a post vote.
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * UUID of the comment that is the target of this vote (if a comment vote).
   * Null if not a comment vote.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Only
   * these values are valid.
   */
  value: 1 | -1 | 0;

  /** UTC ISO 8601 timestamp when this vote was created. */
  created_at: string & tags.Format<"date-time">;

  /** UTC ISO 8601 timestamp when this vote was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. If null, this vote is currently active; otherwise,
   * the ISO datetime when the vote was deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformVote {
  /**
   * Query/Filter parameters for vote search. Supports pagination and
   * arbitrary filtering by voter, target (post/comment), value, and creation
   * time.
   */
  export type IRequest = {
    /** Page number for pagination (optional). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Items per page (optional). */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Restrict vote search to a specific post (optional). */
    post_id?: string & tags.Format<"uuid">;

    /** Restrict vote search to a specific comment (optional). */
    comment_id?: string & tags.Format<"uuid">;

    /** Filter by member voter UUID (optional). */
    voter_id?: string & tags.Format<"uuid">;

    /** Filter by value: 1 (upvote), -1 (downvote), 0 (neutral). */
    value?: number & tags.Type<"int32">;

    /** Sort order (created_at desc/asc, etc.). */
    sort?: string;
  };

  /**
   * Summary record for a vote, suitable for paginated collections or business
   * review. Shows which user voted, target, value, and creation time.
   */
  export type ISummary = {
    /** Vote record UUID. */
    id: string & tags.Format<"uuid">;

    /** Member who cast this vote (UUID). */
    voter_id: string & tags.Format<"uuid">;

    /** If this vote is on a post, target's UUID; may be null. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** If this vote is on a comment, target's UUID; may be null. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Vote value: 1=upvote, -1=downvote, 0=neutral (vote removal). */
    value: 1 | -1 | 0;

    /** Creation timestamp (ISO 8601). */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for creating a new vote record (upvote/downvote/neutral) on
   * a post or comment. One of post_id or comment_id required per business
   * rule.
   */
  export type ICreate = {
    /**
     * UUID of the post being voted on, or null if this is a comment vote.
     * Optional; at least one of post_id or comment_id must be present.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * UUID of the comment being voted on, or null if this is a post vote.
     * Optional; at least one of post_id or comment_id must be present.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. */
    value: 1 | -1 | 0;
  };

  /**
   * Request body for updating the value of an existing vote (upvote,
   * downvote, or neutral). Can only update value.
   */
  export type IUpdate = {
    /**
     * Updated vote value: 1 for upvote, -1 for downvote, 0 for
     * neutral/removal.
     */
    value: 1 | -1 | 0;
  };
}
