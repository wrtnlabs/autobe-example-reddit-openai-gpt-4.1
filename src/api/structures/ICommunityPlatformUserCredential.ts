import { tags } from "typia";

/**
 * Represents an authentication credential for both member and admin users.
 * Stores unique email for login correspondence, handles lifecycle audit via
 * creation, update, and soft delete timestamps. Does NOT expose password_hash
 * or any sensitive hash field. Linked to one member or admin user by 1:1
 * relation. Referenced in all authentication and account management APIs.
 *
 * Business logic: Creds are never returned directly to non-admin or outside API
 * consumers. Email is the primary lookup key and subject to uniqueness and
 * case-insensitivity requirements. Password hashes and security fields are
 * excluded for platform security.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformUserCredential = {
  /**
   * Primary Key. Unique identifier for the user credential record in the
   * system. Referenced as a foreign key in both member and admin user
   * tables.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address for authentication. Used for login and password
   * resets. Case-insensitive match is enforced by business logic and schema
   * constraints.
   */
  email: string & tags.Format<"email">;

  /** Timestamp when credential was created (ISO 8601). Used for audit trail. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the credentials were last changed (including resets). ISO
   * 8601 format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when credentials were deleted/invalidated. Null if still valid.
   * Used for soft deletion and business retention rules.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformUserCredential {
  /**
   * Advanced finding, pagination, and sorting request type for platform user
   * credentials. Used by admin interfaces and audit.
   */
  export type IRequest = {
    /** Page number for pagination. Optional; must be >=1 if provided. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of records per page. Optional; must be >=1 if provided. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Email address to filter credentials by. Optional, must match unique
     * business rule if set.
     */
    email?: (string & tags.Format<"email">) | null | undefined;

    /** Sorting string, e.g., 'created_at desc'. Optional. */
    sort?: string | null | undefined;

    /**
     * Filter credentials created after this ISO 8601 timestamp (inclusive).
     * Optional.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter credentials created before this ISO 8601 timestamp
     * (inclusive). Optional.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary of a user's stored authentication credentials, primarily for
   * administrative review and password reset workflows.
   *
   * Draws from `community_platform_user_credentials` and presents only safe,
   * non-sensitive data (no hashes, passwords). Enables search, export, and
   * management dashboard listings. Do not expose to general users or
   * non-privileged roles.
   */
  export type ISummary = {
    /**
     * Primary key for the user credential record, as in
     * `community_platform_user_credentials.id`.
     *
     * References the account's credential in all authentication flows and
     * administrative tracking.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The registered email address tied to this credential record.
     *
     * Used for login, password reset, and audit. Sourced from the unique
     * `email` column.
     */
    email: string & tags.Format<"email">;

    /**
     * Account creation timestamp for these credentials.
     *
     * Pulled from `created_at` in the schema, for audit trails.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last credentials update/password change.
     *
     * Based on `updated_at`; indicators for password reset, security
     * reviews, or system maintenance.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
