import { tags } from "typia";

/**
 * Schema for a per-user per-comment vote record, as defined in
 * community_platform_comment_votes. This represents a user's (member or admin)
 * latest vote state for a comment, including voter references, vote type, and
 * audit timestamps. Required for vote score calculation, moderation, and voting
 * state UX. Each (user, comment) pair may have at most one record at a time.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommentVote = {
  /**
   * Primary key of the vote record as stored in
   * community_platform_comment_votes.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier for the target comment that the vote record belongs to
   * (community_platform_comment_votes.comment_id).
   */
  comment_id: string & tags.Format<"uuid">;

  /**
   * UUID of the member user who cast the vote. Null unless the vote comes
   * from a member user. Provided to support business logic for user-level
   * audits and analytics.
   */
  voter_memberuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the admin user who cast the vote. Null unless this vote comes
   * from an admin user. Used for audit flows and analytics.
   */
  voter_adminuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The state/type of the vote (upvote, downvote, or none). Only these values
   * are allowed per business logic. Used both for user-facing UI display and
   * backend score aggregation.
   */
  vote_type: "upvote" | "downvote" | "none";

  /**
   * Timestamp of vote creation (ISO 8601 format). Used in sorting, analytics,
   * and audits. Prisma type DateTime.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the most recent update to vote state or audit. Reflects
   * toggling action or timestamp of clearing the vote. ISO 8601 date string
   * as specified by Prisma.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommentVote {
  /**
   * Request object for creating a new comment vote. Used to cast or update a
   * user's vote for a specific comment. Users may upvote, downvote, or clear
   * their vote (none). This record ties the user and the comment vote state,
   * with validation to prevent self-voting. References
   * community_platform_comment_votes Prisma model.
   */
  export type ICreate = {
    /**
     * The unique identifier for the comment being voted on. This must
     * reference a valid comment in the system. Used to associate the vote
     * record with the specific comment target. UUID format as per Prisma
     * schema.
     */
    comment_id: string & tags.Format<"uuid">;

    /**
     * Defines the state of the vote for this comment. Acceptable values are
     * 'upvote', 'downvote', or 'none' (to clear a previous vote/remove vote
     * state). Follows business rules against self-voting and enforces only
     * one vote per user per comment.
     */
    vote_type: "upvote" | "downvote" | "none";
  };

  /**
   * Object for updating an existing comment vote state. Used to change the
   * user's vote for a comment (upvote, downvote, or none) but never transfer
   * vote between users or comments. Updates updated_at timestamp as per
   * business rules.
   */
  export type IUpdate = {
    /**
     * The new voting state to apply to the vote record (either upvote,
     * downvote, or none to clear/remove the vote). Only this field may be
     * changed; ownership and associations are immutable.
     */
    vote_type: "upvote" | "downvote" | "none";
  };

  /**
   * Search/filter/paginate request object for listing votes on comments.
   * Allows filtering by voter (member/admin), vote type, paging, and output
   * sort order. Used for moderation, analytics, and vote review tools.
   */
  export type IRequest = {
    /**
     * Filter for votes cast by a particular member user. Optional; if
     * omitted, search not restricted by member user.
     */
    voter_memberuser_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for votes cast by a specific admin user. Optional; if omitted,
     * search not restricted by admin user.
     */
    voter_adminuser_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional search filter to restrict votes to a specific state: upvote,
     * downvote, or none. Useful for moderation or analytics queries.
     */
    vote_type?: "upvote" | "downvote" | "none" | undefined;

    /**
     * Pagination parameter specifying which result page to return
     * (1-based). Optional; defaults to first page.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of records per page for search results. Optional;
     * system default applies if omitted.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Sort order for the result set. May sort by created_at (default) or
     * vote_type for analytics/filtering screens.
     */
    sort?: "created_at" | "vote_type" | undefined;
  };
}
