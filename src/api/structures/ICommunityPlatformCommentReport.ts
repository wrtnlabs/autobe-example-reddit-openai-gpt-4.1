import { tags } from "typia";

/**
 * Full information for a comment report entity. Used for detail view,
 * moderation, and audit purposes. Contains all business and moderation-relevant
 * fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommentReport = {
  /** Unique identifier for the report. */
  id: string & tags.Format<"uuid">;

  /** The comment this report targets. */
  comment_id: string & tags.Format<"uuid">;

  /** Member who reported the comment (UUID). */
  reporter_id: string & tags.Format<"uuid">;

  /** Admin assigned to handle/report (UUID/null). */
  admin_id?: (string & tags.Format<"uuid">) | null;

  /** The member-supplied reason/explanation for this report. */
  report_reason: string;

  /**
   * Current status of the report (e.g., pending, under_review, rejected,
   * resolved).
   */
  status: string;

  /** Resolution notes/decision (optional, may be null if unresolved). */
  resolution?: string | null;

  /** Timestamp this report was created (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** When this report was last updated (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** When this report was resolved (ISO 8601, null if unresolved). */
  resolved_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformCommentReport {
  /**
   * Request parameters for searching/filtering comment reports. Supports
   * pagination, filtering by reason, reporter, admin, or status, and
   * sorting.
   */
  export type IRequest = {
    /** Page number for pagination (optional). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Items per page (optional). */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Filter by report reason substring. */
    report_reason?: string;

    /** Filter by status (pending, resolved, rejected, etc.). */
    status?: string;

    /** Filter by reporter_id (UUID of member). */
    reporter_id?: string & tags.Format<"uuid">;

    /** Filter by admin_id (UUID of admin). */
    admin_id?: string & tags.Format<"uuid">;

    /** Sort order (created_at desc/asc, etc.). */
    sort?: string;
  };

  /**
   * Summary representation for a comment report, for collections/options or
   * IPage. Includes only key fields for search/index screens.
   */
  export type ISummary = {
    /** Unique identifier for the report (UUID). */
    id: string & tags.Format<"uuid">;

    /** The comment this report targets. */
    comment_id: string & tags.Format<"uuid">;

    /** Member who reported the comment (UUID). */
    reporter_id: string & tags.Format<"uuid">;

    /** Current status of the report (e.g. pending, resolved). */
    status: string;

    /** Timestamp this report was created (ISO 8601). */
    created_at: string & tags.Format<"date-time">;

    /** Admin assigned to handle/report (UUID/null). */
    admin_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Required fields for submitting a new comment report. Members must specify
   * a reason and initial status.
   */
  export type ICreate = {
    /**
     * Textual user-supplied report reason (required, plain text, 2-500
     * chars).
     */
    report_reason: string & tags.MinLength<2> & tags.MaxLength<500>;

    /** Initial report status (per moderation process; typically 'pending'). */
    status: string;
  };

  /**
   * Fields allowed to be updated on an existing comment report. Status
   * changes, rationale, and admin assignment/resolution notes are allowed
   * according to moderation rules.
   */
  export type IUpdate = {
    /** (Optional) Reason text, for reporter/admin update. */
    report_reason?: string;

    /** (Optional) New status to set on the report. */
    status?: string;

    /**
     * Resolution/decision annotation from admin for this report (may be
     * null if not resolved).
     */
    resolution?: string | null;

    /** (Optional) Assign or re-assign an admin (UUID/null). */
    admin_id?: (string & tags.Format<"uuid">) | null;
  };
}
