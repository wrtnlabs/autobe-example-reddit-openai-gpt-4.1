import { tags } from "typia";

/**
 * Session entity storing device, member/admin reference, access/refresh token,
 * expiry, and audit information. Used throughout all platform authentication
 * workflows. Do NOT expose sensitive tokens in non-authenticated responses.
 * Device/admin/member references are all UUID. Fields are nullable as per
 * schema (see comments).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSession = {
  /** Unique identifier of the session record. */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the member (if this is a member session). Null for admin-only
   * sessions.
   */
  community_platform_member_id?: (string & tags.Format<"uuid">) | null;

  /**
   * ID of the admin (if this is an admin session). Null for member-only
   * sessions.
   */
  community_platform_admin_id?: (string & tags.Format<"uuid">) | null;

  /**
   * JWT access token for this session. Sensitive; returned only in
   * authentication response.
   */
  jwt_token: string;

  /**
   * Refresh token for this session. Sensitive; returned only in initial
   * login/join/refresh responses.
   */
  refresh_token: string;

  /**
   * Device or browser fingerprint for this session. Optional; provides
   * additional security and audit information.
   */
  device_fingerprint?: string | null;

  /** ISO 8601 timestamp of the session's expiration. */
  expires_at: string & tags.Format<"date-time">;

  /** If set, time when this session was revoked or invalidated via logout. */
  invalidated_at?: (string & tags.Format<"date-time">) | null;

  /** ISO 8601 creation timestamp for the session. */
  created_at: string & tags.Format<"date-time">;

  /** If set, time when this session was soft deleted (no longer valid). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformSession {
  /**
   * Request parameters for searching and filtering session
   * (community_platform_sessions) records. Supports pagination, member/admin
   * filtering, activity/expiry filter, device/browser searching, and sort
   * fields. All parameters are optional.
   */
  export type IRequest = {
    /**
     * Page number for pagination. Optional. Must be a positive integer or
     * null for default.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** How many records to return per page. Optional. Default 100. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Filter results to sessions belonging to this member (UUID). Optional. */
    memberId?: string & tags.Format<"uuid">;

    /** Filter results to sessions belonging to this admin (UUID). Optional. */
    adminId?: string & tags.Format<"uuid">;

    /** If true, return only active (non-deleted, non-expired) sessions. */
    activeOnly?: boolean;

    /** If true, return only expired sessions (expired_at past current time). */
    expiredOnly?: boolean;

    /** Filter by device fingerprint (exact match, optional). */
    deviceFingerprint?: string;

    /** Filter sessions created after this ISO8601 timestamp. */
    fromDate?: string & tags.Format<"date-time">;

    /** Filter sessions created before this ISO8601 timestamp. */
    toDate?: string & tags.Format<"date-time">;

    /** Free-text search field for device, browser, etc. Optional. */
    search?: string;

    /** Sort sessions by specified field. Optional. */
    sortBy?:
      | "created_at"
      | "expires_at"
      | "invalidated_at"
      | "device_fingerprint";

    /** Sort direction: ascending or descending. Optional. */
    direction?: "asc" | "desc";
  };

  /**
   * Represents the update DTO schema for modifying an existing session record
   * in the community_platform_sessions table. Used for PATCH/PUT methods on
   * session records in the OpenAPI operations. Only metadata fields can be
   * updated; tokens cannot be changed via this schema. See property
   * descriptions for session management and device context details.
   */
  export type IUpdate = {
    /**
     * The device or browser fingerprint. Optional; can be null for
     * server-annotated or privacy contexts.
     */
    device_fingerprint?: string | null;

    /**
     * The UTC datetime when the session will expire. Optional for
     * patch/put.
     */
    expires_at?: string & tags.Format<"date-time">;

    /**
     * The time the session was force-invalidated (e.g., logout everywhere).
     * Optional; set or null.
     */
    invalidated_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Soft-deletion timestamp. Set to null if session is active; update for
     * soft delete.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
