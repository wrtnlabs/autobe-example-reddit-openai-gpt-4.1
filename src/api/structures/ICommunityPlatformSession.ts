import { tags } from "typia";

/**
 * Describes a user authentication session and its tracking metadata. Each
 * session token provides access persistence and auditing for a single device or
 * browser context. Used for login, security auditing, device analytics, and
 * session validation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSession = {
  /** Unique identifier for this session (primary key in the sessions table). */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the user who owns this session. Represents a member/admin
   * user account with an active or expired session.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * The secure (hashed or opaque) session token. Used for session validation
   * and server-side authentication. Unique per session, never sent as plain
   * text in plain responses.
   */
  token: string;

  /**
   * Timestamp at which this session was issued. Used for session
   * lifespan/tracking.
   */
  issued_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the session is scheduled to expire. Used to manage user
   * login persistence.
   */
  expires_at: string & tags.Format<"date-time">;

  /**
   * Optional device/browser information for device recognition, user agent
   * analytics, and suspicious activity detection. May contain a user agent
   * string, structured JSON, or be null.
   */
  device_info?: string | null | undefined;

  /**
   * Optional login/session creation IP address. Used for security audit,
   * fraud detection, or account compromise investigation.
   */
  ip_address?: string | null | undefined;

  /**
   * Timestamp when the session was revoked (manually or by admin), if
   * applicable. Null if still valid, set if forcibly ended before
   * expiration.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp session database row was created. Typically matches issued_at
   * but may differ for retroactive session imports or audit corrections.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformSession {
  /**
   * Request type for searching and filtering platform sessions. Includes
   * filters for user, token, status, and standard pagination/query params.
   * Used by admin flows and analytics dashboards for session management and
   * security reviews.
   */
  export type IRequest = {
    /**
     * Optional user identifier for filtering sessions by owner. Allows
     * querying sessions created for a specific user account.
     */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional session token for direct lookup or filtering. Used for
     * searching by session reference for audit or traceability.
     */
    token?: string | undefined;

    /**
     * Optional session status for filtering (e.g., 'active', 'revoked',
     * etc.). Enables querying by state or business logic status label.
     */
    status?: string | undefined;

    /** Pagination: page number to retrieve. Defaults to 1 if omitted. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination: number of results per page. Defaults to system or
     * application standard if omitted.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Editable fields for a session record. Allows updating of device info and
   * revocation time. Does not allow modifying immutable fields (token,
   * user_id, issued_at, expires_at, created_at). Used in administrative
   * session management flows.
   */
  export type IUpdate = {
    /**
     * If supplied, device/browser information to update for this session.
     * Used for correcting/annotating analytics or security tracking.
     */
    device_info?: string | null | undefined;

    /**
     * If provided, timestamp to set the session as revoked (manual logout
     * or forced session end). Null resets to valid; a timestamp marks the
     * session as ended.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
