import { tags } from "typia";

/**
 * A log entry recording a moderation action on a post. See
 * community_platform_post_moderation_logs table. Contains references to the
 * post, performing admin user, action type, reason, and audit timestamp. Audit
 * trail for compliance/business rules. See Prisma table and ERD for fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPostModerationLog = {
  /**
   * Primary key. A unique UUID for this post moderation log entry, generated
   * at creation time. Reference to community_platform_post_moderation_logs.id
   * in the Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The ID of the post that this moderation action was taken against. Links
   * to community_platform_posts.id.
   */
  community_platform_post_id: string & tags.Format<"uuid">;

  /**
   * ID of the admin user account who executed this moderation action.
   * References community_platform_adminusers.id.
   */
  performed_adminuser_id: string & tags.Format<"uuid">;

  /**
   * The type of moderation action performed (for example: 'edit', 'delete',
   * 'restore'). String value as per post_moderation_logs.action_type in the
   * Prisma schema. For audit and compliance tracking.
   */
  action_type: string;

  /**
   * Optional explanation for the moderation action. Free-form text (up to 255
   * chars). Null when no explanation is given.
   */
  action_reason?: string | null | undefined;

  /**
   * Timestamp for when the moderation log was created. Value from
   * community_platform_post_moderation_logs.created_at. ISO 8601 format.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformPostModerationLog {
  /**
   * Request payload for searching, filtering, sorting, and paginating post
   * moderation logs (admin endpoints). Supports query by type, reason, date
   * range, sort order, and pagination controls. Used for admin review/audit
   * of post moderation operations.
   */
  export type IRequest = {
    /**
     * Filter moderation logs by action type (e.g., 'edit', 'delete',
     * 'restore'). Partial or exact match; if unspecified, all actions are
     * included.
     */
    action_type?: string | undefined;

    /**
     * Search moderation actions by provided reason; allows partial or
     * substring matches. Optional for filtering logs; if omitted, all
     * reasons included.
     */
    action_reason?: string | undefined;

    /**
     * Start date/time (inclusive, ISO 8601 UTC) for filtering moderation
     * logs. Events before this are excluded. Used for time window queries.
     */
    from_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End date/time (inclusive, ISO 8601 UTC) for filtering moderation
     * logs. Events after this are excluded. Used for time window queries.
     */
    to_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort order for returned moderation logs. 'asc' for oldest first;
     * 'desc' for newest first (defaults to 'desc'). Applies to creation
     * timestamp.
     */
    sort?: "asc" | "desc" | undefined;

    /**
     * Pagination: which page to return in result set. Starts from 1.
     * Required for paginated queries; defaults to 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination: maximum number of records per page. Defaults or maximums
     * as set by business rules; 100 is typical system max.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };
}
