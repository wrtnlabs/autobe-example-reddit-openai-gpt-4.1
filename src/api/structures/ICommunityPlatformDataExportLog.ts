import { tags } from "typia";

/**
 * Represents a single data export log for the community platform. Associates a
 * member or admin user with the export event, includes export metadata and
 * audit fields per compliance requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformDataExportLog = {
  /**
   * Unique identifier for the data export log event; corresponds to primary
   * key in community_platform_data_export_logs table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the member user who requested the data export, or null (nullable
   * field in schema).
   */
  member_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * ID of the admin user managing/performing the export, or null if not
   * applicable. Nullable in schema.
   */
  admin_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Nature of the data exported, such as 'user_data', 'community_data',
   * 'posts', etc. Used for compliance/business analytics.
   */
  export_type: string;

  /** Export file format for the exported data (such as 'json', 'csv'). */
  export_format: string;

  /** IP address from which the export request was made; audit and compliance. */
  requested_ip: string;

  /** Workflow status for export, e.g., 'pending', 'completed', 'failed'. */
  status: string;

  /**
   * Timestamp of when the export was requested/created. References
   * community_platform_data_export_logs.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp, or null if active (for compliance/data retention
   * logic).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformDataExportLog {
  /**
   * Filter/search and pagination parameters for querying data export logs on
   * the community platform for compliance, audit, or data lifecycle
   * management purposes.
   */
  export type IRequest = {
    /**
     * Filter for export logs by requesting member user ID (UUID), or null
     * if not filtering.
     */
    member_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter for export logs by requesting admin user ID (UUID), or null if
     * not filtering.
     */
    admin_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter: Match the type of export requested, e.g., 'user_data',
     * 'community_data', etc.
     */
    export_type?: string | undefined;

    /** Filter: Match the desired export file format (such as 'json', 'csv'). */
    export_format?: string | undefined;

    /**
     * Filter: Match export request status (e.g.,
     * 'pending','completed','failed').
     */
    status?: string | undefined;

    /** Paging parameter: which result page to return (1-based). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Paging parameter: maximum number of results per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Sorting parameter, e.g., by created_at or status. */
    sort?: string | undefined;

    /**
     * Filter: Only include logs created after this datetime (inclusive), or
     * null for no lower bound.
     */
    date_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter: Only include logs created before this datetime (inclusive),
     * or null for no upper bound.
     */
    date_to?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
