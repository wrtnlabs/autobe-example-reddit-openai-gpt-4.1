import { tags } from "typia";

/**
 * Post report entity representing a user-initiated or admin-initiated
 * report/flag on a particular post in the system. Includes links to post,
 * reporter, and resolver admin, with moderation workflow fields and audit
 * timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPostReport = {
  /**
   * Primary key of the post report. Uniquely identifies this report in the
   * database. Referenced by moderation and appeal workflows.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The ID of the post to which this report applies. Foreign key to posts
   * table.
   */
  community_platform_post_id: string & tags.Format<"uuid">;

  /** Member ID who reported the post. Links to reporting member's identity. */
  reported_by_member_id: string & tags.Format<"uuid">;

  /** ID of the admin who handled the report. Nullable until assignment. */
  admin_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Type/category of report (e.g., spam, abuse, etc.). Must match
   * platform-allowed values.
   */
  report_type: string;

  /**
   * Detailed reason or explanation for the report, up to 1000 characters.
   * Business logic typically enforces non-empty and plain text format.
   */
  reason: string;

  /**
   * Current workflow status of the report (e.g., open, resolved, dismissed,
   * etc.). Driven by moderation queue.
   */
  status: string;

  /** Notes or rationale by admin after handling the case. Nullable. */
  resolution_notes?: string | null;

  /** Timestamp when the report was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last report update or admin intervention. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the report was resolved/closed. Nullable for open reports. */
  resolved_at?: (string & tags.Format<"date-time">) | null;

  /** Soft delete timestamp for report, if applicable. Nullable when active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformPostReport {
  /** Query for paginated/filterable report result set. */
  export type IRequest = {
    /** Page number, default 1. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Items/page, default 20. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Optional filter: report status (open, resolved, etc). */
    status?: string;

    /** Optional filter: report type/category. */
    report_type?: string;

    /** Sort order (by creation time or other key). */
    order?: "asc" | "desc";
  };

  /**
   * Request body for creating a post report. Only fields required from the
   * reporter; admin and workflow fields are set server-side.
   */
  export type ICreate = {
    /**
     * Type/category of report (e.g., spam, abuse, etc.). Required. Must
     * match platform-allowed values.
     */
    report_type: string;

    /**
     * Explanation for the report, up to 1000 characters. Non-empty plain
     * text required.
     */
    reason: string;
  };

  /**
   * Request body for updating a post report. Allows updates for type, reason,
   * status, or admin notes per workflow.
   */
  export type IUpdate = {
    /** Type/category of report. Optional for updates. */
    report_type?: string;

    /** Update the explanation/reason for this report. */
    reason?: string;

    /** Status transition for the report (e.g., open â†’ resolved, etc.). */
    status?: string;

    /** Administrative notes/rationale for status or resolution. */
    resolution_notes?: string;
  };
}
