import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Admin user entity for platform. Accounts with site moderation and
 * configuration power. Linked to credentials record. All fields are directly
 * mapped to community_platform_adminusers. Internal/immutable references
 * present for full business logic. See field-level comments for details.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAdminUser = {
  /**
   * Unique identifier for this admin user, as per
   * community_platform_adminusers.id. Primary key, immutable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * References admin credentials in community_platform_user_credentials.id.
   * Immutable after creation.
   */
  user_credential_id: string & tags.Format<"uuid">;

  /**
   * Admin display name (optional, 0-32 chars). Null or empty means no display
   * name.
   */
  display_name?:
    | (string & tags.MinLength<0> & tags.MaxLength<32>)
    | null
    | undefined;

  /**
   * Admin account status string, e.g., 'active', 'suspended', 'retired'. Used
   * by permission systems.
   */
  status: string;

  /** Admin user creation timestamp in ISO 8601. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp for this admin user. ISO 8601. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete timestamp if the account is deleted, or null if still valid. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformAdminUser {
  /**
   * Request object for adminUser registration (join). Requires email and
   * password. Display name is optional, must be <=32 chars if provided.
   */
  export type IJoin = {
    /**
     * Email address for admin registration. Must be unique in the system
     * and will be used for future admin logins.
     */
    email: string & tags.Format<"email">;

    /**
     * Password for admin authentication. Should be securely hashed; plain
     * text is only used for client-side input.
     */
    password: string;

    /**
     * Optional display name for the admin user for UI identification.
     * Maximum 32 characters.
     */
    display_name?: (string & tags.MaxLength<32>) | undefined;
  };

  /**
   * Response object for successful adminUser authentication
   * (login/join/refresh). Includes user ID, issued token(s), and optionally
   * display name.
   */
  export type IAuthorized = {
    /**
     * Admin user ID (UUID) returned upon successful authentication or
     * registration.
     */
    id: string & tags.Format<"uuid">;

    /**
     * References admin credentials in
     * community_platform_user_credentials.id. Immutable after creation.
     */
    user_credential_id: string & tags.Format<"uuid">;

    /** Optional admin display name for display in the UI, if set. */
    display_name?: (string & tags.MaxLength<32>) | undefined;

    /**
     * Admin account status string, e.g., 'active', 'suspended', 'retired'.
     * Used by permission systems.
     */
    status: string;

    /** Admin user creation timestamp in ISO 8601. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp for this admin user. ISO 8601. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft-delete timestamp if the account is deleted, or null if still
     * valid.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request object for adminUser login. Authenticates an admin via email and
   * password. Email must correspond to a registered admin credential.
   */
  export type ILogin = {
    /** Admin login email address, must be registered to an adminUser. */
    email: string & tags.Format<"email">;

    /**
     * Password for admin login. Security policy determines transmission
     * (hash/plaintext) and required format.
     */
    password: string;
  };

  /**
   * Input object for refreshing admin user session tokens.
   *
   * This contains the refresh token required by the admin for JWT renewal.
   * Token must match an active session record. Used for authentication
   * flows.
   */
  export type IRefresh = {
    /**
     * The refresh token string issued as part of a previous session for
     * token renewal.
     *
     * Must match a non-revoked, non-expired session in the system.
     */
    token: string;
  };

  /**
   * Search, filter, pagination, and ordering request DTO for admin user
   * records as available in privileged admin management UIs and audit tools.
   * All fields are optional.
   */
  export type IRequest = {
    /** Page number for pagination. Optional; must be >=1 if set. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of records to return per page. Optional; must be >=1 if set. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Display name of the admin user to filter on. Optional, maximum 32
     * chars.
     */
    display_name?:
      | (string & tags.MinLength<0> & tags.MaxLength<32>)
      | null
      | undefined;

    /**
     * Status string to filter admin users by (e.g., 'active', 'suspended').
     * Optional.
     */
    status?: string | null | undefined;

    /**
     * Sorting order string, e.g., 'created_at desc', 'display_name asc'.
     * Optional.
     */
    sort?: string | null | undefined;

    /** Filter admin users created after this ISO 8601 timestamp. Optional. */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter admin users created before this ISO 8601 timestamp. Optional. */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Business summary of an admin user, containing the minimal required fields
   * for directory, audit, and admin role resolution.
   *
   * All returned properties are based on schema columns of
   * `community_platform_adminusers`. Sensitive or credential data
   * (user_credential_id, email, passwords) are excluded. Use for
   * administrative/role lists, logs, or search.
   */
  export type ISummary = {
    /**
     * Globally unique primary identifier for the admin user.
     *
     * Backed by `community_platform_adminusers.id` column. Used for
     * role-based operations and admin/personnel directory listings.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Display name or handle for the admin user, presented in
     * system/moderator logs and dashboards.
     *
     * Taken from optional `display_name` (nullable). Used for improved
     * identification in logs and UI.
     */
    display_name?: string | null | undefined;

    /**
     * Admin user account status, such as 'active', 'suspended', or
     * 'retired'.
     *
     * Retrieved from `status` in the schema; controls admin capabilities
     * and login permission.
     */
    status: string;

    /**
     * Timestamp when the admin user account was created.
     *
     * Direct from `created_at` column; appears in personnel audit, tracing,
     * and onboarding flows.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last admin profile or status update.
     *
     * Backed by `updated_at` column; used in personnel tracking and
     * operational audit.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
