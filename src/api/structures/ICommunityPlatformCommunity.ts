import { tags } from "typia";

/**
 * Represents a sub-community within the platform. Each community has an
 * immutable unique id and name, categorization reference, ownership (member
 * user id), and optional metadata such as description, logo/banner URIs.
 * Provides all business context necessary for navigation, post association, and
 * home/community feeds. Soft deletion is supported for compliance and legal
 * requirements; deleted communities are hidden from feeds/UI but may be
 * retained by platform admin.
 *
 * Business logic: Only owners may modify description, logo, or banner URI. Name
 * and category are not mutable after creation. Relation to rules, recent
 * communities, memberships is handled by subordinate endpoints and not included
 * directly in this type.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunity = {
  /**
   * Primary key for the community instance. Unique, immutable identifier
   * across platform tables. Used in all community API operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the member user who created (owns) the community. Immutable after
   * creation. Used for auditing ownership and enforcing update/delete
   * restrictions. References 'community_platform_memberusers.id'.
   */
  owner_id: string & tags.Format<"uuid">;

  /**
   * ID of the platform-wide community category. Must correspond to
   * 'community_platform_categories.id' and is enforced for
   * classification/search logic.
   */
  category_id: string & tags.Format<"uuid">;

  /**
   * Unique, immutable, case-insensitive name of the community. 5–32
   * characters, a-z, A-Z, 0-9, hyphen, underscore. Used as public handle and
   * identifier. Not editable after creation.
   */
  name: string;

  /**
   * Optional plain-text community description. Up to 200 characters. Used for
   * sidebar/info box display and search index. Editable by owner.
   */
  description?: string | undefined;

  /**
   * Optional URI for community logo/image asset. Usually a full URL or
   * CDN-ref path. Not required, editable by owner.
   */
  logo_uri?: string | undefined;

  /**
   * Optional URI for community banner image asset. Usually displayed in
   * community header. Editable by owner, not required.
   */
  banner_uri?: string | undefined;

  /**
   * Timestamp this community was created. ISO 8601 format. Used in sorting
   * (newest).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last community metadata update. Used for auditing and UI
   * logic.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp, or null if active. When set, indicates community
   * is removed from public feeds/lists but retained for compliance or admin
   * restoration.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommunity {
  /**
   * Request/search body for listing community_platform_communities. Allows
   * filtering by name, category, owner, sorting order, pagination control,
   * and is suitable for both public and admin/member access. Does NOT accept
   * system-generated or sensitive fields. Used for Explore, home feed
   * construction, or backend admin grids.
   */
  export type IRequest = {
    /**
     * Optional filter by (case-insensitive) sub-community name. Business
     * logic requires name to conform to unique, 5–32 alphanumeric,
     * hyphen/underscore constraints.
     */
    name?: string | undefined;

    /**
     * Optional filter by platform category. Must correspond to
     * 'community_platform_categories.id', guarantees search by
     * classification.
     */
    category_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter by immutable owner user (creator). References member
     * user id.
     */
    owner_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Order of results. 'newest' = most recently created first; 'top' = by
     * highest score/engagement. Ties are resolved by created_at, then id.
     */
    sort_by?: "newest" | "top" | undefined;

    /**
     * Page index for paginated results. Usually 1-based. Enforces
     * pagination standardization for requests.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Max number of sub-communities per page. Capped at platform maximum
     * (typically 20).
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Payload for creating a new sub-community. Requires unique name and valid
   * existing category reference. Description, logo, and banner URIs are
   * optional fields. Community creation API enforces all formatting,
   * uniqueness, and business constraints. Ownership is assigned from
   * authentication and never specified client-side. Rules and member count
   * are managed in other tables.
   */
  export type ICreate = {
    /**
     * Unique, immutable case-insensitive public name for the community.
     * Must be 5–32 characters; only alphanumeric, hyphen/underscore
     * allowed. Uniqueness and formatting enforced by the business logic on
     * creation. Not editable after creation.
     */
    name: string;

    /**
     * Target category for this community. Must correspond to an existing
     * 'community_platform_categories.id'. Required at creation, immutable
     * after. Key for classification and search UI options.
     */
    category_id: string & tags.Format<"uuid">;

    /**
     * Optional plain-text description for the community (up to 200 chars).
     * Editable by owner after creation.
     */
    description?: string | undefined;

    /**
     * Optional logo/image URI (CDN or absolute URL). Used for sidebar/index
     * card display.
     */
    logo_uri?: string | undefined;

    /** Optional banner/image URI for community header visual. */
    banner_uri?: string | undefined;
  };

  /**
   * Update DTO for community metadata. Editable fields include description,
   * logo_uri, and banner_uri. Ownership, name, and category_id cannot be
   * changed after creation. API logic enforces ownership and business rules
   * for mutability of each field. Used in memberUser and adminUser update
   * operations for communities.
   */
  export type IUpdate = {
    /**
     * (Optional) Editable description for the community. Plain-text only;
     * up to 200 chars.
     */
    description?: string | undefined;

    /**
     * (Optional) New logo/image URI for the community. If omitted, previous
     * value is retained.
     */
    logo_uri?: string | undefined;

    /** (Optional) Banner URI for the community header. Editable by owner. */
    banner_uri?: string | undefined;
  };

  /**
   * Summary representation of a sub-community. Includes key data for listing
   * and quick-select UI operations. Exposes only safe display fields—never
   * internal state or owner references.
   *
   * Derived from the community_platform_communities entity, providing a
   * minimal, business-context summary for selection, feed inclusion, or
   * search result display. Used throughout the application where full
   * community detail is unnecessary.
   */
  export type ISummary = {
    /**
     * Unique identifier for the sub-community. Corresponds to the
     * community_platform_communities.id field in the database. Used to
     * uniquely identify a sub-community in business logic and API
     * operations.
     *
     * UUID format per platform-wide convention. Required for all community
     * operations that reference specific communities.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Name of the community. Immutable and unique (case-insensitive, 5-32
     * chars, a-zA-Z0-9-_). This field serves as the public identifier and
     * is subject to naming constraints defined by business logic. Present
     * in all displays and summary cards.
     *
     * Corresponds to community_platform_communities.name in the schema.
     */
    name: string;

    /**
     * Optional description for the community. Maximum 200 characters. May
     * be null or omitted if not provided by the owner.
     *
     * Used in summary cards, tooltips, and auxiliary UI contexts. Maps to
     * community_platform_communities.description.
     */
    description?: string | null | undefined;

    /**
     * URI for an optional community logo image asset. May be null if not
     * set. Used for visual branding in UI cards, search listings, or
     * sidebar components.
     *
     * Maps to community_platform_communities.logo_uri.
     */
    logo_uri?: string | null | undefined;

    /**
     * URI for an optional community banner image asset. May be null if not
     * set. Intended for use in large headers or visually rich listings.
     * Maps to community_platform_communities.banner_uri.
     */
    banner_uri?: string | null | undefined;
  };
}
