import { tags } from "typia";

/**
 * Full community entity with all platform business data for sub-communities.
 * All major fields required for create, edit, and display are present. Returned
 * in detail/GET endpoints. Note: owner_id and name are immutable after create.
 * Public-facing; never exposes member PII in responses.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunity = {
  /** Unique id for the community platform community entity. */
  id: string & tags.Format<"uuid">;

  /** Foreign key to the community category (must match category table). */
  category_id: string & tags.Format<"uuid">;

  /** Foreign key to the member who created/owns this community. */
  owner_id: string & tags.Format<"uuid">;

  /**
   * Unique, immutable, validated presentation name (slug) of community (see
   * business rules, immutable).
   */
  name: string;

  /** Optional display title shown in UI interfaces (up to 64 chars). */
  display_title?: string | null;

  /** Long community description, up to 200 chars. Optional. */
  description?: string | null;

  /** Image URI for community's logo (optional, up to 5MB, 80k chars). */
  logo_uri?: string | null;

  /** Image URI for community's banner (optional, up to 5MB, 80k chars). */
  banner_uri?: string | null;

  /** Created timestamp (UTC, platform default). */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp (UTC, platform default). */
  updated_at: string & tags.Format<"date-time">;

  /** If set, timestamp for soft-deletion audit. Null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformCommunity {
  /**
   * Advanced parameters for searching/filtering a paginated list of
   * communities. Used for community discovery features and explore/search
   * endpoints. All properties are optional. Supports filtering by ownership,
   * category, exact or partial name/title, textual search, and return sort
   * order.
   */
  export type IRequest = {
    /** Page number for pagination. Optional. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Records per page to return. Optional. Default: 20. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Return only communities created/owned by this user (admin filtering). */
    owner_id?: string & tags.Format<"uuid">;

    /** Return only communities matching this category. */
    category_id?: string & tags.Format<"uuid">;

    /**
     * Where clause: Like/exact match on unique community name
     * (alphanumeric, hyphen/underscore).
     */
    name?: string;

    /** Like/exact search for community display title. Optional. */
    display_title?: string;

    /** Like/exact search for community description. Optional. */
    description?: string;

    /** Free-text search for community, matches name, title, and description. */
    search?: string;

    /** Sort by key. Default = created_at. */
    sortBy?: "created_at" | "updated_at" | "name" | "display_title";

    /** Sort order ascending or descending. */
    direction?: "asc" | "desc";
  };

  /**
   * Summary card for a community entity, returned in listings/search results.
   * Only safe, public-facing fields included. Excludes full descriptions or
   * deleted state.
   */
  export type ISummary = {
    /** Unique identifier of the community entity. */
    id: string & tags.Format<"uuid">;

    /** Unique, immutable community code name (slug) as per business rules. */
    name: string;

    /** Display title for the community. Optional; may be null. */
    display_title?: string | null;

    /** Category reference ID (FK to categories table). */
    category_id: string & tags.Format<"uuid">;

    /** Owner/creator member ID. */
    owner_id: string & tags.Format<"uuid">;

    /** Creation timestamp of this community. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Input data to create a new community entry. Used in POST endpoints for
   * member/admin community creation. Validates all creation business
   * requirements (name uniqueness, required category, slug rules). Name and
   * category cannot be changed afterward. Optional logo, banner, description,
   * or display_title are supported. All URI fields are expected to be valid
   * image references per business rule. No owner_idâ€”that comes from
   * authentication context. Never includes created_at/updated_at/deleted_at:
   * those are set by system/business logic at creation. Never accepts or
   * exposes deleted status for created entries.
   */
  export type ICreate = {
    /** Required. Category ID from categories table for new community. */
    category_id: string & tags.Format<"uuid">;

    /**
     * Required. Unique, immutable slug for new community (validated, 3-32
     * chars, alphanumeric/hyphen/underscore, lower-case).
     */
    name: string;

    /** Optional. Display title (max 64 chars). */
    display_title?: string;

    /** Optional. Community description (max 200 chars). */
    description?: string;

    /** Optional. Logo image URI (up to 80,000 chars, soft cap 5MB image). */
    logo_uri?: string;

    /** Optional. Banner image URI (up to 80,000 chars, soft cap 5MB image). */
    banner_uri?: string;
  };

  /**
   * Schema for updating editable fields of a community (display_title,
   * description, logo/banner, category). The name is immutable and cannot be
   * changed. Used in PUT or PATCH APIs for community metadata management.
   */
  export type IUpdate = {
    /**
     * The display title of the community, up to 64 characters. Optional;
     * null to clear.
     */
    display_title?: string | null;

    /**
     * Summary description for the community. Up to 200 characters; null to
     * clear.
     */
    description?: string | null;

    /** URI for the community's logo image. Optional and nullable. */
    logo_uri?: string | null;

    /** URI for the community's banner image. Optional and nullable. */
    banner_uri?: string | null;

    /**
     * The UUID of the category this community is assigned to. Required if
     * changing category.
     */
    category_id?: string;
  };
}
