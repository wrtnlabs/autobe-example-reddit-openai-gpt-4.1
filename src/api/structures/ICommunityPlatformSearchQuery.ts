import { tags } from "typia";

/**
 * Represents a single search query log event in the community platform.
 *
 * Contains the full details of who performed the search, what was searched for,
 * timestamps, and audit/logging information. Used for compliance, analytics,
 * and security investigation workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSearchQuery = {
  /**
   * Unique identifier (UUID) for search query log event.
   *
   * This property serves as the primary key for the log record.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Member ID (if logged) who performed the search, or null if guest/admin.
   *
   * Records which member (if any) issued this search.
   */
  member_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Admin ID (if present) who performed the search, or null for member/guest
   * searches.
   *
   * Identifies admin search context where relevant.
   */
  admin_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Raw user-entered search string, as performed.
   *
   * Logged for analytics/audit.
   */
  query_text: string;

  /**
   * Type of entity searched (e.g. 'post', 'community', 'comment').
   *
   * Indicates context of search event.
   */
  search_type: string;

  /**
   * Timestamp (UTC) when the search event occurred.
   *
   * This is the canonical search event time.
   */
  performed_at: string & tags.Format<"date-time">;

  /**
   * Origin context or UI page for search (e.g. 'home', 'sidebar', 'explore'),
   * or null if unknown.
   *
   * Used for analytics segmentation.
   */
  context?: string | null;

  /**
   * Anonymized IP address or session token for the search event, if recorded.
   *
   * Used for audit/compliance or abuse monitoring.
   */
  ip?: string | null;

  /**
   * Timestamp when this log entry was created (UTC).
   *
   * May be equal to performed_at for real-time logging systems.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to this log entry (UTC).
   *
   * Usually equals created_at unless backfilled or amended.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (UTC, nullable) when this log was soft-deleted (for compliance,
   * retention policy, or GDPR). Null if still active.
   *
   * Indicates retention status for audit.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformSearchQuery {
  /**
   * Request schema for searching the community_platform_search_queries
   * audit/event log table.
   *
   * Allows administrators or auditors to query paginated search logs using
   * advanced filters and sorting. All parameters are optional and may be
   * combined for complex admin use cases. Used in search analytics interfaces
   * and compliance workflows.
   */
  export type IRequest = {
    /**
     * Page number for paginated search results.
     *
     * This property determines the current page of the paginated search.
     * Used for pagination navigation.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Maximum results per page for pagination.
     *
     * Controls the number of items to return per page in the results.
     *
     * Default: 100.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Filter by full or partial search query text.
     *
     * Returns only search logs that match the specified query text
     * (case-insensitive, trigram search for analytics/audit use).
     *
     * May be used to filter logs by keyword presence.
     */
    query_text?: string | null;

    /**
     * Type of entity searched: 'post', 'community', or 'comment'.
     *
     * Restricts the search query log to the specified entity type. Enum
     * constraint is enforced at application level.
     */
    search_type?: string | null;

    /**
     * Filter by authenticated member (if present).
     *
     * Only returns queries performed by the specified member.
     */
    member_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter by admin user (if present).
     *
     * Only returns queries performed by the specified admin.
     */
    admin_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Return search queries performed after or at this timestamp
     * (inclusive).
     *
     * Supports querying logs within a time range.
     */
    performed_at_start?: (string & tags.Format<"date-time">) | null;

    /**
     * Return search queries performed before or at this timestamp
     * (inclusive).
     *
     * Supports querying logs within a time range.
     */
    performed_at_end?: (string & tags.Format<"date-time">) | null;

    /**
     * Field to sort results by (e.g. 'performed_at', 'query_text').
     *
     * Defines the property used for sorting search log results in paginated
     * queries.
     */
    sort_by?: string | null;

    /**
     * Sort order direction: 'asc' for ascending or 'desc' for descending.
     *
     * Controls ascending or descending order of results by sort_by field.
     */
    sort_direction?: "asc" | "desc" | null;

    /**
     * Filter by search context/page (e.g. 'home', 'explore', 'sidebar').
     *
     * Restricts logs to searches performed from specific areas of the UI.
     */
    context?: string | null;

    /**
     * Filter by IP or anonymized session token used at search time.
     *
     * Enables searches of logs for specific IP addresses or session
     * tracking tokens.
     */
    ip?: string | null;
  };

  /**
   * Summary of a single search query log record for the community platform.
   *
   * Provides essential metadata for analytics, audit, and compliance use
   * cases. Includes member/admin actor, timestamps, and search context.
   */
  export type ISummary = {
    /**
     * Unique identifier (UUID) for search query log event.
     *
     * This property serves as the primary key for the log record.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Member ID (if logged) who performed the search, or null if
     * guest/admin.
     *
     * Records which member (if any) issued this search.
     */
    member_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Admin ID (if present) who performed the search, or null for
     * member/guest searches.
     *
     * Identifies admin search context where relevant.
     */
    admin_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Raw user-entered search string, as performed.
     *
     * Logged for analytics/audit.
     */
    query_text: string;

    /**
     * Type of entity searched (e.g. 'post', 'community', 'comment').
     *
     * Indicates context of search event.
     */
    search_type: string;

    /**
     * Timestamp (UTC) when the search event occurred.
     *
     * This is the canonical search event time.
     */
    performed_at: string & tags.Format<"date-time">;

    /**
     * Origin context or UI page for search (e.g. 'home', 'sidebar',
     * 'explore'), or null if unknown.
     *
     * Used for analytics segmentation.
     */
    context?: string | null;

    /**
     * Anonymized IP address or session token for the search event, if
     * recorded.
     *
     * Used for audit/compliance or abuse monitoring.
     */
    ip?: string | null;

    /**
     * Timestamp when this log entry was created (UTC).
     *
     * May be equal to performed_at for real-time logging systems.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last update to this log entry (UTC).
     *
     * Usually equals created_at unless backfilled or amended.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp (UTC, nullable) when this log was soft-deleted (for
     * compliance, retention policy, or GDPR). Null if still active.
     *
     * Indicates retention status for audit.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
