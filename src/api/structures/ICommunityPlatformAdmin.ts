import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Admin user profile entity for privileged platform access.
 *
 * Includes audit fields, privilege level, and personal information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAdmin = {
  /** UUID primary key for the admin account. */
  id: string & tags.Format<"uuid">;

  /** Unique email for admin authentication. */
  email: string & tags.Format<"email">;

  /** Display name for audit logs and admin UIs. Optional. */
  display_name?: (string & tags.MaxLength<64>) | null;

  /** Flag indicating if the admin account is currently active. */
  is_active: boolean;

  /** True if this account has super-admin privileges; can manage other admins. */
  is_super_admin: boolean;

  /**
   * Timestamp of the last successful login to the admin account. Null if
   * never logged in.
   */
  last_login_at?: (string & tags.Format<"date-time">) | null;

  /** Timestamp when the admin account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the most recent modification of this admin account. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformAdmin {
  /**
   * Body for creating/registering a new admin account.
   *
   * Email and password fields are required; display_name is optional.
   */
  export type IJoin = {
    /**
     * Email address for the admin account. Must be unique. Used as the
     * login identifier and for system notifications.
     */
    email: string & tags.Format<"email">;

    /**
     * Raw password for the new admin account. Will be hashed for storage.
     * Must meet platform password complexity requirements.
     */
    password: string;

    /**
     * Optional administrative display name for audit logs/UI. Defaults to
     * the email account if not provided.
     */
    display_name?: (string & tags.MaxLength<64>) | null;
  };

  /**
   * Authorization response type for admin endpoints after join/login/refresh.
   *
   * Contains token (JWT access/refresh) and the authenticated admin entity.
   */
  export type IAuthorized = {
    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * The admin profile/entity associated with the session. Includes ID,
     * email, display name, status/privileges.
     */
    admin: ICommunityPlatformAdmin;
  };

  /**
   * Request body for admin authentication (login) endpoint.
   *
   * Requires both email and password fields.
   */
  export type ILogin = {
    /**
     * Admin account email address used for login. Must match an active
     * registered admin in the system.
     */
    email: string & tags.Format<"email">;

    /** Raw password for admin authentication. Handled securely server-side. */
    password: string;
  };

  /**
   * Request body for admin JWT token refresh operation.
   *
   * Contains only the required refresh_token.
   */
  export type IRefresh = {
    /**
     * A valid, unexpired refresh_token associated with a prior admin
     * session.
     *
     * Required to obtain new access/refresh JWT tokens on refresh endpoint.
     */
    refresh_token: string;
  };
}
