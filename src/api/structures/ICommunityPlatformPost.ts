import { tags } from "typia";

/**
 * Represents a single post entity as stored in the database. Contains all major
 * business fields and audit fields from Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPost = {
  /** Unique post ID (UUID). */
  id: string & tags.Format<"uuid">;

  /** ID of the community of the post. */
  community_platform_community_id: string & tags.Format<"uuid">;

  /** ID of the authoring member (user) for this post. */
  community_platform_member_id: string & tags.Format<"uuid">;

  /** Title of the post. 5-120 characters, plain text. */
  title: string;

  /**
   * Plain text content of the post. 10–10,000 characters. No scripts, code,
   * etc.
   */
  body: string;

  /**
   * Optional display name for the post. Used as author alias with up to 32
   * chars.
   */
  author_display_name?: string | null;

  /** When the post was created (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** When the post was last updated (ISO 8601 UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp. Null if active; set if deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICommunityPlatformPost {
  /**
   * Filtering, sorting, and pagination options for post listing/search API.
   * Used for Home Feed, Community Feed, and full-text search results.
   */
  export type IRequest = {
    /** Page number for result pagination, 1-based. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Maximum number of posts per page. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Optional: Filter by community (by UUID). */
    community_platform_community_id?: string & tags.Format<"uuid">;

    /** Optional: Filter by author/member (by UUID). */
    author_id?: string & tags.Format<"uuid">;

    /** Text search filter (title/body keywords). */
    query?: string;

    /**
     * Sort mode for results — by creation date or 'top' posts
     * (algorithmic).
     */
    sort_by?: "created_at" | "top";

    /**
     * Order direction: ascending or descending (for date or algorithmic
     * order).
     */
    order?: "asc" | "desc";

    /**
     * Filter for posts created after/before (inclusive) — ISO8601
     * date-time.
     */
    min_date?: string & tags.Format<"date-time">;

    /** Filter for posts created before/at (inclusive) — ISO8601 date-time. */
    max_date?: string & tags.Format<"date-time">;
  };

  /**
   * Summary type for community platform posts. For list/feed/discovery; omits
   * body, votes, detailed status.
   */
  export type ISummary = {
    /** Unique identifier of the post. Primary key from Prisma model. */
    id: string & tags.Format<"uuid">;

    /** Title of the post. Required, 5-120 characters, plain text. */
    title: string;

    /** ID of the community the post belongs to. */
    community_platform_community_id: string & tags.Format<"uuid">;

    /**
     * Optional display name of author; null or omitted means
     * default/Anonymous.
     */
    author_display_name?: string | null;

    /** Timestamp when the post was created (ISO 8601). */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the post was last edited (ISO 8601). */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for creating a new community platform post. Only required
   * fields + business-optional display name.
   */
  export type ICreate = {
    /** ID of the community to post in. */
    community_platform_community_id: string & tags.Format<"uuid">;

    /** Title for the post: 5-120 chars. */
    title: string;

    /** Body/content for the post: 10-10,000 chars, plain text only. */
    body: string;

    /** Optional display name for the post's author. */
    author_display_name?: string | null;
  };

  /**
   * Request body for updating an existing post. Fields are optional and may
   * be patched individually.
   */
  export type IUpdate = {
    /** Updated title (5-120 chars, plain text). */
    title?: string;

    /** Updated body (10-10,000 chars, plain text). */
    body?: string;

    /** Optional new display name for the author. */
    author_display_name?: string | null;
  };
}
