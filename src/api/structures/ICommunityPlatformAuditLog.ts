import { tags } from "typia";

/**
 * Audit log entity reflecting moderation, escalation and admin actions, with
 * full event and outcome context. Follows Prisma and business rule
 * documentation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAuditLog = {
  /** Unique UUID primary key for this audit log entry. */
  id: string & tags.Format<"uuid">;

  /** Admin ID associated with this event, if applicable (nullable). */
  admin_id?: (string & tags.Format<"uuid">) | null;

  /** Member/user ID involved in this event, if applicable (nullable). */
  member_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Business event type (e.g. admin_action, policy_override) per Prisma
   * schema.
   */
  event_type: string;

  /** Entity type affected by the event (community, post, comment, user, etc.). */
  entity_type: string;

  /** UUID identifying the affected business entity. */
  entity_id: string & tags.Format<"uuid">;

  /** Optional JSON string with event-specific metadata or payload. */
  metadata_json?: string | null;

  /**
   * Outcome/result string for the event (e.g., 'success', 'error',
   * 'reverted').
   */
  result: string;

  /** Timestamp when this audit log was created. */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformAuditLog {
  /**
   * Audit log search and filter parameters. Used to retrieve paged, filtered
   * audit trail records. All filtering fields are optional.
   */
  export type IRequest = {
    /** Current page number for pagination of audit logs. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Maximum number of audit log entries to return per page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Type of audit event (e.g., 'admin_action', 'escalation',
     * 'policy_override', etc.)
     */
    event_type?: string;

    /**
     * Entity (e.g., post, comment, community, user) affected by the audit
     * event.
     */
    entity_type?: string;

    /** UUID of the entity related to the audit log event. */
    entity_id?: string & tags.Format<"uuid">;

    /**
     * Outcome status of the event (e.g., success, error, reverted,
     * escalated).
     */
    result?: string;

    /** Filter: lower bound created_at (ISO8601 date-time). */
    created_at_from?: string & tags.Format<"date-time">;

    /** Filter: upper bound created_at (ISO8601 date-time). */
    created_at_to?: string & tags.Format<"date-time">;
  };
}
