import { tags } from "typia";

/**
 * Platform-wide audit log entry representing sensitive actions, administrative
 * operations, configuration or permission changes, login events, or other
 * system-critical activities. Used for compliance review, incident
 * investigation, and overall security monitoring as required by business logic
 * and regulatory policies.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAuditLog = {
  /**
   * The unique identifier for the audit log entry. Auto-generated UUID
   * corresponding to the primary key in the audit log table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional ID of the member user who initiated the action, if applicable.
   * Nullable.
   */
  actor_memberuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional ID of the admin user who initiated the action, if applicable.
   * Nullable.
   */
  actor_adminuser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of the audit event (e.g., 'config_change', 'session_login',
   * 'community_delete'). Represents the logical action audited for compliance
   * review and business logic tracking.
   */
  event_type: string;

  /**
   * A detailed string (or JSON) describing the event context, including any
   * relevant data or parameters changed. Intended for audit review and
   * security analysis. Maximum length is 1000 characters.
   */
  event_detail: string;

  /**
   * Original IP address from which the event occurred. May be null (e.g., for
   * system events). Used for tracing and auditing source of sensitive actions
   * or logins.
   */
  ip_address?: string | null | undefined;

  /**
   * Timestamp when the log entry was created. Automatically recorded by the
   * system when the event happened. Immutable after creation.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformAuditLog {
  /**
   * Search criteria for community platform audit logs. Allows filtering by
   * event type, actor, timestamps, IP, and event detail string with
   * pagination and sorting.
   */
  export type IRequest = {
    /** The requested page number for pagination. Optional. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Number of audit log entries to return per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Sorting field: 'created_at' or 'event_type'. */
    sort_by?: "created_at" | "event_type" | null | undefined;

    /** Sorting direction: ascending ('asc') or descending ('desc'). */
    sort_direction?: "asc" | "desc" | null | undefined;

    /** Search for event type (e.g., 'config_change', 'session_login', etc.). */
    event_type_query?: string | null | undefined;

    /** Filter by acting memberUser ID (UUID, optional). */
    actor_memberuser_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Search for specific adminUser as event actor (UUID). */
    actor_adminuser_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Start date for filtering audit logs (YYYY-MM-DD). */
    date_from?: (string & tags.Format<"date">) | null | undefined;

    /** End date for filtering audit logs (YYYY-MM-DD). */
    date_to?: (string & tags.Format<"date">) | null | undefined;

    /** Filter logs matching a given IP address substring (IPv4 or IPv6). */
    ip_address_query?: string | null | undefined;

    /** Free-text or substring search for event detail content. */
    event_detail_query?: string | null | undefined;
  };
}
