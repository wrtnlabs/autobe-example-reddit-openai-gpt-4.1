import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMember } from "../../../../../../structures/ICommunityPlatformMember";

/**
 * Complete password reset for member account using one-time token
 * (community_platform_password_resets).
 *
 * This API operation finalizes the password reset process for 'member' users by
 * accepting a valid one-time reset token and a new password, mapping to the
 * 'community_platform_password_resets' and 'community_platform_members'
 * tables.
 *
 * Upon receiving a reset token and new password (the latter to be securely
 * hashed), the system validates that the reset token exists, has not been used,
 * is not expired, and is associated with an active member. On success, the
 * member's 'password_hash' is updated accordingly, the reset record is marked
 * as used, and all prior access/refresh tokens (sessions) for the user are
 * invalidated for security.
 *
 * If the token is invalid, expired, or has already been used, an appropriate
 * error is returned. If successful, the endpoint issues a response confirming
 * that the password was changed. The member must log in again with the new
 * password; no JWT tokens are issued here. Enforces all current password
 * complexity rules as per business specifications.
 *
 * @param props.connection
 * @param props.body Password reset confirmation (reset token, new password).
 * @path /auth/member/password/reset/complete
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function completePasswordReset(
  connection: IConnection,
  props: completePasswordReset.Props,
): Promise<completePasswordReset.Response> {
  return true === connection.simulate
    ? completePasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...completePasswordReset.METADATA,
          path: completePasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace completePasswordReset {
  export type Props = {
    /** Password reset confirmation (reset token, new password). */
    body: ICommunityPlatformMember.IPasswordResetComplete;
  };
  export type Body = ICommunityPlatformMember.IPasswordResetComplete;
  export type Response =
    ICommunityPlatformMember.IPasswordResetCompleteResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/reset/complete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/reset/complete";
  export const random =
    (): ICommunityPlatformMember.IPasswordResetCompleteResponse =>
      typia.random<ICommunityPlatformMember.IPasswordResetCompleteResponse>();
  export const simulate = (
    connection: IConnection,
    props: completePasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: completePasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
