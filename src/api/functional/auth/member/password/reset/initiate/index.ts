import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMember } from "../../../../../../structures/ICommunityPlatformMember";

/**
 * Initiate password reset workflow for member accounts
 * (community_platform_members, community_platform_password_resets).
 *
 * This API operation initiates a password reset process for 'member' user
 * accounts, referencing the 'community_platform_password_resets' and
 * 'community_platform_members' tables in the Prisma schema.
 *
 * Upon receiving a member's email address, the system searches for an active
 * and undeleted user; if found, a single-use, cryptographically secure
 * 'reset_token' is generated, stored with an expiration in the password resets
 * table, and associated with the member. The system then sends an email to the
 * provided address with reset instructions, regardless of whether the address
 * is found, to prevent information leakage.
 *
 * No password is changed at this stageâ€”the endpoint only starts the reset
 * process. If a request is made for a non-existent, inactive, or deleted email,
 * a generic success response is returned, never revealing account existence.
 * The member uses the reset token and a subsequent endpoint to complete
 * password reset.
 *
 * Audit trails for this workflow are maintained via the password resets and
 * related session management logic. This operation is typically followed by the
 * 'resetPasswordComplete' operation for updating the password using the token.
 *
 * @param props.connection
 * @param props.body Member password reset request (email address).
 * @path /auth/member/password/reset/initiate
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function initiatePasswordReset(
  connection: IConnection,
  props: initiatePasswordReset.Props,
): Promise<initiatePasswordReset.Response> {
  return true === connection.simulate
    ? initiatePasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...initiatePasswordReset.METADATA,
          path: initiatePasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace initiatePasswordReset {
  export type Props = {
    /** Member password reset request (email address). */
    body: ICommunityPlatformMember.IPasswordResetInitiate;
  };
  export type Body = ICommunityPlatformMember.IPasswordResetInitiate;
  export type Response =
    ICommunityPlatformMember.IPasswordResetInitiateResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/reset/initiate",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/reset/initiate";
  export const random =
    (): ICommunityPlatformMember.IPasswordResetInitiateResponse =>
      typia.random<ICommunityPlatformMember.IPasswordResetInitiateResponse>();
  export const simulate = (
    connection: IConnection,
    props: initiatePasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: initiatePasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
