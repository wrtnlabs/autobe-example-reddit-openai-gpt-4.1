import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMemberUser } from "../../../structures/ICommunityPlatformMemberUser";

/**
 * Register new memberUser accounts using unique email and password; creates
 * user and issues tokens (community_platform_memberusers).
 *
 * This endpoint enables registration of new memberUser accounts by capturing
 * and validating email and password inputs, linking the account to a
 * credential, and recording the user's initial display name if provided.
 * Registration results in credential creation in the
 * community_platform_user_credentials table and an account entry in
 * community_platform_memberusers. The system performs uniqueness checks for
 * email addresses, hashes passwords securely, and sets the user's status (such
 * as 'active'). Audit log entries and session creation are triggered. Only
 * non-authenticated users can perform registration. Security is ensured by not
 * allowing duplicate email addresses and never exposing the password hash.
 * Registration triggers issue of JWT access and refresh tokens (see the session
 * model). Related to login (for authentication), and refresh (for token
 * renewal). Errors include duplicate email and password policy violations.
 *
 * @param props.connection
 * @param props.body Registration payload with unique email, strong password,
 *   and optional display name.
 * @setHeader token.access Authorization
 *
 * @path /auth/memberUser/join
 * @accessor api.functional.auth.memberUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Registration payload with unique email, strong password, and optional
     * display name.
     */
    body: ICommunityPlatformMemberUser.IJoin;
  };
  export type Body = ICommunityPlatformMemberUser.IJoin;
  export type Response = ICommunityPlatformMemberUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/memberUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/memberUser/join";
  export const random = (): ICommunityPlatformMemberUser.IAuthorized =>
    typia.random<ICommunityPlatformMemberUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate memberUser by email/password and issue new JWT tokens
 * (community_platform_memberusers).
 *
 * This endpoint allows existing memberUser accounts to authenticate using email
 * and password credentials. Community_platform_user_credentials is used for
 * secure password hash validation, and community_platform_memberusers is
 * checked for active status and lack of deletion. Upon successful
 * authentication, new JWT access and refresh tokens are issued, tracked in
 * community_platform_sessions. Login events are audit-logged with IP/device
 * information. Validation ensures credentials match; status='active' and
 * deleted_at=null are required. Fails with generic error on wrong credentials
 * or suspended accounts. Security measures: password hash is never exposed, and
 * brute-force detection logic should be enforced by implementation. Related
 * operations: join (registration), refresh (token renewal), and logout. Common
 * error conditions: invalid credentials, account not active, soft or hard
 * deleted users.
 *
 * @param props.connection
 * @param props.body Login payload with existing memberUser email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/memberUser/login
 * @accessor api.functional.auth.memberUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login payload with existing memberUser email and password. */
    body: ICommunityPlatformMemberUser.ILogin;
  };
  export type Body = ICommunityPlatformMemberUser.ILogin;
  export type Response = ICommunityPlatformMemberUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/memberUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/memberUser/login";
  export const random = (): ICommunityPlatformMemberUser.IAuthorized =>
    typia.random<ICommunityPlatformMemberUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for a memberUser via valid refresh token
 * (community_platform_sessions).
 *
 * This refresh endpoint enables active memberUser accounts to renew their JWT
 * access and refresh tokens using a valid, non-revoked, and unexpired refresh
 * token previously issued at login or registration. Session management and
 * validation occur in community_platform_sessions. If validation passes, the
 * user is granted a new token pair and updated session expiry. Audit logs
 * record refresh event including token and device info. If the token is
 * invalid, expired, or the account is suspended/deleted, the request fails.
 * Security is paramount: only valid active sessions may be refreshed. Related
 * endpoints: join (registration), login (credential authentication), and logout
 * (token/session invalidation). Errors returned for token expiry, invalid
 * session, or account status issues.
 *
 * @param props.connection
 * @param props.body Refresh token payload as issued in prior session.
 * @setHeader token.access Authorization
 *
 * @path /auth/memberUser/refresh
 * @accessor api.functional.auth.memberUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload as issued in prior session. */
    body: ICommunityPlatformMemberUser.IRefresh;
  };
  export type Body = ICommunityPlatformMemberUser.IRefresh;
  export type Response = ICommunityPlatformMemberUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/memberUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/memberUser/refresh";
  export const random = (): ICommunityPlatformMemberUser.IAuthorized =>
    typia.random<ICommunityPlatformMemberUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
