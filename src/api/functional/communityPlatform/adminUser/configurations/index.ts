import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformConfiguration } from "../../../../structures/ICommunityPlatformConfiguration";
import { IPageICommunityPlatformConfiguration } from "../../../../structures/IPageICommunityPlatformConfiguration";

/**
 * Create a new platform configuration parameter (admin only).
 *
 * Inserts a row into the community_platform_configurations table with the
 * required 'key' (must be unique; e.g. 'max_post_length'), 'value' (arbitrary
 * string/JSON/number as string), optional description (max 200 chars), and sets
 * all audit timestamps. Intended for adminUser access only.
 *
 * Validation includes unique constraint for 'key', description length, and
 * validation of any business-allowed character set or semantic standards for
 * 'key'. Used for UI-driven feature flag and config managers. Attempting to
 * create with duplicate keys or violating length rules is rejected as
 * validation error.
 *
 * @param props.connection
 * @param props.body Required fields for config creation: key, value,
 *   description(optional).
 * @path /communityPlatform/adminUser/configurations
 * @accessor api.functional.communityPlatform.adminUser.configurations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required fields for config creation: key, value,
     * description(optional).
     */
    body: ICommunityPlatformConfiguration.ICreate;
  };
  export type Body = ICommunityPlatformConfiguration.ICreate;
  export type Response = ICommunityPlatformConfiguration;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/adminUser/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/configurations";
  export const random = (): ICommunityPlatformConfiguration =>
    typia.random<ICommunityPlatformConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all configuration parameters (filtered, paginated; admin only).
 *
 * Retrieves a sequence of configuration parameter records, supporting filter by
 * key, description, value (with trigram or substring search), sorting and
 * paging as per admin system standards. Provides audit properties, parameter
 * value and description for each config variable leveraged by server and admin
 * logic.
 *
 * Typically used by adminUser to view and review global config parameters for
 * platform health and feature toggles. Results are not public due to possible
 * disclosure of sensitive system tuning information.
 *
 * @param props.connection
 * @param props.body Search/filter and paging criteria for configs.
 * @path /communityPlatform/adminUser/configurations
 * @accessor api.functional.communityPlatform.adminUser.configurations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search/filter and paging criteria for configs. */
    body: ICommunityPlatformConfiguration.IRequest;
  };
  export type Body = ICommunityPlatformConfiguration.IRequest;
  export type Response = IPageICommunityPlatformConfiguration.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/configurations";
  export const random = (): IPageICommunityPlatformConfiguration.ISummary =>
    typia.random<IPageICommunityPlatformConfiguration.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get all details for a configuration parameter by configurationId (UUID; admin
 * only).
 *
 * Gets the configuration parameter row with a specific UUID, returning all
 * fields defined (id, key, value, description, created_at, updated_at). These
 * records determine system environment and feature toggles, so read access is
 * adminUser only.
 *
 * Suitable for filling in edit panels. Content may include private or audit
 * relevant data so is never to be exposed in public UI or undocumented APIs.
 * Errors include not found for unknown UUIDs or deleted records.
 *
 * @param props.connection
 * @param props.configurationId Unique UUID for configuration parameter row;
 *   corresponds to community_platform_configurations.id.
 * @path /communityPlatform/adminUser/configurations/:configurationId
 * @accessor api.functional.communityPlatform.adminUser.configurations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique UUID for configuration parameter row; corresponds to
     * community_platform_configurations.id.
     */
    configurationId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformConfiguration;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): ICommunityPlatformConfiguration =>
    typia.random<ICommunityPlatformConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a configuration entry (community_platform_configurations).
 *
 * This operation updates a single configuration parameter in the
 * community_platform_configurations schema table. Only authenticated admin
 * users can perform this action, ensuring enforcement of system configuration
 * constraints. Modification includes updating the value or description of an
 * existing configuration entry. The change is immediately propagated to system
 * components relying on this configuration key.
 *
 * Access to this operation is restricted to admin users for platform security.
 * All configuration changes are tracked via audit logs and updated_at
 * timestamps for compliance.
 *
 * Attempting to update a non-existent configuration key, or without sufficient
 * privileges, results in a not found or forbidden error. Related endpoints
 * include GET for configuration retrieval and PATCH for searching configuration
 * entries.
 *
 * @param props.connection
 * @param props.configurationId Unique identifier (UUID) of the configuration
 *   entry to update.
 * @param props.body New configuration value and optional description.
 * @path /communityPlatform/adminUser/configurations/:configurationId
 * @accessor api.functional.communityPlatform.adminUser.configurations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the configuration entry to update. */
    configurationId: string & tags.Format<"uuid">;

    /** New configuration value and optional description. */
    body: ICommunityPlatformConfiguration.IUpdate;
  };
  export type Body = ICommunityPlatformConfiguration.IUpdate;
  export type Response = ICommunityPlatformConfiguration;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/adminUser/configurations/:configurationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): ICommunityPlatformConfiguration =>
    typia.random<ICommunityPlatformConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a configuration entry (community_platform_configurations).
 *
 * This operation permanently deletes a configuration entry from the
 * community_platform_configurations table. Only users with the adminUser role
 * have access, since configuration records control key platform behavior. When
 * deleted, the entry is removed from all future reads and the action is logged
 * for compliance monitoring.
 *
 * Deletion is performed via a hard delete. There is no recovery mechanism, so
 * care must be taken. Attempts to delete a non-existent or protected key return
 * an error.
 *
 * Related operations include PUT for updating, PATCH for searching, and GET for
 * retrieving configuration details.
 *
 * @param props.connection
 * @param props.configurationId Unique identifier (UUID) of the configuration
 *   entry to delete.
 * @path /communityPlatform/adminUser/configurations/:configurationId
 * @accessor api.functional.communityPlatform.adminUser.configurations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the configuration entry to delete. */
    configurationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
