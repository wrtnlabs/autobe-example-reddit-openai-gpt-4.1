import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostModerationLog } from "../../../../../structures/ICommunityPlatformPostModerationLog";
import { IPageICommunityPlatformPostModerationLog } from "../../../../../structures/IPageICommunityPlatformPostModerationLog";

/**
 * Retrieve paginated moderation logs for a specific post, searchable and
 * filterable.
 *
 * Retrieves a filtered, paginated list of moderation logs for a post, detailing
 * every moderation action (edit, delete, restore, etc.) taken by admin users on
 * the specific post.
 *
 * The operation supports advanced filtering (mod type, date range),
 * comprehensive sorting by date or action type, and full pagination for review
 * purposes. Only admin users are permitted, as these logs may contain sensitive
 * information for compliance and accountability. The operation integrates full
 * detail fields (action type, reason, timestamp, performing admin, etc.) as
 * described in the Prisma schema, allowing audit trails and monitoring.
 *
 * Proper error handling is provided for permission errors or malformed filters.
 * Usage is restricted to platform admins due to the nature of the data.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post whose moderation
 *   logs are queried (UUID).
 * @param props.body Filter, sort, and pagination parameters for fetching post
 *   moderation logs.
 * @path /communityPlatform/adminUser/posts/:postId/moderationLogs
 * @accessor api.functional.communityPlatform.adminUser.posts.moderationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target post whose moderation logs are
     * queried (UUID).
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Filter, sort, and pagination parameters for fetching post moderation
     * logs.
     */
    body: ICommunityPlatformPostModerationLog.IRequest;
  };
  export type Body = ICommunityPlatformPostModerationLog.IRequest;
  export type Response = IPageICommunityPlatformPostModerationLog;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/posts/:postId/moderationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/posts/${encodeURIComponent(props.postId ?? "null")}/moderationLogs`;
  export const random = (): IPageICommunityPlatformPostModerationLog =>
    typia.random<IPageICommunityPlatformPostModerationLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific post moderation log entry by ID.
 *
 * Fetches detailed information about a single moderation log entry for a
 * specific post. The operation reveals action type, reason, timestamp,
 * performing admin, and associated post, as described in the Prisma schema.
 *
 * Authorization is restricted to admin users due to the sensitivity of
 * moderation logs. The operation handles errors when the log entry or post does
 * not exist, or if unauthorized access is attempted.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post the moderation log belongs
 *   to (UUID).
 * @param props.moderationLogId Unique identifier of the moderation log entry to
 *   retrieve (UUID).
 * @path /communityPlatform/adminUser/posts/:postId/moderationLogs/:moderationLogId
 * @accessor api.functional.communityPlatform.adminUser.posts.moderationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the post the moderation log belongs to (UUID). */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderation log entry to retrieve (UUID). */
    moderationLogId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPostModerationLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/posts/:postId/moderationLogs/:moderationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/posts/${encodeURIComponent(props.postId ?? "null")}/moderationLogs/${encodeURIComponent(props.moderationLogId ?? "null")}`;
  export const random = (): ICommunityPlatformPostModerationLog =>
    typia.random<ICommunityPlatformPostModerationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("moderationLogId")(() =>
        typia.assert(props.moderationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
