import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostVote } from "../../../../../structures/ICommunityPlatformPostVote";

/**
 * Create or update a user's vote for a specific post (upvote, downvote, or
 * removal).
 *
 * Allows an authenticated member or admin user to submit a vote for a post,
 * capturing states: upvote, downvote, or removal (reset to none).
 *
 * The operation first verifies that the target post exists and that the user is
 * not the author (self-voting is prohibited by business rules and enforced by
 * application logic). If the user already has a vote on this post, the
 * submission either toggles or updates the vote state accordingly, maintaining
 * a one-vote-per-user-per-post policy.
 *
 * Voting events are tracked for analytics and score calculation. Immediate
 * feedback is provided to the frontend for optimistic UI; back-end persistence
 * confirms final state.
 *
 * Authentication is required. Authorization allows both memberUser and
 * adminUser types. Attempting to vote as a guest triggers a login prompt.
 * Errors are returned if self-vote, post not found, or if the user has no
 * permission.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post to be voted on
 *   (UUID).
 * @param props.body Voting state information (e.g., upvote, downvote, or
 *   removal) for the post.
 * @path /communityPlatform/adminUser/posts/:postId/votes
 * @accessor api.functional.communityPlatform.adminUser.posts.votes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target post to be voted on (UUID). */
    postId: string & tags.Format<"uuid">;

    /**
     * Voting state information (e.g., upvote, downvote, or removal) for the
     * post.
     */
    body: ICommunityPlatformPostVote.ICreate;
  };
  export type Body = ICommunityPlatformPostVote.ICreate;
  export type Response = ICommunityPlatformPostVote;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/adminUser/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): ICommunityPlatformPostVote =>
    typia.random<ICommunityPlatformPostVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the current user's existing vote on a specific post (upvote, downvote,
 * or removal).
 *
 * Allows an authenticated user to change or remove their existing vote for a
 * given post. The operation first verifies that the vote exists, belongs to the
 * current user, and that the user is not attempting to vote on their own post
 * (self-voting is prohibited).
 *
 * Vote state is updated to either upvote, downvote, or explicitly removed
 * (none). Ownership and authorization checks are enforced. Backend confirms
 * changes for accurate score calculation and frontend updates. Invalid voteId,
 * self-vote attempts, or unauthorized access are properly handled with clear
 * error messages.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post being voted on (UUID).
 * @param props.voteId Unique identifier of the user's vote record for the post
 *   (UUID).
 * @param props.body Updated voting state for the post vote (upvote, downvote,
 *   or none).
 * @path /communityPlatform/adminUser/posts/:postId/votes/:voteId
 * @accessor api.functional.communityPlatform.adminUser.posts.votes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the post being voted on (UUID). */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the user's vote record for the post (UUID). */
    voteId: string & tags.Format<"uuid">;

    /** Updated voting state for the post vote (upvote, downvote, or none). */
    body: ICommunityPlatformPostVote.IUpdate;
  };
  export type Body = ICommunityPlatformPostVote.IUpdate;
  export type Response = ICommunityPlatformPostVote;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/adminUser/posts/:postId/votes/:voteId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/posts/${encodeURIComponent(props.postId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): ICommunityPlatformPostVote =>
    typia.random<ICommunityPlatformPostVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("voteId")(() => typia.assert(props.voteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete the current user's own vote on a specific post.
 *
 * Allows an authenticated member or admin user to remove their own vote from a
 * post. This sets the user's vote state to none and updates the post score
 * accordingly.
 *
 * Operation verifies voteId belongs to the current user for the target post and
 * does not allow users to remove votes on their own posts. If the vote does not
 * exist, or does not belong to the current user, an error is returned. The
 * system confirms successful removal, ensuring only the owner may perform this
 * action.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post from which the vote is
 *   removed (UUID).
 * @param props.voteId Unique identifier of the user's vote record to delete
 *   (UUID).
 * @path /communityPlatform/adminUser/posts/:postId/votes/:voteId
 * @accessor api.functional.communityPlatform.adminUser.posts.votes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the post from which the vote is removed (UUID). */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the user's vote record to delete (UUID). */
    voteId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/posts/:postId/votes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/posts/${encodeURIComponent(props.postId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
