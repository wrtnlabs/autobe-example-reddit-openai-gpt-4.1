import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformDataExportLog } from "../../../../structures/ICommunityPlatformDataExportLog";
import { IPageICommunityPlatformDataExportLog } from "../../../../structures/IPageICommunityPlatformDataExportLog";

/**
 * Search, filter, and paginate data export logs
 * (community_platform_data_export_logs) for compliance and audit purposes.
 *
 * This API endpoint enables adminUsers to perform advanced search, filtering,
 * and pagination across all data export logs in the system. Each data export
 * log records a member or admin's request for exportable data, tracking the
 * export type (user data, community data, posts, etc.), format, requesting
 * user, status, and timestamps as defined in the
 * community_platform_data_export_logs table.
 *
 * Security is prioritized: only adminUser roles may invoke this operation,
 * protecting sensitive compliance and audit information. The endpoint supports
 * optional search parameters for filtering by user, admin, export type, status,
 * and date range, as defined in the request body DTO. Complex queries are
 * supported for in-depth compliance reviews, operational oversight, and legal
 * investigation flows.
 *
 * The list is paginated and sorted according to supplied criteria in the
 * request. Results exclude records that have been soft-deleted per compliance
 * policy. Related operations include retrieval of individual export log records
 * or search log analytics for broader platform oversight.
 *
 * @param props.connection
 * @param props.body Advanced search and pagination criteria for data export log
 *   listing, including user/admin, export type, status, and time range
 *   filters.
 * @path /communityPlatform/adminUser/dataExportLogs
 * @accessor api.functional.communityPlatform.adminUser.dataExportLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search and pagination criteria for data export log listing,
     * including user/admin, export type, status, and time range filters.
     */
    body: ICommunityPlatformDataExportLog.IRequest;
  };
  export type Body = ICommunityPlatformDataExportLog.IRequest;
  export type Response = IPageICommunityPlatformDataExportLog;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/dataExportLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/dataExportLogs";
  export const random = (): IPageICommunityPlatformDataExportLog =>
    typia.random<IPageICommunityPlatformDataExportLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific data export log entry
 * (community_platform_data_export_logs).
 *
 * This API endpoint enables an authorized adminUser to fetch all recorded
 * details for a single data export log, using the dataExportLogId path
 * parameter. As defined in the community_platform_data_export_logs table, each
 * export log includes information about the type of export (user data,
 * community data, etc.), export format, user/admin requestor, status,
 * timestamps, and associated metadata crucial for regulatory compliance and
 * security audit trails.
 *
 * Access is strictly limited to adminUser roles because data export activities
 * may include sensitive user/member/admin data. The endpoint checks for the
 * existence and non-soft-deleted status of the referenced export log record. If
 * it is missing or soft-deleted, a not found error is returned.
 *
 * This operation is generally used for compliance verification, security
 * investigations, or legal reporting, and may be paired with list/search
 * operations for complete audit coverage. Returned data includes all fields of
 * the export log, with certain fields (e.g., status, request IP) redacted if
 * required by business policy.
 *
 * @param props.connection
 * @param props.dataExportLogId Unique identifier of the data export log to
 *   retrieve.
 * @path /communityPlatform/adminUser/dataExportLogs/:dataExportLogId
 * @accessor api.functional.communityPlatform.adminUser.dataExportLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the data export log to retrieve. */
    dataExportLogId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformDataExportLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/dataExportLogs/:dataExportLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/dataExportLogs/${encodeURIComponent(props.dataExportLogId ?? "null")}`;
  export const random = (): ICommunityPlatformDataExportLog =>
    typia.random<ICommunityPlatformDataExportLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataExportLogId")(() =>
        typia.assert(props.dataExportLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
