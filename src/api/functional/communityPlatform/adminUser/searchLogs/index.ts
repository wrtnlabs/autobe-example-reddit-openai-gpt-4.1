import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSearchLog } from "../../../../structures/ICommunityPlatformSearchLog";
import { IPageICommunityPlatformSearchLog } from "../../../../structures/IPageICommunityPlatformSearchLog";

/**
 * Paginated search and analytics logs (community_platform_search_logs).
 *
 * This API endpoint lists search analytics logs stored in the
 * community_platform_search_logs table. It offers advanced filtering by
 * search_query (minimum 2 characters), performed user (member/admin), date
 * range, scope, and IP address. Designed to support platform analytics, audit
 * logging, and compliance requirements such as GDPR data export.
 *
 * The endpoint is available only to admin users, ensuring privacy over
 * individual search histories. Returns results in pages with support for
 * sorting (by created_at, scope). Filtering parameters allow fine-grained
 * access to trends or event-level audit. Error responses are provided for
 * malformed queries or permission violations.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination options for search logs
 *   listing
 * @path /communityPlatform/adminUser/searchLogs
 * @accessor api.functional.communityPlatform.adminUser.searchLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, search, and pagination options for search logs listing */
    body: ICommunityPlatformSearchLog.IRequest;
  };
  export type Body = ICommunityPlatformSearchLog.IRequest;
  export type Response = IPageICommunityPlatformSearchLog;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/searchLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/searchLogs";
  export const random = (): IPageICommunityPlatformSearchLog =>
    typia.random<IPageICommunityPlatformSearchLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific search log entry
 * (community_platform_search_logs).
 *
 * This API endpoint allows an authorized adminUser to retrieve detailed
 * information about a particular search event logged by the system. The
 * community_platform_search_logs table records each search performed by a
 * memberUser or adminUser, including relevant metadata (query string, scope, IP
 * address, timestamp, and user IDs).
 *
 * Security is enforced such that only adminUser roles can access this endpoint
 * due to the sensitive nature of audit and analytics logs. The endpoint's main
 * purpose is for system monitoring, compliance reviews (privacy requests), and
 * detailed investigation of user or admin activity. The operation includes
 * contextual fields and ensures that only non-soft-deleted records are
 * retrievable.
 *
 * The searchLogId parameter must match an existing search log's primary key
 * (UUID format). If the log does not exist or has been soft-deleted, the API
 * returns a not found error. The result includes all available logged fields
 * for the entry as per the schema, but may omit certain sensitive information
 * depending on the adminUser's access level and business logic. This operation
 * is typically used in conjunction with list/search endpoints for broader
 * analytics review.
 *
 * Related endpoints may include bulk search log listing for compliance, or
 * access to data export logs for tracking broader data workflows.
 *
 * @param props.connection
 * @param props.searchLogId Unique identifier of the search log entry to
 *   retrieve.
 * @path /communityPlatform/adminUser/searchLogs/:searchLogId
 * @accessor api.functional.communityPlatform.adminUser.searchLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the search log entry to retrieve. */
    searchLogId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSearchLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/searchLogs/:searchLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/searchLogs/${encodeURIComponent(props.searchLogId ?? "null")}`;
  export const random = (): ICommunityPlatformSearchLog =>
    typia.random<ICommunityPlatformSearchLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("searchLogId")(() => typia.assert(props.searchLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
