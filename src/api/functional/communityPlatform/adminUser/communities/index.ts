import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";
export * as rules from "./rules/index";

/**
 * Create a new sub-community (community_platform_communities).
 *
 * This endpoint allows authenticated member or admin users to create a new
 * sub-community, providing a name (validated for uniqueness and format),
 * category reference, optional description, logo/banner URIs, and rules as
 * documented by business logic and the community_platform_communities schema.
 *
 * Ownership is set to the authenticated user making the request and is
 * immutable for the life of the community. The operation enforces naming and
 * categorization business rules, initializing member count and joined status
 * appropriately. All required and optional attributes are validated per schema
 * and platform business rules. Conflicts or violations return error messages as
 * described in the requirements (e.g., name in use or invalid format).
 *
 * Successfully created communities are immediately available for exploration,
 * joining, and post composition actions.
 *
 * @param props.connection
 * @param props.body Community creation input, including required and optional
 *   attributes for a new sub-community.
 * @path /communityPlatform/adminUser/communities
 * @accessor api.functional.communityPlatform.adminUser.communities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Community creation input, including required and optional attributes
     * for a new sub-community.
     */
    body: ICommunityPlatformCommunity.ICreate;
  };
  export type Body = ICommunityPlatformCommunity.ICreate;
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/adminUser/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/communities";
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a community and all its related content.
 *
 * This operation deletes a community from the system, physically or logically,
 * depending on business rules and soft delete implementation of the
 * community_platform_communities table. It cascades the deletion to all posts,
 * memberships, recent community visits, and rules related to the community,
 * implementing the requirement for deep cleaning on community deletion.
 *
 * Only an adminUser or the original owner may delete a community, with admins
 * holding the ultimate authority. When the operation is successful, all soft
 * deletable entities set their deleted_at fields; otherwise, the records are
 * permanently removed from child tables if not supporting soft deletion. This
 * ensures compliance with full data removal requirements in the business logic
 * and prevents orphaned records.
 *
 * Attempts to delete by unauthorized users are rejected with explicit
 * permission errors. On completion, the system updates feeds and navigation
 * across all affected users. All deletion actions are logged in the audit trail
 * for compliance. Related endpoints include post and membership deletions and
 * audit logs for deletion activity.
 *
 * @param props.connection
 * @param props.communityId Unique identifier for the community to delete.
 * @path /communityPlatform/adminUser/communities/:communityId
 * @accessor api.functional.communityPlatform.adminUser.communities.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the community to delete. */
    communityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
