import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformUserCredential } from "../../../../structures/ICommunityPlatformUserCredential";
import { IPageICommunityPlatformUserCredential } from "../../../../structures/IPageICommunityPlatformUserCredential";

/**
 * Search and paginate user credentials (community_platform_user_credentials).
 *
 * This operation provides platform administrators with a powerful tool to list,
 * search, and audit user credentials across all authentication-enabled users.
 * Focusing on the community_platform_user_credentials table, it supports
 * advanced queries such as email lookups, status filtering, and sorted
 * pagination.
 *
 * Essential for user management, password reset validation, and compliance
 * checks, this endpoint is accessible only to admin users. Business logic and
 * database documentation enforce secure, privacy-compliant exposure of email
 * and credential metadata; hashed passwords remain inaccessible to
 * non-privileged logic.
 *
 * The request body enables complex search combinations, including partial
 * matches, temporal queries, and specific credential attribute filters.
 * Pagination ensures responsive performance even at high user volumes.
 * Unauthorized requests are blocked as per role requirements.
 *
 * @param props.connection
 * @param props.body Filter, search, and paging options for retrieving user
 *   credentials.
 * @path /communityPlatform/adminUser/userCredentials
 * @accessor api.functional.communityPlatform.adminUser.userCredentials.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, search, and paging options for retrieving user credentials. */
    body: ICommunityPlatformUserCredential.IRequest;
  };
  export type Body = ICommunityPlatformUserCredential.IRequest;
  export type Response = IPageICommunityPlatformUserCredential.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/userCredentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/userCredentials";
  export const random = (): IPageICommunityPlatformUserCredential.ISummary =>
    typia.random<IPageICommunityPlatformUserCredential.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get user credential details by ID (community_platform_user_credentials).
 *
 * This endpoint provides detailed authentication credential records for a user,
 * found by unique credential ID. It is critical for admin audit flows, password
 * reset validation, and verifying business rules on account status.
 *
 * Schema fields retrieved correspond to the community_platform_user_credentials
 * model, including email, status, and timestamps. Password hashes are never
 * returned, ensuring privacy compliance.
 *
 * Access is available exclusively to admin users. Requests for non-existent or
 * unauthorized credentials return error status codes matching platform security
 * standards.
 *
 * @param props.connection
 * @param props.userCredentialId Unique identifier of the user credential
 *   record.
 * @path /communityPlatform/adminUser/userCredentials/:userCredentialId
 * @accessor api.functional.communityPlatform.adminUser.userCredentials.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user credential record. */
    userCredentialId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformUserCredential;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/userCredentials/:userCredentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/userCredentials/${encodeURIComponent(props.userCredentialId ?? "null")}`;
  export const random = (): ICommunityPlatformUserCredential =>
    typia.random<ICommunityPlatformUserCredential>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userCredentialId")(() =>
        typia.assert(props.userCredentialId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
