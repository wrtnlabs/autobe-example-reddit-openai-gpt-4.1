import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformGuestUser } from "../../../../structures/ICommunityPlatformGuestUser";
import { IPageICommunityPlatformGuestUser } from "../../../../structures/IPageICommunityPlatformGuestUser";

/**
 * Search and paginate guest user session records
 * (community_platform_guestusers).
 *
 * Returns a paginated set of guest user sessions filtered and sorted by
 * creation or update timestamp, and optionally searched by session signature.
 * The operation references the community_platform_guestusers table in the
 * Prisma schema. Results are primarily intended for platform analytics, usage
 * tracing, or audit.
 *
 * This query supports pagination and field-based filtering, allowing analysis
 * of guest visits, activity patterns, and conversions. As guest users are
 * unauthenticated, no personal identifying data is included; only analytics or
 * tracking metadata (session signature, timestamps) is returned. Security:
 * strictly limited to admin users to prevent abuse.
 *
 * Feature is typically used by platform analytics dashboards, system health
 * reviews, or compliance audits. Errors and validation (such as invalid
 * pagination parameters) return descriptive error messages. No search or
 * enumeration is enabled for the general user base due to privacy risk.
 *
 * @param props.connection
 * @param props.body Pagination, sorting, or search criteria for guest user
 *   analytics logs.
 * @path /communityPlatform/adminUser/guestUsers
 * @accessor api.functional.communityPlatform.adminUser.guestUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Pagination, sorting, or search criteria for guest user analytics
     * logs.
     */
    body: ICommunityPlatformGuestUser.IRequest;
  };
  export type Body = ICommunityPlatformGuestUser.IRequest;
  export type Response = IPageICommunityPlatformGuestUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/guestUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/guestUsers";
  export const random = (): IPageICommunityPlatformGuestUser.ISummary =>
    typia.random<IPageICommunityPlatformGuestUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve guest user session detail by ID (community_platform_guestusers).
 *
 * Fetches and returns comprehensive metadata on a specific guest user session,
 * including creation and updated timestamps, unique session signature, and
 * deletion status. The path parameter guestUserId is a uuid referencing the
 * session of interest. The operation references the
 * community_platform_guestusers Prisma model ensuring all business, privacy,
 * and compliance constraints are rigorously enforced.
 *
 * Only admin users are permitted to access this detailed session data, in
 * accordance with business privacy requirements and audit policies. A 404 error
 * is returned if the guest user session is not found. Typical uses include
 * platform analytics, security trace review, or abuse investigations.
 *
 * No guest user credential or personally identifying information is ever
 * returned, only session and analytic metadata as allowed by platform rules.
 *
 * @param props.connection
 * @param props.guestUserId UUID of the guest user session to retrieve detail
 *   for
 * @path /communityPlatform/adminUser/guestUsers/:guestUserId
 * @accessor api.functional.communityPlatform.adminUser.guestUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the guest user session to retrieve detail for */
    guestUserId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformGuestUser;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/guestUsers/:guestUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/guestUsers/${encodeURIComponent(props.guestUserId ?? "null")}`;
  export const random = (): ICommunityPlatformGuestUser =>
    typia.random<ICommunityPlatformGuestUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestUserId")(() => typia.assert(props.guestUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
