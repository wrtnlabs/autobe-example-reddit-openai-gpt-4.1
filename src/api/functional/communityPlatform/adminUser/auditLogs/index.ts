import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAuditLog } from "../../../../structures/ICommunityPlatformAuditLog";
import { IPageICommunityPlatformAuditLog } from "../../../../structures/IPageICommunityPlatformAuditLog";

/**
 * Search and paginate audit logs (community_platform_audit_logs).
 *
 * This operation allows admin users to search and paginate over platform audit
 * logs in community_platform_audit_logs. Search filtering can be performed by
 * event type (e.g. config change, session login), actor (member or admin), IP
 * address, and creation time range.
 *
 * Audit logs contain sensitive information and are only accessible to admin
 * users for compliance and investigation purposes. Results are paginated, with
 * support for ordering by time and filtering by details.
 *
 * Business logic enforces that unauthenticated or unauthorized users cannot
 * access this operation. Returned data includes all columns except for internal
 * security details. Related operations: GET for details of a specific audit log
 * entry.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for searching audit logs.
 * @path /communityPlatform/adminUser/auditLogs
 * @accessor api.functional.communityPlatform.adminUser.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination parameters for searching audit logs. */
    body: ICommunityPlatformAuditLog.IRequest;
  };
  export type Body = ICommunityPlatformAuditLog.IRequest;
  export type Response = IPageICommunityPlatformAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/auditLogs";
  export const random = (): IPageICommunityPlatformAuditLog =>
    typia.random<IPageICommunityPlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of an audit log entry (community_platform_audit_logs).
 *
 * This operation returns comprehensive information for a specific audit log
 * entry in the community_platform_audit_logs schema. The log entry is
 * identified by its unique UUID. The details provided include event type, actor
 * (member/admin), event context, and timestamp.
 *
 * Audit logs are a restricted resource containing sensitive operations. Only
 * adminUser role is permitted access. Attempting to access a log without
 * privileges, or for a key that does not exist, results in an error. Related
 * operation: PATCH for searching all logs.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier (UUID) of the audit log entry to
 *   retrieve.
 * @path /communityPlatform/adminUser/auditLogs/:auditLogId
 * @accessor api.functional.communityPlatform.adminUser.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the audit log entry to retrieve. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): ICommunityPlatformAuditLog =>
    typia.random<ICommunityPlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
