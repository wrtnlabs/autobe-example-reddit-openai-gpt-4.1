import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommentVote } from "../../../../../structures/ICommunityPlatformCommentVote";
import { IPageICommunityPlatformCommentVote } from "../../../../../structures/IPageICommunityPlatformCommentVote";

/**
 * Create a new vote (upvote/downvote) on a comment
 * (community_platform_comment_votes).
 *
 * This endpoint allows an authenticated user to cast an upvote or downvote on a
 * specific comment. Only valid vote types are accepted ('upvote', 'downvote',
 * or clearing vote with 'none'). The system ensures one record per user per
 * comment, creating or updating the user's vote as appropriate.
 *
 * Business logic enforces that users cannot vote on their own comments;
 * attempts to do so result in a permission error. On casting or updating a
 * vote, the vote_type, voter identity (memberUser or adminUser), timestamps,
 * and target comment are stored in the community_platform_comment_votes table.
 *
 * Security is enforced so only the voting user (memberUser or adminUser) may
 * create their own votes. This operation is essential for the platform's
 * reputation and scoring system for comment engagement. Vote score calculation
 * is handled elsewhere.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to vote on
 * @param props.body Vote object to be created with commentId, voter, and
 *   vote_type (upvote, downvote, none)
 * @path /communityPlatform/adminUser/comments/:commentId/votes
 * @accessor api.functional.communityPlatform.adminUser.comments.votes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the comment to vote on */
    commentId: string & tags.Format<"uuid">;

    /**
     * Vote object to be created with commentId, voter, and vote_type
     * (upvote, downvote, none)
     */
    body: ICommunityPlatformCommentVote.ICreate;
  };
  export type Body = ICommunityPlatformCommentVote.ICreate;
  export type Response = ICommunityPlatformCommentVote;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/adminUser/comments/:commentId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/comments/${encodeURIComponent(props.commentId ?? "null")}/votes`;
  export const random = (): ICommunityPlatformCommentVote =>
    typia.random<ICommunityPlatformCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginated list of votes for a comment (community_platform_comment_votes).
 *
 * This endpoint returns a filtered, sorted, and paginated list of votes on a
 * particular comment, identified by its commentId parameter. The votes
 * originate from the community_platform_comment_votes table, with each vote
 * associated with a comment, a user (member or admin), and a vote_type field
 * ('upvote', 'downvote', 'none').
 *
 * Advanced request filtering allows for slicing by vote_type, voter identity,
 * or time range. The results are paginated and sortable by the created_at
 * timestamp or vote_type for audits or engagement metrics.
 *
 * Security policies may limit access to full voter identity to admin users,
 * while general engagement metrics are available to all. Pagination ensures
 * performance and scalability for comments with high engagement. Business logic
 * ensures only existing votes for the specified commentId are returned. Error
 * handling covers invalid IDs, query parameters, and unauthorized requests.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment whose votes should be
 *   listed
 * @param props.body Search and filtering options for comment votes (pagination,
 *   sorting, voter, vote_type)
 * @path /communityPlatform/adminUser/comments/:commentId/votes
 * @accessor api.functional.communityPlatform.adminUser.comments.votes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the comment whose votes should be listed */
    commentId: string & tags.Format<"uuid">;

    /**
     * Search and filtering options for comment votes (pagination, sorting,
     * voter, vote_type)
     */
    body: ICommunityPlatformCommentVote.IRequest;
  };
  export type Body = ICommunityPlatformCommentVote.IRequest;
  export type Response = IPageICommunityPlatformCommentVote;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/comments/:commentId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/comments/${encodeURIComponent(props.commentId ?? "null")}/votes`;
  export const random = (): IPageICommunityPlatformCommentVote =>
    typia.random<IPageICommunityPlatformCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific vote on a comment (community_platform_comment_votes).
 *
 * This endpoint returns the details of a specific comment vote as identified by
 * voteId and associated with the given commentId. The underlying data source is
 * the community_platform_comment_votes table, which includes one entry per user
 * per comment capturing vote_type (upvote, downvote, none), voter identity, and
 * audit metadata.
 *
 * Primarily intended for administrative views and audit dashboards, this
 * operation exposes detailed vote information, including which user (memberUser
 * or adminUser) cast the vote. Security rules ensure that only users with
 * appropriate admin privileges may view full voter details.
 *
 * Proper validation occurs to ensure the voteId matches a vote on the specified
 * commentId before retrieval. If no match exists, the operation returns an
 * error. Data can be used for analytic and moderation purposes.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the parent comment
 * @param props.voteId Unique identifier of the comment vote
 * @path /communityPlatform/adminUser/comments/:commentId/votes/:voteId
 * @accessor api.functional.communityPlatform.adminUser.comments.votes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment vote */
    voteId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommentVote;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/comments/:commentId/votes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/comments/${encodeURIComponent(props.commentId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): ICommunityPlatformCommentVote =>
    typia.random<ICommunityPlatformCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the vote state for a comment vote (community_platform_comment_votes).
 *
 * This endpoint allows the original voter (memberUser or adminUser) or an admin
 * to change the state of a vote on a comment, such as toggling upvote/downvote
 * or clearing to none. The operation validates that the voteId is associated
 * with the specified commentId, and that the user has permission (voter = self
 * or admin privilege).
 *
 * Validation ensures that users cannot vote on their own comments. State
 * transitions follow platform voting business logic: toggling between upvote,
 * downvote, and none. Updated_at is changed to reflect the most recent action,
 * with full support for audit/compliance. Errors are returned for invalid vote
 * states, permission failures, or mismatched IDs.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.voteId Unique identifier of the comment vote to update
 * @param props.body Fields to update in the comment vote (vote_type: upvote,
 *   downvote, none)
 * @path /communityPlatform/adminUser/comments/:commentId/votes/:voteId
 * @accessor api.functional.communityPlatform.adminUser.comments.votes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment vote to update */
    voteId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the comment vote (vote_type: upvote, downvote,
     * none)
     */
    body: ICommunityPlatformCommentVote.IUpdate;
  };
  export type Body = ICommunityPlatformCommentVote.IUpdate;
  export type Response = ICommunityPlatformCommentVote;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/adminUser/comments/:commentId/votes/:voteId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/comments/${encodeURIComponent(props.commentId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): ICommunityPlatformCommentVote =>
    typia.random<ICommunityPlatformCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("voteId")(() => typia.assert(props.voteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment vote (community_platform_comment_votes).
 *
 * This endpoint allows the original voter (memberUser or adminUser) or a
 * platform admin to remove a vote they have cast on a comment. By deleting the
 * vote record (hard delete), the platform forgets the user's vote state for the
 * targeted comment. The database table is community_platform_comment_votes.
 *
 * The operation validates that the provided voteId is linked to the specified
 * commentId, and ensures that only the original voter or admin has permission
 * to delete. This operation is commonly used to allow users to retract their
 * upvote/downvote, and also serves as a moderation tool for platform
 * administrators. No content is returned in the response upon successful
 * deletion.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the parent comment
 * @param props.voteId Unique identifier of the comment vote to delete
 * @path /communityPlatform/adminUser/comments/:commentId/votes/:voteId
 * @accessor api.functional.communityPlatform.adminUser.comments.votes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the parent comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment vote to delete */
    voteId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/comments/:commentId/votes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/comments/${encodeURIComponent(props.commentId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
