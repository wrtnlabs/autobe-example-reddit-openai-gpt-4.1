import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";
export * as votes from "./votes/index";

/**
 * Create a new top-level comment or a reply on a post, for authenticated users.
 *
 * Allows an authenticated member or admin user to create a comment for a post
 * or as a nested reply. Enforces all business logic for validation, including
 * minimum and maximum lengths, plain-text only input, and one-to-one ownership
 * (authenticated user only).
 *
 * Supports both top-level comments and arbitrary threading via
 * parent_comment_id. Parent relationships and post linkage are verified for
 * existence and permissions. Only the comment author or platform admin may
 * later edit or delete the comment (via respective APIs).
 *
 * Unauthenticated users are rejected with a login-required message. Validation
 * errors on content length or parent linkage result in clear feedback, per
 * platform standards.
 *
 * @param props.connection
 * @param props.body Information required to create a new comment (post_id,
 *   optional parent_comment_id, body, display name) following comment business
 *   rules.
 * @path /communityPlatform/adminUser/comments
 * @accessor api.functional.communityPlatform.adminUser.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information required to create a new comment (post_id, optional
     * parent_comment_id, body, display name) following comment business
     * rules.
     */
    body: ICommunityPlatformComment.ICreate;
  };
  export type Body = ICommunityPlatformComment.ICreate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/adminUser/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/comments";
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a comment's body or display name (community_platform_comments table).
 *
 * This API endpoint enables the editing of an existing comment on a post. Only
 * the original author of the comment or a platform admin user can perform this
 * action, ensuring ownership and moderation rules are enforced. The underlying
 * database table is community_platform_comments.
 *
 * The comment body must remain between 2 and 2,000 characters as plain text and
 * may not include executable code. The display_name is optional and limited to
 * 32 characters. If the field is left empty, the comment will default to
 * showing 'Anonymous' as the author. Attempts to modify the comment by users
 * who are not the original author or an admin will be rejected with a
 * permission error message.
 *
 * Security is ensured by verifying the user role and ownership before allowing
 * updates. Edits are reflected in the updated_at column to provide an audit
 * trail of modifications. This operation integrates with frontend flows for
 * comment editing and supports error handling for validation and permission
 * failures.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment to update
 * @param props.body Fields to update in the comment: body (2–2,000 chars),
 *   display_name (0–32 chars, optional)
 * @path /communityPlatform/adminUser/comments/:commentId
 * @accessor api.functional.communityPlatform.adminUser.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target comment to update */
    commentId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the comment: body (2–2,000 chars), display_name
     * (0–32 chars, optional)
     */
    body: ICommunityPlatformComment.IUpdate;
  };
  export type Body = ICommunityPlatformComment.IUpdate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/adminUser/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a comment by ID (community_platform_comments table).
 *
 * This endpoint allows the deletion (soft-deletion) of a comment identified by
 * its commentId. The operation can be performed only by the original author of
 * the comment or by an admin user. Upon execution, the deleted_at column of the
 * comment (and all its direct and nested replies) is set to the current
 * timestamp, effectively hiding them from public view while maintaining data
 * integrity for compliance and recovery as required by business rules.
 *
 * The database table community_platform_comments provides soft-delete
 * capability via the deleted_at field. Other users attempting to delete
 * comments they do not own will receive an error message. If the comment
 * hierarchy contains replies, all descendants are processed recursively. Admin
 * users may perform this on any comment for moderation, while regular users are
 * restricted to their own content.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to soft-delete
 * @path /communityPlatform/adminUser/comments/:commentId
 * @accessor api.functional.communityPlatform.adminUser.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the comment to soft-delete */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
