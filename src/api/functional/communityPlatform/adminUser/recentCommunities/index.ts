import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Remove a single recent community link by recentCommunityId from
 * community_platform_recent_communities.
 *
 * This API operation allows a member user to remove a community from their
 * personal list of recent communities for navigation and sidebar display. The
 * operation targets the community_platform_recent_communities table, which
 * links member users to communities based on recent activity.
 *
 * A user may have up to five recent communities; when one is deleted, the
 * system reorders the remaining entries and updates their recent_rank. Only the
 * user who owns the recent list (or an adminUser) may delete a recent community
 * link. If the recentCommunityId does not belong to the requesting user or the
 * user is not an admin, the operation fails with a permission error.
 *
 * Deletion of a recent community in this context is a hard delete â€“ the
 * association is permanently removed from the user's list but does not affect
 * membership or the underlying community entity. Error handling includes checks
 * for valid ownership and non-existent records.
 *
 * @param props.connection
 * @param props.recentCommunityId The unique identifier (UUID) of the recent
 *   community record to delete.
 * @path /communityPlatform/adminUser/recentCommunities/:recentCommunityId
 * @accessor api.functional.communityPlatform.adminUser.recentCommunities.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier (UUID) of the recent community record to
     * delete.
     */
    recentCommunityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/recentCommunities/:recentCommunityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/recentCommunities/${encodeURIComponent(props.recentCommunityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recentCommunityId")(() =>
        typia.assert(props.recentCommunityId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
