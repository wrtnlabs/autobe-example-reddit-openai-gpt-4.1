import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminUser } from "../../../../structures/ICommunityPlatformAdminUser";
import { IPageICommunityPlatformAdminUser } from "../../../../structures/IPageICommunityPlatformAdminUser";

/**
 * Search and paginate admin users (community_platform_adminusers).
 *
 * This operation fetches a paginated, searchable list of admin users registered
 * on the platform. It implements complex filtering, sorting, and pagination
 * using the community_platform_adminusers table definition.
 *
 * Used by the platform management dashboard and other administration tools,
 * this endpoint supports filters for status, name, and other admin attributes.
 * Access is restricted to users with appropriate permissions (typically admin
 * role only), ensuring proper visibility moderation and audit controls.
 *
 * The request body allows for specifying page size, search criteria, and
 * sorting preferences. The response includes admin user summary data for fast,
 * secure list displays, with navigational paging that supports large account
 * volumes.
 *
 * Any attempt by unauthorized users to access this endpoint is denied with an
 * appropriate error, in line with platform and business rule requirements.
 *
 * @param props.connection
 * @param props.body Advanced search, filter, and pagination parameters for
 *   retrieving admin users.
 * @path /communityPlatform/adminUser/adminUsers
 * @accessor api.functional.communityPlatform.adminUser.adminUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search, filter, and pagination parameters for retrieving
     * admin users.
     */
    body: ICommunityPlatformAdminUser.IRequest;
  };
  export type Body = ICommunityPlatformAdminUser.IRequest;
  export type Response = IPageICommunityPlatformAdminUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/adminUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/adminUsers";
  export const random = (): IPageICommunityPlatformAdminUser.ISummary =>
    typia.random<IPageICommunityPlatformAdminUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed admin user information by ID (community_platform_adminusers).
 *
 * This endpoint enables retrieval of a specific admin user's full record based
 * on their unique identifier, as specified in the community_platform_adminusers
 * schema. Data returned is essential for administrative dashboards, audit log
 * linkage, and role management logic.
 *
 * Included fields are all business-relevant attributes, such as display name,
 * status, timestamps, and credential references, as documented in the database
 * comments and security policies.
 *
 * Access to this endpoint is strictly limited to users with the admin role. If
 * a non-authorized request is made or no record is found for the provided
 * adminUserId, the response is a 404 or equivalent error per platform error
 * standards.
 *
 * Returned data must be compliant with privacy and audit requirements, exposing
 * only approved fields as described in the schema.
 *
 * @param props.connection
 * @param props.adminUserId Unique identifier of the target admin user.
 * @path /communityPlatform/adminUser/adminUsers/:adminUserId
 * @accessor api.functional.communityPlatform.adminUser.adminUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target admin user. */
    adminUserId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAdminUser;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/adminUsers/:adminUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/adminUsers/${encodeURIComponent(props.adminUserId ?? "null")}`;
  export const random = (): ICommunityPlatformAdminUser =>
    typia.random<ICommunityPlatformAdminUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminUserId")(() => typia.assert(props.adminUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
