import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSession } from "../../../../structures/ICommunityPlatformSession";
import { IPageICommunityPlatformSession } from "../../../../structures/IPageICommunityPlatformSession";

/**
 * Search and paginate session tokens (community_platform_sessions).
 *
 * This operation lists and searches user sessions for the platform, leveraging
 * the community_platform_sessions schema. Admin users can filter sessions by
 * user ID, status (active, revoked, expired), device information, and time
 * range, supporting efficient session monitoring and management.
 *
 * Returned data includes session metadata but never plaintext tokens. Used for
 * security audits, forced logouts, and device tracking. Only adminUser has
 * access. Related operations: GET/PUT/DELETE for session detail and
 * management.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for searching session
 *   tokens.
 * @path /communityPlatform/adminUser/sessions
 * @accessor api.functional.communityPlatform.adminUser.sessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination parameters for searching session tokens. */
    body: ICommunityPlatformSession.IRequest;
  };
  export type Body = ICommunityPlatformSession.IRequest;
  export type Response = IPageICommunityPlatformSession;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/sessions";
  export const random = (): IPageICommunityPlatformSession =>
    typia.random<IPageICommunityPlatformSession>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a session (community_platform_sessions).
 *
 * This operation retrieves complete details for a single session token record
 * in the community_platform_sessions schema. Only admin users are permitted to
 * access session details, which include user reference, device info, login IP,
 * timestamps, and expiration or revocation status.
 *
 * Plaintext session tokens are never returned. Intended for session audits,
 * forced logout management, or analysis of user activity. Related endpoints:
 * PATCH for searching, PUT/DELETE for detail/update.
 *
 * @param props.connection
 * @param props.sessionId Unique session UUID to retrieve details for.
 * @path /communityPlatform/adminUser/sessions/:sessionId
 * @accessor api.functional.communityPlatform.adminUser.sessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique session UUID to retrieve details for. */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSession;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): ICommunityPlatformSession =>
    typia.random<ICommunityPlatformSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a session record (community_platform_sessions).
 *
 * This operation allows an admin user to update selected fields of an existing
 * session token in the community_platform_sessions schema, such as device info
 * or status (e.g., manual revocation). Session token is identified by its UUID.
 * All updates are recorded in audit logs for compliance.
 *
 * Only mutable fields may be changed; session tokens themselves are never
 * exposed. Related endpoints include GET for session detail and DELETE for
 * revocation.
 *
 * @param props.connection
 * @param props.sessionId Unique session UUID to update.
 * @param props.body Updated fields for the session record (e.g., device info,
 *   revoked_at).
 * @path /communityPlatform/adminUser/sessions/:sessionId
 * @accessor api.functional.communityPlatform.adminUser.sessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique session UUID to update. */
    sessionId: string & tags.Format<"uuid">;

    /**
     * Updated fields for the session record (e.g., device info,
     * revoked_at).
     */
    body: ICommunityPlatformSession.IUpdate;
  };
  export type Body = ICommunityPlatformSession.IUpdate;
  export type Response = ICommunityPlatformSession;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/adminUser/sessions/:sessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): ICommunityPlatformSession =>
    typia.random<ICommunityPlatformSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete or revoke a session record (community_platform_sessions).
 *
 * This operation permanently deletes or revokes a platform session record in
 * the community_platform_sessions schema. Access is restricted to admin users
 * for security. Once deleted, the session token is no longer valid for
 * authentication or access.
 *
 * Hard delete or manual revocation is enforced and audit logged for compliance.
 * Related endpoints include PATCH for listing/searching, GET/PUT for
 * detail/update.
 *
 * @param props.connection
 * @param props.sessionId Unique session UUID to delete/revoke.
 * @path /communityPlatform/adminUser/sessions/:sessionId
 * @accessor api.functional.communityPlatform.adminUser.sessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique session UUID to delete/revoke. */
    sessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
