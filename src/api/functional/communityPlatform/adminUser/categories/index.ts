import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCategory } from "../../../../structures/ICommunityPlatformCategory";
import { IPageICommunityPlatformCategory } from "../../../../structures/IPageICommunityPlatformCategory";

/**
 * Create a new community platform category (admin only) in
 * community_platform_categories.
 *
 * Creates a new entry in the community_platform_categories table with a
 * system-unique, case-insensitive name (5â€“32 characters, a-z, A-Z, 0-9, hyphen,
 * underscore), display order (integer), and optional description. This
 * operation is intended for admin users when expanding the fixed category set
 * for sub-communities.
 *
 * Validates all inputs including uniqueness and pattern enforcement for 'name',
 * sequentiality for 'display_order', and maximum length for description.
 * Tracking of creator and audit timestamps is handled automatically.
 *
 * Only adminUser is permitted for category creation. Duplicate names or invalid
 * formats trigger validation errors as described in requirements.
 *
 * @param props.connection
 * @param props.body Category creation info: name (unique), displayOrder, and
 *   description.
 * @path /communityPlatform/adminUser/categories
 * @accessor api.functional.communityPlatform.adminUser.categories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Category creation info: name (unique), displayOrder, and description. */
    body: ICommunityPlatformCategory.ICreate;
  };
  export type Body = ICommunityPlatformCategory.ICreate;
  export type Response = ICommunityPlatformCategory;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/adminUser/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/categories";
  export const random = (): ICommunityPlatformCategory =>
    typia.random<ICommunityPlatformCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list community platform categories with filtering and pagination.
 *
 * Retrieve a list of categories from the community_platform_categories table,
 * enabling advanced filters by name, description (with GIN/trigram search
 * optimizations), and display_order. Pagination and sorting options are
 * supported as per system-wide listing standards. This operation allows
 * authenticated users (adminUser/memberUser) to discover categories for
 * community creation or UI selector purposes.
 *
 * The API response contains summary data for each category, such as ID, name,
 * display order, optional description, timestamps, and all fields defined in
 * the Prisma schema, enabling frontend typeahead, dropdowns, and management
 * interfaces.
 *
 * Permissions: This operation is available to both adminUser and memberUser
 * roles. It does not expose any sensitive data and is suitable for public
 * category listings. Error handling covers validation of search queries and
 * response limits to prevent abusive or nonsensical lookups.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for categories, including
 *   name/description match, sorting, and paging.
 * @path /communityPlatform/adminUser/categories
 * @accessor api.functional.communityPlatform.adminUser.categories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter criteria for categories, including name/description
     * match, sorting, and paging.
     */
    body: ICommunityPlatformCategory.IRequest;
  };
  export type Body = ICommunityPlatformCategory.IRequest;
  export type Response = IPageICommunityPlatformCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/adminUser/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/adminUser/categories";
  export const random = (): IPageICommunityPlatformCategory.ISummary =>
    typia.random<IPageICommunityPlatformCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a category by categoryId (UUID) from
 * community_platform_categories.
 *
 * Obtains a single category by its unique identifier from the
 * community_platform_categories table. The response includes the primary key,
 * name, display order, description, and timestamps as per the Prisma schema.
 *
 * Permissions: Both adminUser and memberUser are permitted. This is suitable
 * for populating category edit dialogs or detailed UI category displays.
 *
 * Security: Exposes only non-sensitive business dictionary data, restricted by
 * access roles. Errors include not found (if the UUID does not match any row).
 *
 * @param props.connection
 * @param props.categoryId Unique identifier for the target category
 *   (community_platform_categories.id).
 * @path /communityPlatform/adminUser/categories/:categoryId
 * @accessor api.functional.communityPlatform.adminUser.categories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier for the target category
     * (community_platform_categories.id).
     */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCategory;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/adminUser/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): ICommunityPlatformCategory =>
    typia.random<ICommunityPlatformCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update properties for a category (description, order) by categoryId (admin
 * only).
 *
 * This operation finds a category by its UUID and updates editable fields:
 * description and display_order (the 'name' remains immutable). It enforces
 * length and integer constraints, and updates the audit timestamps
 * (updated_at). If no record matches, not found is returned. Attempts to edit
 * 'name' are rejected per business rule.
 *
 * Only adminUser may execute. It is used in backend admin interfaces and
 * management panels. Validation errors occur if constraints are violated or
 * UUID is missing.
 *
 * @param props.connection
 * @param props.categoryId Target category ID (UUID) to update.
 * @param props.body Editable fields for a category (description,
 *   display_order).
 * @path /communityPlatform/adminUser/categories/:categoryId
 * @accessor api.functional.communityPlatform.adminUser.categories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target category ID (UUID) to update. */
    categoryId: string & tags.Format<"uuid">;

    /** Editable fields for a category (description, display_order). */
    body: ICommunityPlatformCategory.IUpdate;
  };
  export type Body = ICommunityPlatformCategory.IUpdate;
  export type Response = ICommunityPlatformCategory;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/adminUser/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): ICommunityPlatformCategory =>
    typia.random<ICommunityPlatformCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a category by ID (admin only, irreversible).
 *
 * Permanently removes the specified category from the
 * community_platform_categories table by its UUID (categoryId). This operation
 * does not leave recoverable traces since no soft delete field exists. Used
 * only by adminUser role and typically restricted to prevent orphaned
 * sub-communities or system inconsistencies.
 *
 * Before deletion, systems may enforce checks to ensure no communities
 * reference the target category. If referenced, deletion should be blocked with
 * a meaningful error. Otherwise, the record is removed entirely.
 *
 * Error handling includes not found and foreign key constraint violations.
 *
 * @param props.connection
 * @param props.categoryId UUID of category to hard delete.
 * @path /communityPlatform/adminUser/categories/:categoryId
 * @accessor api.functional.communityPlatform.adminUser.categories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of category to hard delete. */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/adminUser/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
