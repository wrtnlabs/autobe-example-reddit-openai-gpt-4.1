import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../structures/ICommunityPlatformPost";
import { IPageICommunityPlatformPost } from "../../../structures/IPageICommunityPlatformPost";

/**
 * Search, filter, and retrieve a paginated list of posts from
 * community_platform_posts with advanced query options.
 *
 * Advanced post searching is provided via this PATCH request, allowing clients
 * to submit structured criteria for retrieving posts from the
 * community_platform_posts table. Search parameters include communityId(s),
 * authorUserId(s), title/body text match, and sort order (newest or top).
 * Result data is paginated (20 results per page by default), with sorting
 * business logic reflecting platform rules: newest sorts by creation time and
 * id, top sorts by score, then latest, then id.
 *
 * This operation adheres to business constraints such as minimum query length
 * (2+ characters for keyword searches), filtering of soft-deleted posts, and
 * member-specific restrictions when searching posts across joined communities.
 * Unauthenticated (guest) users may freely search published posts system-wide,
 * but results will exclude private or restricted content as per platform
 * rules.
 *
 * Error handling includes short query rejection and limits excessive page
 * requests. The response returns an IPageICommunityPlatformPost.ISummary for
 * efficient feed rendering.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for post filtering
 *   (communityIds, authorUserIds, keyword, sortOrder, page).
 * @path /communityPlatform/posts
 * @accessor api.functional.communityPlatform.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination parameters for post filtering (communityIds,
     * authorUserIds, keyword, sortOrder, page).
     */
    body: ICommunityPlatformPost.IRequest;
  };
  export type Body = ICommunityPlatformPost.IRequest;
  export type Response = IPageICommunityPlatformPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/posts";
  export const random = (): IPageICommunityPlatformPost.ISummary =>
    typia.random<IPageICommunityPlatformPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific post from
 * community_platform_posts by postId.
 *
 * Use this GET endpoint to fetch a single post by its unique postId identifier
 * from the community_platform_posts table. This operation returns all post
 * fields including title, body, community identity, author user id (member or
 * admin), author display name, creation and update time, and relationships to
 * the community and owner. Deleted or soft-deleted posts are filtered from
 * results.
 *
 * Security logic ensures that even guests can view public posts, but only
 * non-private, non-removed items are returned. Ownership and edit permissions
 * are not handled here but reflected in other business endpoints. Edge cases,
 * such as non-existent or deleted posts, return appropriate error statuses, and
 * fields are structured for detail screens with related entities (community,
 * comments, etc.).
 *
 * @param props.connection
 * @param props.postId The UUID of the post to fetch details for.
 * @path /communityPlatform/posts/:postId
 * @accessor api.functional.communityPlatform.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID of the post to fetch details for. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPost;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityPlatformPost =>
    typia.random<ICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
