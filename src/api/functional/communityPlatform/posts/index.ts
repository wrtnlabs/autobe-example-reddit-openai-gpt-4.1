import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../structures/ICommunityPlatformPost";
import { IPageICommunityPlatformPost } from "../../../structures/IPageICommunityPlatformPost";

/**
 * List/query/filter posts with pagination (for feed, search, home).
 *
 * Retrieves a searchable, filterable, and paginated list of all posts (threads)
 * available on the platform. This operation supports filtering by community,
 * search keyword, sort order (newest/top), and full pagination using standard
 * query interfaces. Posts marked deleted (deleted_at != null) are excluded from
 * query results, ensuring that only active posts are shown to users.
 *
 * Patch method supports advanced and dynamic query construction for clients and
 * UI components, addressing home, community, or search/recent feeds. This
 * operation is public and does not require authentication to read, but
 * individual post creation/edit/delete APIs do. The result format returns
 * paginated, ordered data suitable for infinite scroll, load more, or feed
 * rendering features.
 *
 * @param props.connection
 * @param props.body Query filters, search keywords, pagination and sorting
 *   options for post listing.
 * @path /communityPlatform/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Query filters, search keywords, pagination and sorting options for
     * post listing.
     */
    body: ICommunityPlatformPost.IRequest;
  };
  export type Body = ICommunityPlatformPost.IRequest;
  export type Response = IPageICommunityPlatformPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/posts";
  export const random = (): IPageICommunityPlatformPost.ISummary =>
    typia.random<IPageICommunityPlatformPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific post by postId from community_platform_posts.
 *
 * This operation retrieves the full details of a specific post on the community
 * platform, as identified by the provided postId URL parameter. The
 * community_platform_posts table is queried for an entry matching the given
 * postId, and returns all its major fields including the associated community
 * ID, author/member ID, post title, content body, author display name (if any),
 * creation timestamp, last update timestamp, and deleted_at for soft-delete
 * state. If the post exists, it is returned in full; if not, a not-found error
 * is expected. Ownership and author details can be inferred through relations
 * to the member and community entities. Business logic ensures that all posts
 * are accessible for reading (public), but internal fields such as deleted_at
 * or author_display_name are only exposed according to their definition in the
 * schema. This endpoint is meant for consumption by all user roles without
 * authentication (public access). Edge cases are handled gracefully; if the
 * post does not exist or was deleted, a suitable error message is provided.
 * APIs related to editing, deletion or voting on posts require additional
 * endpoints. This endpoint is optimized for read performance and may leverage
 * indexes on postId. Soft-deleted posts (with deleted_at set) should typically
 * not be returned unless specifically intended.
 *
 * @param props.connection
 * @param props.postId The unique identifier (UUID) of the post to retrieve.
 * @path /communityPlatform/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the post to retrieve. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPost;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityPlatformPost =>
    typia.random<ICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
