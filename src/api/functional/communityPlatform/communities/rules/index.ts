import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityRule } from "../../../../structures/ICommunityPlatformCommunityRule";

/**
 * Retrieve details of a specific community rule
 * (community_platform_community_rules table).
 *
 * This operation allows retrieval of a specific rule belonging to a community
 * within the platform. It is associated with the
 * community_platform_community_rules table and requires both the target
 * community's ID and the rule's ID for specificity.
 *
 * All users (including guests and authenticated users) can view community rules
 * as per business requirements, supporting broad visibility for rule
 * enforcement and transparency. The system fetches the specified rule’s order
 * (rule_index) and text (rule_text), enabling correct numbering and UI
 * rendering, and provides auxiliary metadata like creation timestamp. Security
 * is enforced such that only rule viewing is allowed here—creation and
 * update/delete operations are handled by restriction to owners or admins on
 * separate endpoints.
 *
 * Common error handling includes access to non-existent rules, invalid
 * identifiers, or referencing a rule outside its true community context.
 * Returns full rule context, supporting all presentation and compliance needs.
 * Only non-deleted, valid rules are returned.
 *
 * @param props.connection
 * @param props.communityId ID of the community containing the rule.
 * @param props.ruleId ID of the rule within the community.
 * @path /communityPlatform/communities/:communityId/rules/:ruleId
 * @accessor api.functional.communityPlatform.communities.rules.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the community containing the rule. */
    communityId: string & tags.Format<"uuid">;

    /** ID of the rule within the community. */
    ruleId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId/rules/:ruleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
