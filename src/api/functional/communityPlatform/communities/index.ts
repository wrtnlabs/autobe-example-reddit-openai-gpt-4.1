import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../structures/IPageICommunityPlatformCommunity";
export * as rules from "./rules/index";

/**
 * Search and paginate sub-communities (community_platform_communities).
 *
 * This API operation returns a paginated, filterable list of sub-communities
 * matching complex search conditions, utilizing the
 * community_platform_communities Prisma schema. It underpins Explore, search,
 * and main home feed navigation flows, supporting filters by category, owner,
 * activity, and case-insensitive name searching.
 *
 * Results reflect the full business validation logic for unique naming,
 * category validity, and display ordering. Pagination and sorting are always
 * implemented based on platform standards (default by newest, optionally by
 * top, etc.).
 *
 * This endpoint is accessible publicly (for exploration) and with enhanced
 * filters for authenticated users. It forbids exposure of deleted or pending
 * communities, reflecting only currently active records.
 *
 * @param props.connection
 * @param props.body Complex search filters and pagination options for
 *   sub-communities.
 * @path /communityPlatform/communities
 * @accessor api.functional.communityPlatform.communities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Complex search filters and pagination options for sub-communities. */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full sub-community details by ID (community_platform_communities).
 *
 * Allows any user to get a detailed record for a sub-community using its ID.
 * Data returned includes all business-context fields, such as name
 * (case-insensitive), description, logo/banner URIs, rules, owner, and audit
 * timestamps. Underlying model is community_platform_communities.
 *
 * This data is the source for navigation, info boxes, community home layout,
 * and join/leave button logic. The operation omits deleted communities and any
 * soft-deleted records.
 *
 * Open to all users (public access), with enhanced permissions for
 * authenticated users when displaying join/leave or edit options.
 *
 * @param props.connection
 * @param props.communityId Unique identifier for the community record to
 *   retrieve.
 * @path /communityPlatform/communities/:communityId
 * @accessor api.functional.communityPlatform.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the community record to retrieve. */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
