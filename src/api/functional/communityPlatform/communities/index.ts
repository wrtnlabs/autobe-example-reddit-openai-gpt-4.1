import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../structures/IPageICommunityPlatformCommunity";

/**
 * Paginated search and discovery for communities with filtering and sort
 * options.
 *
 * Search and return a paginated list of communities with advanced filtering and
 * sorting. Includes options to filter by category, owner, partial name match,
 * or display title. Results provide summary information for each community
 * along with basic category data and status. Pagination and sort by activity or
 * creation time are supported. Does not return communities flagged as deleted
 * (unless admin override for auditing). Available to all users for discovery,
 * but response includes additional admin details when accessed by
 * administrators. This endpoint is optimized for search/explore and top-level
 * listings.
 *
 * @param props.connection
 * @param props.body Search and filter options for community listings. Includes
 *   pagination, sorting, search string, and category/owner filters.
 * @path /communityPlatform/communities
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter options for community listings. Includes
     * pagination, sorting, search string, and category/owner filters.
     */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve complete community information and relationships by community ID.
 *
 * Get details about a specific community, including all fields, rule lines,
 * category and owner metadata, and related status. All fields defined in the
 * community_platform_communities schema are included, with linked
 * rules/categorization and display information. Public API for community
 * browsing and view pages. Does not return data for soft-deleted communities to
 * prevent invalid or misleading content being shown; admins may have an
 * override to read deleted state for audits. No private or sensitive data
 * returned to member or public roles.
 *
 * @param props.connection
 * @param props.communityId The community record ID to look up.
 * @path /communityPlatform/communities/:communityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The community record ID to look up. */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
