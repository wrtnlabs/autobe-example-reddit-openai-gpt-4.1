import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../structures/ICommunityPlatformComment";
import { IPageICommunityPlatformComment } from "../../../structures/IPageICommunityPlatformComment";

/**
 * Paginated and searchable list of comments with core summary data.
 *
 * Retrieves a paginated, filtered list of comments system-wide or for a
 * particular context (e.g., specific post or parent comment). Supports rich
 * filtering (e.g., by post, author, nesting), advanced full-text search on
 * content, and paging for performance. Sorting is offered by newest or top
 * score.
 *
 * Each comment entry exposes summary fields per the Prisma schema: content
 * (body), display name, creation date, parent linkage, etc. Publicly readable
 * by any role, including unauthenticated users, but only non-private fields are
 * returned if accessed as a guest.
 *
 * Operation is accessible to all users; sensitive fields are omitted for guests
 * as per privacy rules. Standard error handling is enforced for malformed
 * queries or unauthorized field access.
 *
 * @param props.connection
 * @param props.body Search/filter criteria and pagination options for querying
 *   comments.
 * @path /communityPlatform/comments
 * @accessor api.functional.communityPlatform.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search/filter criteria and pagination options for querying comments. */
    body: ICommunityPlatformComment.IRequest;
  };
  export type Body = ICommunityPlatformComment.IRequest;
  export type Response = IPageICommunityPlatformComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/comments";
  export const random = (): IPageICommunityPlatformComment.ISummary =>
    typia.random<IPageICommunityPlatformComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific comment by its unique ID.
 *
 * Fetches a single comment with full detail: plain-text body,
 * author/member/guest/admin, display name (with 'Anonymous' fallback),
 * parent/child (reply) relationships, timestamps, and status (deleted/active).
 *
 * Comment detail retrieval is allowed for any user (including guests), but only
 * public-safe fields (per privacy requirements) are shown to non-authenticated
 * users. The operation handles missing or deleted comments with appropriate
 * errors.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment (UUID).
 * @path /communityPlatform/comments/:commentId
 * @accessor api.functional.communityPlatform.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target comment (UUID). */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
