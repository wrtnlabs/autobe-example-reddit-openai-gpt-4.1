import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformRecentCommunity } from "../../../../structures/ICommunityPlatformRecentCommunity";
import { IPageICommunityPlatformRecentCommunity } from "../../../../structures/IPageICommunityPlatformRecentCommunity";

/**
 * Add a recent community visit to the member's recency list
 * (community_platform_recent_communities table).
 *
 * This endpoint allows an authenticated member user to add a new recent
 * community record to their navigation list, as captured in the
 * community_platform_recent_communities table. When a user visits a community
 * not currently in their top 5, this operation inserts a record linking the
 * user to the community with the updated recency rank and timestamp.
 *
 * System logic ensures only one record per (memberuser, community) combination
 * and limits total entries to 5 per user—oldest records are replaced as needed.
 * Only the user themselves can create (synchronize) their own recent
 * communities; no cross-user creation is permitted. The returned response
 * includes the new or updated entry, enabling immediate sidebar/recency context
 * updates in the frontend.
 *
 * @param props.connection
 * @param props.body Information needed to create or update a recent community
 *   record.
 * @path /communityPlatform/memberUser/recentCommunities
 * @accessor api.functional.communityPlatform.memberUser.recentCommunities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create or update a recent community record. */
    body: ICommunityPlatformRecentCommunity.ICreate;
  };
  export type Body = ICommunityPlatformRecentCommunity.ICreate;
  export type Response = ICommunityPlatformRecentCommunity;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/memberUser/recentCommunities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/memberUser/recentCommunities";
  export const random = (): ICommunityPlatformRecentCommunity =>
    typia.random<ICommunityPlatformRecentCommunity>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve recent community navigation list for current member
 * (community_platform_recent_communities table).
 *
 * This endpoint allows an authenticated member user to view their recent
 * community navigation history, as represented in the
 * community_platform_recent_communities table. The system supports advanced
 * search, filtering, and pagination if extended, but by business rule returns
 * up to 5 entries ordered by recency (recent_rank/last_activity_at).
 *
 * The operation gathers necessary community data for personalized sidebars,
 * quick navigation, and context menus. Returned results respect memberuser_id
 * scoping—users can see only their own recent community list. Each entry
 * includes community reference, recency order, and last activity time. Security
 * and privacy are strictly enforced so users cannot view or access other users’
 * recent communities.
 *
 * Key for supporting seamless UI context, home feed personalization, and
 * role-based navigation experiences. Attempts to access without authentication
 * are denied; only authenticated member users can use this operation per
 * validation rules.
 *
 * @param props.connection
 * @param props.body Optional search/pagination parameters for recent community
 *   retrieval.
 * @path /communityPlatform/memberUser/recentCommunities
 * @accessor api.functional.communityPlatform.memberUser.recentCommunities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Optional search/pagination parameters for recent community retrieval. */
    body: ICommunityPlatformRecentCommunity.IRequest;
  };
  export type Body = ICommunityPlatformRecentCommunity.IRequest;
  export type Response = IPageICommunityPlatformRecentCommunity;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/memberUser/recentCommunities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/memberUser/recentCommunities";
  export const random = (): IPageICommunityPlatformRecentCommunity =>
    typia.random<IPageICommunityPlatformRecentCommunity>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific recent community entry for the member
 * (community_platform_recent_communities table).
 *
 * This endpoint lets an authenticated member user retrieve a specific record
 * from their recent communities navigation, leveraging the
 * community_platform_recent_communities table. The parameter recentCommunityId
 * references the unique entry. Logic ensures users can only view their own
 * records; cross-user access is denied by enforcement of memberuser_id
 * ownership per business and privacy rules.
 *
 * Returned data includes the linked community, the recency order, and the
 * timestamp for last activity, supporting robust UI personalization. Used for
 * context menu details, navigation previews, and background fetches for
 * context-aware features. Unauthorized or out-of-scope access attempts are
 * rejected with standard error responses.
 *
 * @param props.connection
 * @param props.recentCommunityId ID of the recent community record to retrieve.
 * @path /communityPlatform/memberUser/recentCommunities/:recentCommunityId
 * @accessor api.functional.communityPlatform.memberUser.recentCommunities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the recent community record to retrieve. */
    recentCommunityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformRecentCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/memberUser/recentCommunities/:recentCommunityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/memberUser/recentCommunities/${encodeURIComponent(props.recentCommunityId ?? "null")}`;
  export const random = (): ICommunityPlatformRecentCommunity =>
    typia.random<ICommunityPlatformRecentCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recentCommunityId")(() =>
        typia.assert(props.recentCommunityId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a recent community navigation entry
 * (community_platform_recent_communities table).
 *
 * This operation lets an authenticated member user update a specific recent
 * community record in their navigation history—managed in the
 * community_platform_recent_communities table. It allows changing fields such
 * as recent_rank or last_activity_at in order to maintain the correct recency
 * ordering and time context for personalized sidebars.
 *
 * Updates are only permitted for entries owned by the current member user;
 * attempts to update other users’ records are prohibited. Logic also enforces
 * maximum of 5 entries per user and recalculates ranks if changes are made that
 * affect recency. Business rules ensure that the update cannot create duplicate
 * records or cross-user data leaks.
 *
 * Success returns the updated recent community record for immediate
 * navigation/UI update.
 *
 * @param props.connection
 * @param props.recentCommunityId ID of the recent community record to update.
 * @param props.body Updated recency or activity data for the record.
 * @path /communityPlatform/memberUser/recentCommunities/:recentCommunityId
 * @accessor api.functional.communityPlatform.memberUser.recentCommunities.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the recent community record to update. */
    recentCommunityId: string & tags.Format<"uuid">;

    /** Updated recency or activity data for the record. */
    body: ICommunityPlatformRecentCommunity.IUpdate;
  };
  export type Body = ICommunityPlatformRecentCommunity.IUpdate;
  export type Response = ICommunityPlatformRecentCommunity;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/memberUser/recentCommunities/:recentCommunityId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/recentCommunities/${encodeURIComponent(props.recentCommunityId ?? "null")}`;
  export const random = (): ICommunityPlatformRecentCommunity =>
    typia.random<ICommunityPlatformRecentCommunity>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recentCommunityId")(() =>
        typia.assert(props.recentCommunityId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a single recent community link by recentCommunityId from
 * community_platform_recent_communities.
 *
 * This API operation allows a member user to remove a community from their
 * personal list of recent communities for navigation and sidebar display. The
 * operation targets the community_platform_recent_communities table, which
 * links member users to communities based on recent activity.
 *
 * A user may have up to five recent communities; when one is deleted, the
 * system reorders the remaining entries and updates their recent_rank. Only the
 * user who owns the recent list (or an adminUser) may delete a recent community
 * link. If the recentCommunityId does not belong to the requesting user or the
 * user is not an admin, the operation fails with a permission error.
 *
 * Deletion of a recent community in this context is a hard delete – the
 * association is permanently removed from the user's list but does not affect
 * membership or the underlying community entity. Error handling includes checks
 * for valid ownership and non-existent records.
 *
 * @param props.connection
 * @param props.recentCommunityId The unique identifier (UUID) of the recent
 *   community record to delete.
 * @path /communityPlatform/memberUser/recentCommunities/:recentCommunityId
 * @accessor api.functional.communityPlatform.memberUser.recentCommunities.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier (UUID) of the recent community record to
     * delete.
     */
    recentCommunityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/memberUser/recentCommunities/:recentCommunityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/memberUser/recentCommunities/${encodeURIComponent(props.recentCommunityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recentCommunityId")(() =>
        typia.assert(props.recentCommunityId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
