import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";
export * as memberships from "./memberships/index";
export * as rules from "./rules/index";

/**
 * Create a new sub-community (community_platform_communities).
 *
 * This endpoint allows authenticated member or admin users to create a new
 * sub-community, providing a name (validated for uniqueness and format),
 * category reference, optional description, logo/banner URIs, and rules as
 * documented by business logic and the community_platform_communities schema.
 *
 * Ownership is set to the authenticated user making the request and is
 * immutable for the life of the community. The operation enforces naming and
 * categorization business rules, initializing member count and joined status
 * appropriately. All required and optional attributes are validated per schema
 * and platform business rules. Conflicts or violations return error messages as
 * described in the requirements (e.g., name in use or invalid format).
 *
 * Successfully created communities are immediately available for exploration,
 * joining, and post composition actions.
 *
 * @param props.connection
 * @param props.body Community creation input, including required and optional
 *   attributes for a new sub-community.
 * @path /communityPlatform/memberUser/communities
 * @accessor api.functional.communityPlatform.memberUser.communities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Community creation input, including required and optional attributes
     * for a new sub-community.
     */
    body: ICommunityPlatformCommunity.ICreate;
  };
  export type Body = ICommunityPlatformCommunity.ICreate;
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/memberUser/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/memberUser/communities";
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata and settings of a specific community (excluding
 * name/category).
 *
 * This operation updates mutable metadata for a given sub-community by
 * communityId, including fields like description, logo/image URI, banner URI,
 * and optionally community rules (if managed through the same DTO). The
 * operation references the community_platform_communities Prisma model, which
 * defines community structureâ€”name (immutable), description (max 200 chars),
 * logo_uri, banner_uri, and soft delete timestamp. Category is not editable
 * after initial creation.
 *
 * Only the original community creator (owner, referenced by owner_id) may
 * invoke this operation. Ownership is immutable and enforced at the application
 * logic layer. Attempts by non-owners will result in permission errors. The
 * update is reflected in updated_at and triggers updates in contextual feeds
 * and sidebars throughout the UI.
 *
 * Mutable fields are validated for business rules: description may be up to 200
 * characters, logo/banner URIs must conform to application standards, and
 * attempts to change immutable fields (name, category_id) will return an
 * explicit error. All changes are permanently auditable via the updated_at
 * timestamp.
 *
 * Error scenarios include unauthorized user access, input exceeding allowed
 * field lengths, or incorrect attempts to update immutable properties. Related
 * APIs include community creation, soft deletion, membership management, and
 * rule editing endpoints.
 *
 * @param props.connection
 * @param props.communityId Unique identifier for the target community to
 *   update.
 * @param props.body Payload containing updatable community metadata (excluding
 *   name/category).
 * @path /communityPlatform/memberUser/communities/:communityId
 * @accessor api.functional.communityPlatform.memberUser.communities.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target community to update. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Payload containing updatable community metadata (excluding
     * name/category).
     */
    body: ICommunityPlatformCommunity.IUpdate;
  };
  export type Body = ICommunityPlatformCommunity.IUpdate;
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/memberUser/communities/:communityId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
