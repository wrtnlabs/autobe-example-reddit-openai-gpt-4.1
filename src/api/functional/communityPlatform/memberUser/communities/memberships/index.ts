import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityMembership } from "../../../../../structures/ICommunityPlatformCommunityMembership";
import { IPageICommunityPlatformCommunityMembership } from "../../../../../structures/IPageICommunityPlatformCommunityMembership";

/**
 * Join a community as a new member.
 *
 * This operation allows an authenticated user to join a specific community by
 * adding a membership entry in the community_platform_community_memberships
 * table. The communityId is required in the path, and the authenticated user's
 * own identifier is supplied in the request body.
 *
 * All business constraints are validated: users may only join a community once,
 * duplicate join attempts are rejected. Joined timestamp is auto-populated to
 * record when the memberships is created. Attempts by unauthenticated users or
 * attempts to artificially assign membership to other users are disallowed
 * unless the requester is an adminUser.
 *
 * Edge and error cases include already existing membership, attempts to join or
 * create memberships on behalf of other users (rejected unless admin), and
 * requests referencing non-existent communities. On success, the system updates
 * contextual UI elements, feeds, and recent communities lists to reflect new
 * membership.
 *
 * @param props.connection
 * @param props.communityId ID of the community to join.
 * @param props.body Payload containing the user ID to be associated (typically
 *   omitted for self, required for admin action).
 * @path /communityPlatform/memberUser/communities/:communityId/memberships
 * @accessor api.functional.communityPlatform.memberUser.communities.memberships.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the community to join. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Payload containing the user ID to be associated (typically omitted
     * for self, required for admin action).
     */
    body: ICommunityPlatformCommunityMembership.ICreate;
  };
  export type Body = ICommunityPlatformCommunityMembership.ICreate;
  export type Response = ICommunityPlatformCommunityMembership;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/memberUser/communities/:communityId/memberships",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/memberships`;
  export const random = (): ICommunityPlatformCommunityMembership =>
    typia.random<ICommunityPlatformCommunityMembership>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list memberships in a specific community.
 *
 * This operation fetches a paginated, filtered, and optionally sorted list of
 * all user memberships for a specific community, using the communityId as a
 * reference. Drawn from the community_platform_community_memberships Prisma
 * schema, each record links a member user and a community, recording join time
 * and enforcing uniqueness per (user, community) pair.
 *
 * Business logic permits users with appropriate permissions (typically any
 * logged-in user, but with restricted details according to role) to view
 * membership listings for open communities. Output includes member user ids,
 * join times, and associated membership IDs. Filtering allows by memberuser_id,
 * date joined, and other analytic queries as relevant. Sorting and query
 * options may default to join time descending.
 *
 * Security ensures that only authenticated users may access non-public member
 * data, and that user details are sanitized for privacy. Related operations
 * include joining/leaving a community and fetching recent communities for
 * display. Errors include invalid communityId or insufficient permissions.
 *
 * @param props.connection
 * @param props.communityId ID of the community whose memberships are being
 *   listed.
 * @param props.body Search filter and paging options for filtering memberships.
 * @path /communityPlatform/memberUser/communities/:communityId/memberships
 * @accessor api.functional.communityPlatform.memberUser.communities.memberships.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** ID of the community whose memberships are being listed. */
    communityId: string & tags.Format<"uuid">;

    /** Search filter and paging options for filtering memberships. */
    body: ICommunityPlatformCommunityMembership.IRequest;
  };
  export type Body = ICommunityPlatformCommunityMembership.IRequest;
  export type Response = IPageICommunityPlatformCommunityMembership.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/memberUser/communities/:communityId/memberships",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/memberships`;
  export const random =
    (): IPageICommunityPlatformCommunityMembership.ISummary =>
      typia.random<IPageICommunityPlatformCommunityMembership.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific community membership.
 *
 * This operation retrieves comprehensive details for a particular community
 * membership by membershipId under the specified communityId. It references the
 * community_platform_community_memberships Prisma model, where each record
 * connects a member user to a community with unique constraints and joined_at
 * tracking.
 *
 * Retrieval is allowed for authenticated users, with privacy protection for
 * sensitive member information. The returned membership includes join
 * timestamp, membership id, community id, and member user id. Access controls
 * enforce read permissions: typically, only members of the community, the user
 * themselves, or admins may see certain sensitive fields depending on
 * application logic.
 *
 * Common error cases include membershipId not found, membership not belonging
 * to the indicated community, or the requester lacking permissions to view the
 * details. Related endpoints are joining/leaving memberships and listing all
 * memberships for a community.
 *
 * @param props.connection
 * @param props.communityId ID of the community containing the membership.
 * @param props.membershipId Unique identifier of the community membership
 *   record.
 * @path /communityPlatform/memberUser/communities/:communityId/memberships/:membershipId
 * @accessor api.functional.communityPlatform.memberUser.communities.memberships.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the community containing the membership. */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the community membership record. */
    membershipId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunityMembership;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/memberUser/communities/:communityId/memberships/:membershipId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/memberships/${encodeURIComponent(props.membershipId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityMembership =>
    typia.random<ICommunityPlatformCommunityMembership>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("membershipId")(() => typia.assert(props.membershipId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update membership metadata for a specific member of a community.
 *
 * This operation updates select metadata of a specific community membership. It
 * references the community_platform_community_memberships model, where each
 * membership links a user and community. Updatable fields may include the
 * joined_at timestamp or analytic/status fields if present, but not the member
 * user or community association, which are immutable for each record.
 *
 * Typically only the user themselves or an adminUser may update a community
 * membership. Attempts to transfer membership to another user, change the
 * community, or duplicate an existing membership are forbidden and will result
 * in errors. Auditability is preserved by updating timestamps on every change
 * and logging admin-invoked changes.
 *
 * Common errors: insufficient permissions, attempts to edit immutable fields,
 * or constraints violation. Related endpoints are membership creation,
 * deletion, and listing for communities.
 *
 * @param props.connection
 * @param props.communityId ID of the community in which the membership exists.
 * @param props.membershipId Unique identifier of the membership to update.
 * @param props.body Payload specifying updatable fields for the membership,
 *   such as joined_at or auxiliary analytic fields.
 * @path /communityPlatform/memberUser/communities/:communityId/memberships/:membershipId
 * @accessor api.functional.communityPlatform.memberUser.communities.memberships.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the community in which the membership exists. */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the membership to update. */
    membershipId: string & tags.Format<"uuid">;

    /**
     * Payload specifying updatable fields for the membership, such as
     * joined_at or auxiliary analytic fields.
     */
    body: ICommunityPlatformCommunityMembership.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityMembership.IUpdate;
  export type Response = ICommunityPlatformCommunityMembership;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/memberUser/communities/:communityId/memberships/:membershipId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/memberships/${encodeURIComponent(props.membershipId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityMembership =>
    typia.random<ICommunityPlatformCommunityMembership>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("membershipId")(() => typia.assert(props.membershipId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a user from a community (leave) by deleting their membership.
 *
 * This operation deletes an individual user's membership from a community. The
 * path specifies communityId and membershipId, and the corresponding record in
 * community_platform_community_memberships is permanently removed. Only the
 * membership's owner (the user themselves) or adminUsers are permitted to
 * invoke this deletion, enforcing business rules about voluntary leaving or
 * admin enforcement (e.g., bans).
 *
 * On success, the system removes the membership, updates the personalized home
 * feed and recent communities lists, and adjusts the member count for the
 * community. If the membership is not found, does not belong to the indicated
 * community, or is targeted by an unauthorized user, appropriate errors and
 * permission denials are returned.
 *
 * This operation does not affect the user's account or other memberships, and
 * is specific to the one community indicated by the path. Related endpoints
 * include join/creation, listing community memberships, and admin ban flows.
 *
 * @param props.connection
 * @param props.communityId ID of the community from which the user is to be
 *   removed.
 * @param props.membershipId Unique identifier for the membership to delete.
 * @path /communityPlatform/memberUser/communities/:communityId/memberships/:membershipId
 * @accessor api.functional.communityPlatform.memberUser.communities.memberships.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the community from which the user is to be removed. */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier for the membership to delete. */
    membershipId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/memberUser/communities/:communityId/memberships/:membershipId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/memberships/${encodeURIComponent(props.membershipId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("membershipId")(() => typia.assert(props.membershipId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
