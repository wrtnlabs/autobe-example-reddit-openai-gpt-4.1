import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityRule } from "../../../../../structures/ICommunityPlatformCommunityRule";
import { IPageICommunityPlatformCommunityRule } from "../../../../../structures/IPageICommunityPlatformCommunityRule";

/**
 * Create a new rule for a community (community_platform_community_rules table).
 *
 * This operation enables a community owner to add a new rule to their
 * community’s rules set, as stored in the community_platform_community_rules
 * table. Only the user who owns the target community may invoke this operation;
 * enforcement of ownership is critical per business logic. Upon execution, the
 * rule text is validated (up to 100 characters) and the rule_index is
 * determined based on the existing sequence (max 10 rules allowed).
 *
 * The new rule is stored with references to the community and its insertion
 * index, ensuring correct presentation order for UI and enforcement. Attempts
 * to add a rule when already at maximum count, or by a non-owner, will result
 * in an error. This endpoint integrates with safeguards ensuring that deletion
 * of a community cascades to all associated rules. Success returns the created
 * rule, including its unique ID, text, order, and metadata for proper list
 * display.
 *
 * Relevant for admins or owners managing community guidelines and transparency,
 * and for UI features showing live-updated rules lists after ownership
 * actions.
 *
 * @param props.connection
 * @param props.communityId ID of the community that will receive the new rule.
 * @param props.body Information for the new rule to insert (rule_text,
 *   automatic rule_index).
 * @path /communityPlatform/memberUser/communities/:communityId/rules
 * @accessor api.functional.communityPlatform.memberUser.communities.rules.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the community that will receive the new rule. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Information for the new rule to insert (rule_text, automatic
     * rule_index).
     */
    body: ICommunityPlatformCommunityRule.ICreate;
  };
  export type Body = ICommunityPlatformCommunityRule.ICreate;
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/memberUser/communities/:communityId/rules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/rules`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search all rules for a specific community.
 *
 * This operation retrieves a collection of up to 10 rules for a specified
 * community, leveraging the community_platform_community_rules table. Each rule
 * contains a rule_index, rule_text, and created_at timestamp, and is directly
 * related to the referenced community via community_id. Rules are used for
 * informational and business constraint purposes, powering the UI display in
 * community info boxes and rule editors.
 *
 * The endpoint supports advanced filtering and pagination (useful for large
 * communities or future extensibility), though business rules enforce a maximum
 * of 10 rules per community. Only authenticated users (typically owners or
 * admins) may view or edit the full list; public users may only see the visible
 * subset. Security and privacy controls ensure sensitive or draft rules are not
 * leaked.
 *
 * Related endpoints include community creation (rule setup), community metadata
 * updating, and rule editing/removal flows. Error scenarios are non-existent or
 * unauthorized community, or attempts to access protected rules by
 * non-owners/admins.
 *
 * @param props.connection
 * @param props.communityId ID of the community whose rules are being
 *   listed/searched.
 * @param props.body Optional filtering/paging criteria for rules list (e.g.,
 *   search text or page).
 * @path /communityPlatform/memberUser/communities/:communityId/rules
 * @accessor api.functional.communityPlatform.memberUser.communities.rules.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** ID of the community whose rules are being listed/searched. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Optional filtering/paging criteria for rules list (e.g., search text
     * or page).
     */
    body: ICommunityPlatformCommunityRule.IRequest;
  };
  export type Body = ICommunityPlatformCommunityRule.IRequest;
  export type Response = IPageICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/memberUser/communities/:communityId/rules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/rules`;
  export const random = (): IPageICommunityPlatformCommunityRule =>
    typia.random<IPageICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific community rule (community_platform_community_rules table).
 *
 * This operation allows the owner of a community—or an adminUser—to update a
 * specific community rule’s contents, as represented by the
 * community_platform_community_rules table. Only the owning member or an admin
 * user may edit rules; other users are denied access per business
 * requirements.
 *
 * Input validation ensures the rule text does not exceed 100 characters, with
 * all changes audit-logged and respecting ordering (rule_index cannot be
 * changed through this endpoint). Business constraints prohibit editing rules
 * for non-existent communities or rules not belonging to the specified
 * community. If the community has been deleted (soft delete), or if maximum
 * rules are already present, these must be validated in logic.
 *
 * After successful update, the endpoint returns the updated rule, confirming
 * all persisted changes for UI and compliance. Only non-deleted, valid rules
 * may be updated.
 *
 * @param props.connection
 * @param props.communityId ID of the community containing the rule to update.
 * @param props.ruleId ID of the rule to update.
 * @param props.body Updated rule data—rule_text only.
 * @path /communityPlatform/memberUser/communities/:communityId/rules/:ruleId
 * @accessor api.functional.communityPlatform.memberUser.communities.rules.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the community containing the rule to update. */
    communityId: string & tags.Format<"uuid">;

    /** ID of the rule to update. */
    ruleId: string & tags.Format<"uuid">;

    /** Updated rule data—rule_text only. */
    body: ICommunityPlatformCommunityRule.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityRule.IUpdate;
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/memberUser/communities/:communityId/rules/:ruleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific community rule (community_platform_community_rules table).
 *
 * This endpoint allows the owner of a community or an adminUser to remove a
 * particular rule from a community’s rules, as per the
 * community_platform_community_rules table. Deletion is restricted to validated
 * owners or platform admins; unauthorized attempts are denied.
 *
 * Upon successful deletion, the rule is permanently removed from the database,
 * and any UI or rules display must update accordingly. Remaining rules are
 * renumbered (order/index) in the application logic if necessary to preserve
 * presentation sequence. No information remains in the database regarding the
 * deleted rule. Attempts to delete a rule from a non-existent community or on a
 * rule not belonging to the specified community will fail with proper error
 * messaging.
 *
 * This operation does not implement a soft-delete mechanism, as the schema does
 * not provide for a deleted_at column on rules. All deletions are permanent and
 * cannot be recovered by end users.
 *
 * @param props.connection
 * @param props.communityId ID of the community containing the rule to delete.
 * @param props.ruleId ID of the rule to delete.
 * @path /communityPlatform/memberUser/communities/:communityId/rules/:ruleId
 * @accessor api.functional.communityPlatform.memberUser.communities.rules.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the community containing the rule to delete. */
    communityId: string & tags.Format<"uuid">;

    /** ID of the rule to delete. */
    ruleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/memberUser/communities/:communityId/rules/:ruleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
