import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMemberUser } from "../../../../structures/ICommunityPlatformMemberUser";

/**
 * Get detailed member user information by ID (community_platform_memberusers).
 *
 * This endpoint allows retrieval of a member user's complete profile and
 * related attributes given their unique identifier, as defined in the
 * community_platform_memberusers Prisma model.
 *
 * It is used for backend logic and UI features such as profile display, author
 * information on posts and comments, and eligibility for content actions. Only
 * authenticated users and platform admins may use this endpoint, in compliance
 * with business access rules and privacy context.
 *
 * The returned object includes display name, status, timestamps, and all
 * business logic-required attributes. Related information from referencing
 * tables (e.g. posts, comments, community memberships) may be used by clients
 * to contextualize the user's activity footprint.
 *
 * If the requested member user does not exist or access is denied due to
 * authorization constraints, a 404 or appropriate error response is provided.
 *
 * @param props.connection
 * @param props.memberUserId Unique identifier of the member user to retrieve.
 * @path /communityPlatform/memberUser/memberUsers/:memberUserId
 * @accessor api.functional.communityPlatform.memberUser.memberUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the member user to retrieve. */
    memberUserId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformMemberUser;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/memberUser/memberUsers/:memberUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/memberUser/memberUsers/${encodeURIComponent(props.memberUserId ?? "null")}`;
  export const random = (): ICommunityPlatformMemberUser =>
    typia.random<ICommunityPlatformMemberUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberUserId")(() => typia.assert(props.memberUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
