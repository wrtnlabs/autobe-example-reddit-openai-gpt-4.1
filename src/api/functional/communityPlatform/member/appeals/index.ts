import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAppeal } from "../../../../structures/ICommunityPlatformAppeal";

/**
 * Create a moderation/admin appeal for a specific admin action on behalf of a
 * member.
 *
 * Create a new appeal on behalf of a member against a specific admin action.
 * The new appeal includes references to the member, the admin action record,
 * the appeal status (e.g., 'submitted'), and initial rationale if provided.
 * After the appeal is created, it enters the admin review workflow for handling
 * and resolution. Members may file appeals for actions taken against their own
 * accounts or content, and status is initially set to a submitted or pending
 * value. Subsequent updates/processes are handled via moderation workflow.
 *
 * @param props.connection
 * @param props.body Appeal creation data: member ID, referenced admin action
 *   ID, status, and optional rationale/notes.
 * @path /communityPlatform/member/appeals
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Appeal creation data: member ID, referenced admin action ID, status,
     * and optional rationale/notes.
     */
    body: ICommunityPlatformAppeal.ICreate;
  };
  export type Body = ICommunityPlatformAppeal.ICreate;
  export type Response = ICommunityPlatformAppeal;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/appeals";
  export const random = (): ICommunityPlatformAppeal =>
    typia.random<ICommunityPlatformAppeal>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
