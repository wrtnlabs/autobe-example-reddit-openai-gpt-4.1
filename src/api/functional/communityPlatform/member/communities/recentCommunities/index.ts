import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformRecentCommunity } from "../../../../../structures/ICommunityPlatformRecentCommunity";
import { IPageICommunityPlatformRecentCommunity } from "../../../../../structures/IPageICommunityPlatformRecentCommunity";

/**
 * Add a community to the authenticated member's recent communities list.
 *
 * Adds or updates a community in the member's recent communities list to
 * enhance sidebar navigation and personalized recommendations. This operation
 * references the community_platform_recent_communities schema and operates via
 * the communityId path parameter, identifying the community the user is
 * interacting with. Only authenticated members can add to their own recent
 * communities list, which is automatically refreshed each time the user visits,
 * joins, or interacts meaningfully.
 *
 * The operation ensures that only one recent record per (member, community)
 * pair exists at any time, updating the timestamp if present or creating a new
 * entry if absent. This list is used to display up to five of the user's most
 * recently engaged communities. Membership here does not represent full join
 * status, but enables UI features for quick access.
 *
 * Because the table is used for quick navigation, only members can perform this
 * action, and results are scoped to the current session/authenticated account.
 * This operation does not affect broader memberships or moderation, and is only
 * for usability improvements.
 *
 * @param props.connection
 * @param props.communityId The UUID of the target community to add to recent
 *   communities.
 * @param props.body Payload for recording a recent visit to the community.
 *   Contains only necessary context for the backend to identify the user and
 *   timestamp, which are set server-side.
 * @path /communityPlatform/member/communities/:communityId/recentCommunities
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function addToRecentCommunities(
  connection: IConnection,
  props: addToRecentCommunities.Props,
): Promise<addToRecentCommunities.Response> {
  return true === connection.simulate
    ? addToRecentCommunities.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...addToRecentCommunities.METADATA,
          path: addToRecentCommunities.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace addToRecentCommunities {
  export type Props = {
    /** The UUID of the target community to add to recent communities. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Payload for recording a recent visit to the community. Contains only
     * necessary context for the backend to identify the user and timestamp,
     * which are set server-side.
     */
    body: ICommunityPlatformRecentCommunity.ICreate;
  };
  export type Body = ICommunityPlatformRecentCommunity.ICreate;
  export type Response = ICommunityPlatformRecentCommunity;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/communities/:communityId/recentCommunities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}/recentCommunities`;
  export const random = (): ICommunityPlatformRecentCommunity =>
    typia.random<ICommunityPlatformRecentCommunity>();
  export const simulate = (
    connection: IConnection,
    props: addToRecentCommunities.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: addToRecentCommunities.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List recent communities touched by a member for sidebar/recent view display.
 *
 * Retrieve a filterable, paginated list of recent communities interacted with
 * by a member, from within the context of a specific community. Used for
 * powering recent sidebar widgets, quick community switches, or personal
 * navigation features. The endpoint supports filtering and sorting by recency,
 * optionally filtering by member or activity window. Only authentication is
 * required; returns a pagination result containing summary information of the
 * member's recent communities list. Returns only communities that the member
 * has recently visited or engaged with, not a full membership or global
 * search.
 *
 * @param props.connection
 * @param props.communityId Contextual/community ID for which to list recent
 *   communities.
 * @param props.body Filter terms, paging, and sorting for recent communities
 *   search.
 * @path /communityPlatform/member/communities/:communityId/recentCommunities
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Contextual/community ID for which to list recent communities. */
    communityId: string & tags.Format<"uuid">;

    /** Filter terms, paging, and sorting for recent communities search. */
    body: ICommunityPlatformRecentCommunity.IRequest;
  };
  export type Body = ICommunityPlatformRecentCommunity.IRequest;
  export type Response = IPageICommunityPlatformRecentCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/communities/:communityId/recentCommunities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}/recentCommunities`;
  export const random = (): IPageICommunityPlatformRecentCommunity.ISummary =>
    typia.random<IPageICommunityPlatformRecentCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information on a recent community for
 * context/community/member auditing or display.
 *
 * Get detail on a specific recent community row for a member, for a given
 * community context. The endpoint returns current state and recency information
 * for that recent community entity. Used by user-profile activity displays,
 * audit views, and membership navigation UIs. Only authenticated users may
 * access, and results may be permission-filtered for privacy or moderation
 * needs. If the entry does not exist or permissions are violated, an
 * appropriate error is returned. This endpoint does not allow editing or
 * deletion; used only for state inspection or activity logging.
 *
 * @param props.connection
 * @param props.communityId Current or context community for this recent entry.
 * @param props.recentCommunityId Unique recent community entity ID to retrieve.
 * @path /communityPlatform/member/communities/:communityId/recentCommunities/:recentCommunityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Current or context community for this recent entry. */
    communityId: string & tags.Format<"uuid">;

    /** Unique recent community entity ID to retrieve. */
    recentCommunityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformRecentCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/communities/:communityId/recentCommunities/:recentCommunityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}/recentCommunities/${encodeURIComponent(props.recentCommunityId ?? "null")}`;
  export const random = (): ICommunityPlatformRecentCommunity =>
    typia.random<ICommunityPlatformRecentCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("recentCommunityId")(() =>
        typia.assert(props.recentCommunityId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a community from a member's list of recent communities.
 *
 * Permanently removes the mapping between the member and the community from the
 * recent communities list. This is a hard delete operation as supported by the
 * schema. The operation only affects which communities appear in the user's
 * recent communities sidebar or similar UI components. It does not affect
 * actual community membership or content, and is accessible only to
 * authenticated members. This action cannot be undone.
 *
 * @param props.connection
 * @param props.communityId The UUID of the community being referenced for the
 *   recent record.
 * @param props.recentCommunityId The UUID of the recent_community mapping
 *   record to remove from the member's list.
 * @path /communityPlatform/member/communities/:communityId/recentCommunities/:recentCommunityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseRecentCommunity(
  connection: IConnection,
  props: eraseRecentCommunity.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseRecentCommunity.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseRecentCommunity.METADATA,
          path: eraseRecentCommunity.path(props),
          status: null,
        },
      );
}
export namespace eraseRecentCommunity {
  export type Props = {
    /** The UUID of the community being referenced for the recent record. */
    communityId: string & tags.Format<"uuid">;

    /**
     * The UUID of the recent_community mapping record to remove from the
     * member's list.
     */
    recentCommunityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/communities/:communityId/recentCommunities/:recentCommunityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}/recentCommunities/${encodeURIComponent(props.recentCommunityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseRecentCommunity.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseRecentCommunity.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("recentCommunityId")(() =>
        typia.assert(props.recentCommunityId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
