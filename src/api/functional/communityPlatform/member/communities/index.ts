import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";
export * as memberships from "./memberships";
export * as recentCommunities from "./recentCommunities";
export * as rules from "./rules";

/**
 * Create a new community as an authenticated member or admin.
 *
 * Create a new community with all required and optional metadata: unique name,
 * category, owner (current member), description, and optional
 * logo/banner/rules. Validates strong input constraints for name and required
 * relationships. Only authenticated members or admins may perform this
 * operation, based on business rules. Responds with complete community entity,
 * including related defaults and any generated system fields. Does not allow
 * unauthenticated guests or nonmember operations. Rejects creation if name,
 * category, or other fields do not meet strict validation or business rules.
 * Triggers creation of related rule and membership entries where required.
 *
 * @param props.connection
 * @param props.body Information to create a new community, including required
 *   and optional fields for metadata, categorization, and visual
 *   configuration.
 * @path /communityPlatform/member/communities
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information to create a new community, including required and
     * optional fields for metadata, categorization, and visual
     * configuration.
     */
    body: ICommunityPlatformCommunity.ICreate;
  };
  export type Body = ICommunityPlatformCommunity.ICreate;
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/communities";
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the metadata and settings of an existing sub-community by communityId.
 *
 * Update the metadata of a sub-community (such as description, logo/banner,
 * display title, or category) using this endpoint. Only the community creator
 * or administrators are permitted to modify this information. The operation
 * validates the provided category ID against the allowed categories table and
 * ensures the new metadata follows business rules, such as not exceeding
 * character limits for titles and descriptions, and only referencing valid
 * image URIs. If a user attempts to change an immutable property such as the
 * community name or violates ownership/authorization, an appropriate error is
 * returned. This operation is critical for enabling users to manage their
 * sub-communities as the platform grows while maintaining strict enforcement of
 * naming and category constraints.
 *
 * Community rules (multi-line guidelines) are managed via a separate endpoint
 * and cannot be updated through this operation. The endpoint ensures all
 * changes are properly audited and that UI feeds reflect updated data upon
 * success. Cascade effects (e.g., changing category may update how the
 * community is listed) are handled as per business logic. Errors are surfaced
 * for all violations, and audit logging is triggered for successful updates.
 *
 * @param props.connection
 * @param props.communityId Unique ID of the target community to update.
 * @param props.body Editable fields for a sub-community update (title,
 *   description, logo/banner URIs, category).
 * @path /communityPlatform/member/communities/:communityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique ID of the target community to update. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Editable fields for a sub-community update (title, description,
     * logo/banner URIs, category).
     */
    body: ICommunityPlatformCommunity.IUpdate;
  };
  export type Body = ICommunityPlatformCommunity.IUpdate;
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/communities/:communityId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (logical delete) a sub-community by setting deleted_at timestamp.
 *
 * Soft delete a sub-community by updating its deleted_at timestamp in the
 * database rather than permanently removing the record. This operation
 * preserves historical data for compliance, moderation, and potential
 * restoration. Only the creator of the community or administrators are
 * permitted to perform the soft delete. Related posts, comments, memberships,
 * and rules are likewise marked as deleted according to cascade policies,
 * ensuring no orphaned entities remain. This action is logged for full audit,
 * and the affected community is excluded from standard queries and listings
 * after soft deletion. Attempts to delete a non-existent community or without
 * proper authorization result in an error message. Restoration operations (if
 * supported) may be implemented separately based on business requirements.
 *
 * @param props.connection
 * @param props.communityId Unique ID of the community to soft delete.
 * @path /communityPlatform/member/communities/:communityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique ID of the community to soft delete. */
    communityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
