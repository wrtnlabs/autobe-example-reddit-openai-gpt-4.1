import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSession } from "../../../../structures/ICommunityPlatformSession";
import { IPageICommunityPlatformSession } from "../../../../structures/IPageICommunityPlatformSession";

/**
 * Search and paginate login sessions (current user only) as per the
 * community_platform_sessions table.
 *
 * Retrieve a paginated list of the authenticated user's login sessions. This
 * endpoint allows users (members or admins) to view all of their active and
 * historical login sessions, each representing a device/browser where their
 * account is or was logged in. Sessions include primary metadata such as
 * expiration, creation time, device fingerprint, and invalidation status.
 *
 * Security is enforced such that users can only review their own sessions;
 * admins can review their own admin sessions as well (but not those of others
 * unless a dedicated moderation tool is used). To protect user privacy,
 * cross-account and cross-role access is not permitted.
 *
 * The response is paginated to efficiently support accounts with many active or
 * historical sessions and supports advanced search and filtering parameters,
 * such as device type, expiration date ranges, or session state. This operation
 * is directly tied to the community_platform_sessions schema, which includes
 * relationships to both members and admin accounts as described in the DB
 * schema comments.
 *
 * This API is required for session management UIs (such as log out everywhere),
 * device security reviews, and is referenced in authentication-related
 * documentation and user settings.
 *
 * @param props.connection
 * @param props.body Criteria for searching and paginating sessions (e.g., date
 *   ranges, active/inactive state).
 * @path /communityPlatform/member/sessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria for searching and paginating sessions (e.g., date ranges,
     * active/inactive state).
     */
    body: ICommunityPlatformSession.IRequest;
  };
  export type Body = ICommunityPlatformSession.IRequest;
  export type Response = IPageICommunityPlatformSession;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/sessions";
  export const random = (): IPageICommunityPlatformSession =>
    typia.random<IPageICommunityPlatformSession>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get session metadata and info for a specific session by ID.
 *
 * Retrieve detailed session information for a given sessionId. Includes
 * metadata about the session, associated member or admin, device and browser
 * information, and timestamps. Enables security audits by administrators and
 * allows members to see their own active sessions as part of 'manage account'
 * or 'log out everywhere' features. Ensures that only authorized parties can
 * access session details—members can only see their own, admins see all. Does
 * not expose sensitive token values in response. Records that have been
 * soft-deleted (deleted_at set) are excluded by default unless explicitly
 * requested during auditing.
 *
 * @param props.connection
 * @param props.sessionId The unique identifier of the session record to
 *   retrieve.
 * @path /communityPlatform/member/sessions/:sessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the session record to retrieve. */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSession;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): ICommunityPlatformSession =>
    typia.random<ICommunityPlatformSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update device/session metadata and timestamps for a specific session ID.
 *
 * Update allowed fields on a session by its ID—such as device fingerprint,
 * last-used time, or planned expiration time. Only accessible to the session's
 * owner (member/admin) or an administrator. Used in account management or
 * device session management screens. Mutations are strictly limited to session
 * metadata (device, times); tokens are never returned or modifiable via this
 * method. The endpoint validates session existence, integrity, and ownership
 * prior to updating. The response returns the updated session entity. Supports
 * hard or soft expiration extension, but not token regeneration. If session has
 * been soft-deleted, update is rejected.
 *
 * @param props.connection
 * @param props.sessionId The session record ID to update.
 * @param props.body Fields to update on the session (device info, expiration,
 *   timestamps, not token values).
 * @path /communityPlatform/member/sessions/:sessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The session record ID to update. */
    sessionId: string & tags.Format<"uuid">;

    /**
     * Fields to update on the session (device info, expiration, timestamps,
     * not token values).
     */
    body: ICommunityPlatformSession.IUpdate;
  };
  export type Body = ICommunityPlatformSession.IUpdate;
  export type Response = ICommunityPlatformSession;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/sessions/:sessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): ICommunityPlatformSession =>
    typia.random<ICommunityPlatformSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (invalidate) a session by ID; immediate logout effect.
 *
 * Soft delete (invalidate) a session, marking its deleted_at timestamp.
 * Invalidates the JWT and refresh token for immediate effect. Serves as
 * system/admin-initiated forced logout for user or admin, or user self-logout
 * for a session. Only session owner or admin can perform this deletion. The
 * record remains for audit/logging but cannot be reactivated. Fails if already
 * deleted. This endpoint fulfills logout everywhere/log out current device
 * scenarios in account management flows.
 *
 * @param props.connection
 * @param props.sessionId Unique ID for the session to invalidate/delete.
 * @path /communityPlatform/member/sessions/:sessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique ID for the session to invalidate/delete. */
    sessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
