import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";
export * as reports from "./reports";

/**
 * Create a new comment on a post or as a reply (community_platform_comments).
 *
 * Submit a new comment to a post, or as a reply to another comment (if
 * parent_id provided), as an authenticated member. All comment data must
 * conform to schema: post_id, author_id (from user session), content (2-2000
 * chars, plain text), edited (false on create), parent_id if a reply, and
 * timestamps set by server. Guests cannot comment; error returned on
 * unauthenticated requests. Membership in post's community may be verified as
 * part of business logic. If parent_id is given, must match an existing comment
 * on the same post. Related APIs: PATCH for searching, GET for detail, PUT for
 * updating, DELETE for removal.
 *
 * @param props.connection
 * @param props.body Fields required to create a new comment. Must include at
 *   least post_id and content. parent_id for replies optional.
 * @path /communityPlatform/member/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Fields required to create a new comment. Must include at least
     * post_id and content. parent_id for replies optional.
     */
    body: ICommunityPlatformComment.ICreate;
  };
  export type Body = ICommunityPlatformComment.ICreate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/comments";
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing comment by ID (community_platform_comments).
 *
 * Edit a comment by its ID, restricted to the comment's author or an admin.
 * Payload must contain only the fields allowed by business rules (typically,
 * new content text). Content must remain plain text, 2-2000 chars, no
 * code/scripts. On successful update, the edited flag is set to true,
 * updated_at refreshed, and an audit snapshot is stored. If the comment does
 * not exist or is deleted, returns 404. Edge cases include update attempts by
 * unauthorized users or invalid content input. Related endpoints: PATCH for
 * list, GET for detail, POST for creation, DELETE for removal.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to update.
 * @param props.body Content to update for the comment. Must comply with plain
 *   text rules and length requirements.
 * @path /communityPlatform/member/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Content to update for the comment. Must comply with plain text rules
     * and length requirements.
     */
    body: ICommunityPlatformComment.IUpdate;
  };
  export type Body = ICommunityPlatformComment.IUpdate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment (soft delete, community_platform_comments table).
 *
 * Delete a comment. Only the author or an admin can delete. Guests cannot
 * delete comments. This is a soft delete, setting deleted_at; data remains for
 * audit/policy but is excluded from standard queries. The operation also
 * cascades to delete all descendant (child) comments and associated votes in
 * the thread. A 404 is returned if the comment does not exist or is already
 * deleted. Related endpoints: PATCH (list), GET (detail), POST (create), PUT
 * (update).
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to delete.
 * @path /communityPlatform/member/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the comment to delete. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
