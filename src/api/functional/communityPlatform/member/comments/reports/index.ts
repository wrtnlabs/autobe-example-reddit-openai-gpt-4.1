import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommentReport } from "../../../../../structures/ICommunityPlatformCommentReport";
import { IPageICommunityPlatformCommentReport } from "../../../../../structures/IPageICommunityPlatformCommentReport";

/**
 * Create a new report for a comment (one report per member per comment).
 *
 * Create a new report for a specified comment. Members can file one report per
 * comment, specifying a report reason, type, and optional details. The system
 * validates that duplicate reports are not allowed and ties the created report
 * to the requesting member and comment.
 *
 * Upon creation, the report status is set to the initial moderation value. The
 * response contains the created report, including assigned status and
 * timestamps. Attempts to report nonexistent or already-deleted comments, or to
 * file duplicate reports, return standard error messages.
 *
 * @param props.connection
 * @param props.commentId Identifier of the comment being reported
 * @param props.body Report creation info (reason, type, details) for the
 *   comment report
 * @path /communityPlatform/member/comments/:commentId/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Identifier of the comment being reported */
    commentId: string & tags.Format<"uuid">;

    /** Report creation info (reason, type, details) for the comment report */
    body: ICommunityPlatformCommentReport.ICreate;
  };
  export type Body = ICommunityPlatformCommentReport.ICreate;
  export type Response = ICommunityPlatformCommentReport;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/comments/:commentId/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/comments/${encodeURIComponent(props.commentId ?? "null")}/reports`;
  export const random = (): ICommunityPlatformCommentReport =>
    typia.random<ICommunityPlatformCommentReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filterable list of reports for a specific comment.
 *
 * Retrieve all reports associated with a target comment. This operation
 * supports advanced filtering, searching, and pagination, which is essential
 * for moderation workflows where multiple reports may exist for a single
 * comment. Callers can filter by status, report reason, or other metadata
 * depending on the IRequest parameters.
 *
 * Access to this API is role-restricted: admins can view all reports, while
 * members can view only their own reports. Pagination allows efficient
 * moderation, surfacing the most relevant or critical cases first. The response
 * data includes summary or detailed report information, ideal for moderation
 * UIs or report histories.
 *
 * Error handling ensures that requests for invalid comment IDs, insufficient
 * permissions, or access to non-owned data are rejected with appropriate error
 * messages.
 *
 * @param props.connection
 * @param props.commentId Unique identifier for the comment whose reports should
 *   be listed
 * @param props.body Filter, search, and pagination parameters for comment
 *   report listing
 * @path /communityPlatform/member/comments/:commentId/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the comment whose reports should be listed */
    commentId: string & tags.Format<"uuid">;

    /** Filter, search, and pagination parameters for comment report listing */
    body: ICommunityPlatformCommentReport.IRequest;
  };
  export type Body = ICommunityPlatformCommentReport.IRequest;
  export type Response = IPageICommunityPlatformCommentReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/comments/:commentId/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/comments/${encodeURIComponent(props.commentId ?? "null")}/reports`;
  export const random = (): IPageICommunityPlatformCommentReport.ISummary =>
    typia.random<IPageICommunityPlatformCommentReport.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific comment report by reportId.
 *
 * Returns all fields for a single report instance tied to a specific comment.
 * This operation ensures that the full lifecycle (reason, status, assigned
 * admin, timestamps) and resolution notes are available for review. Security
 * logic restricts access: admins can retrieve any report; members may retrieve
 * reports they filed. The call will fail with appropriate errors for invalid
 * IDs, lack of permission, or attempts to access unrelated resources.
 *
 * This endpoint is typically used in moderation dashboards, admin appeals, and
 * user self-service views for checking report status or dispute workflows.
 *
 * @param props.connection
 * @param props.commentId Identifier of the target comment for which this report
 *   applies
 * @param props.reportId Unique ID of the comment report to retrieve
 * @path /communityPlatform/member/comments/:commentId/reports/:reportId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the target comment for which this report applies */
    commentId: string & tags.Format<"uuid">;

    /** Unique ID of the comment report to retrieve */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommentReport;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/comments/:commentId/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/comments/${encodeURIComponent(props.commentId ?? "null")}/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): ICommunityPlatformCommentReport =>
    typia.random<ICommunityPlatformCommentReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing report for a specific comment.
 *
 * Update the details or status of a given comment report. Admins may use this
 * operation to resolve, escalate, or annotate moderation outcomes. The
 * reporting member may, depending on business logic, edit certain fields on
 * their own unresolved reports.
 *
 * All field-level and state-transition rules are enforced. Attempts to update a
 * report outside allowed transitions, or without proper authority, will return
 * permission or validation errors. Operation returns the updated report.
 *
 * @param props.connection
 * @param props.commentId Identifier of the comment whose report is updated
 * @param props.reportId Unique ID of the report being updated
 * @param props.body Update info for the comment report - such as reason,
 *   status, resolution
 * @path /communityPlatform/member/comments/:commentId/reports/:reportId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the comment whose report is updated */
    commentId: string & tags.Format<"uuid">;

    /** Unique ID of the report being updated */
    reportId: string & tags.Format<"uuid">;

    /**
     * Update info for the comment report - such as reason, status,
     * resolution
     */
    body: ICommunityPlatformCommentReport.IUpdate;
  };
  export type Body = ICommunityPlatformCommentReport.IUpdate;
  export type Response = ICommunityPlatformCommentReport;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/comments/:commentId/reports/:reportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/comments/${encodeURIComponent(props.commentId ?? "null")}/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): ICommunityPlatformCommentReport =>
    typia.random<ICommunityPlatformCommentReport>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete this comment report. This operation allows either the
 * report author (while unresolved) or an admin to delete the report from the
 * database. The deletion is permanent and cannot be undone. Operation is
 * transactional and will return an error for unauthorized or invalid deletion
 * attempts.
 *
 * @param props.connection
 * @param props.commentId ID of the comment to which the report is linked
 * @param props.reportId ID of the report to delete
 * @path /communityPlatform/member/comments/:commentId/reports/:reportId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the comment to which the report is linked */
    commentId: string & tags.Format<"uuid">;

    /** ID of the report to delete */
    reportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/comments/:commentId/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/comments/${encodeURIComponent(props.commentId ?? "null")}/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
