import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../../structures/ICommunityPlatformPost";
export * as snapshots from "./snapshots";
export * as reports from "./reports";

/**
 * Update an existing community post by postId, with strict validation and role
 * checks.
 *
 * This endpoint updates a postâ€™s editable fields (title, body,
 * author_display_name) as defined in the community_platform_posts schema. It
 * requires authentication as the post author or admin, and strictly enforces
 * input validation. The updated content is persisted, timestamps are updated,
 * and a corresponding post_snapshot is generated for version history. The
 * operation does not allow updates to the post's community, author, or unique
 * id. If the target post does not exist, was deleted, or the user is not
 * authorized, a suitable error is returned. This endpoint is fundamental for
 * member-driven content management and editorial workflows in the platform
 * business domain. Other modification actions, such as moderation or post
 * restoration, are handled in separate administrative endpoints. API consumers
 * should ensure that edit/update shapes match the server's required DTO and all
 * business and schema rules.
 *
 * @param props.connection
 * @param props.postId The unique identifier (UUID) of the post to update.
 * @param props.body Fields to update in the specified post, following business
 *   input rules.
 * @path /communityPlatform/admin/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the post to update. */
    postId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the specified post, following business input
     * rules.
     */
    body: ICommunityPlatformPost.IUpdate;
  };
  export type Body = ICommunityPlatformPost.IUpdate;
  export type Response = ICommunityPlatformPost;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityPlatformPost =>
    typia.random<ICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete the specified community post by postId (set deleted_at).
 *
 * This operation soft deletes a specific post on the community platform,
 * setting the 'deleted_at' column of community_platform_posts. Only the post's
 * author or an admin is permitted to perform this action. Soft deletion ensures
 * the post is hidden from the main feed but remains in the database for
 * compliance, audit, and possible future restoration. Comments, votes, and
 * related moderation data must be handled as per cascade rules in business
 * logic (e.g., marking associated comments as deleted). Deleting a
 * non-existent, already-deleted, or unauthorized post results in an error. This
 * endpoint does not support hard deletion or data purging, and is consistent
 * with audit, moderation, and compliance workflows. Soft-deleted posts are not
 * returned by most read/search operations. Restoration (undelete) is performed
 * via different admin endpoints if allowed by business policy.
 *
 * @param props.connection
 * @param props.postId The unique identifier (UUID) of the post to delete (soft
 *   delete).
 * @path /communityPlatform/admin/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) of the post to delete (soft delete). */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
