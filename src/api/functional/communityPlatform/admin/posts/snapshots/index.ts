import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostSnapshot } from "../../../../../structures/ICommunityPlatformPostSnapshot";
import { IPageICommunityPlatformPostSnapshot } from "../../../../../structures/IPageICommunityPlatformPostSnapshot";

/**
 * Paginated, filtered query of snapshots (version history) for a specific post.
 *
 * This endpoint retrieves paginated historical post revision snapshots for a
 * single post, identified by postId. It leverages the
 * community_platform_post_snapshots table for immutable audit/history storage.
 * The API supports advanced querying—pagination (page/limit), optional sorting,
 * and filters as described in the request DTO. Snapshots include details such
 * as title, body, author_display_name (if set), and created_at timestamp for
 * each post revision. Operation is restricted: only the original author or an
 * admin may view revision history. Use cases include author content review,
 * editorial control, and moderator audit checks. Security is enforced to ensure
 * privacy of post edit history—read-only unless admin. Errors are returned for
 * unauthorized view or if post/snapshots are not found. This endpoint does not
 * allow edits, only retrieval. Related operations include creating/updating
 * posts and fetching post details.
 *
 * @param props.connection
 * @param props.postId The unique identifier (UUID) of the post whose snapshots
 *   are listed.
 * @param props.body Pagination and filter parameters to search for post
 *   snapshots.
 * @path /communityPlatform/admin/posts/:postId/snapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The unique identifier (UUID) of the post whose snapshots are listed. */
    postId: string & tags.Format<"uuid">;

    /** Pagination and filter parameters to search for post snapshots. */
    body: ICommunityPlatformPostSnapshot.IRequest;
  };
  export type Body = ICommunityPlatformPostSnapshot.IRequest;
  export type Response = IPageICommunityPlatformPostSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/posts/:postId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots`;
  export const random = (): IPageICommunityPlatformPostSnapshot =>
    typia.random<IPageICommunityPlatformPostSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific snapshot (version) for a post by snapshotId.
 *
 * This endpoint returns the details of a single revision snapshot for a
 * specified post, as identified by both postId and snapshotId. The target is a
 * row from community_platform_post_snapshots containing the historical content
 * of that post revision (title, body, author_display_name, created_at
 * timestamp, and references to author and post at the time of edit). Security
 * rules dictate that only the post's original author or admins may read post
 * history. If not found, an error is returned. This endpoint complements the
 * standard post GET and snapshot list endpoints, supporting granular
 * moderation, rollback, and transparency. It is a read-only operation. Attempts
 * to edit or delete the snapshot directly are not permitted under business
 * logic.
 *
 * @param props.connection
 * @param props.postId The identifier (UUID) of the post the snapshot belongs
 *   to.
 * @param props.snapshotId The unique identifier (UUID) of the snapshot to
 *   retrieve.
 * @path /communityPlatform/admin/posts/:postId/snapshots/:snapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The identifier (UUID) of the post the snapshot belongs to. */
    postId: string & tags.Format<"uuid">;

    /** The unique identifier (UUID) of the snapshot to retrieve. */
    snapshotId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPostSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/posts/:postId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): ICommunityPlatformPostSnapshot =>
    typia.random<ICommunityPlatformPostSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
