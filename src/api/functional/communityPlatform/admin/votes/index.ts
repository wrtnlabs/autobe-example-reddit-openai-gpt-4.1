import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformVote } from "../../../../structures/ICommunityPlatformVote";
import { IPageICommunityPlatformVote } from "../../../../structures/IPageICommunityPlatformVote";

/**
 * Create or update a vote for a post or comment.
 *
 * Create or update a user's vote on a specified post or comment. Only one vote
 * per user-target is retained; submitting a new vote overwrites any prior. The
 * value may be 1 (upvote), -1 (downvote), or 0 (neutral/remove vote state).
 * Voting on own content is forbidden in business logic and checked at request
 * time.
 *
 * Duplicate or conflicting votes are resolved by keeping the latest state.
 * Unauthorized or illogical attempts (e.g., voting on non-existent or own
 * content) result in standard error responses. On success, full vote record is
 * returned.
 *
 * @param props.connection
 * @param props.body Vote creation info: voter, target post/comment, and vote
 *   value
 * @path /communityPlatform/admin/votes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Vote creation info: voter, target post/comment, and vote value */
    body: ICommunityPlatformVote.ICreate;
  };
  export type Body = ICommunityPlatformVote.ICreate;
  export type Response = ICommunityPlatformVote;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/votes";
  export const random = (): ICommunityPlatformVote =>
    typia.random<ICommunityPlatformVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated, filtered vote records across posts and comments.
 *
 * Return a paginated list of votes cast by users on posts and comments. This
 * API supports advanced filters including by voter, post/comment, vote value
 * (up, down, neutral), and timestamp ranges for reviewing platform activity or
 * personal voting history.
 *
 * Access control permits admins to view all voting records, while members may
 * only retrieve their own. Pagination, searching, and sorting allow efficient
 * bulk review or individual account history. Proper error handling is provided
 * for invalid filters or unauthorized access attempts.
 *
 * @param props.connection
 * @param props.body Advanced filter, search, and pagination criteria for votes
 * @path /communityPlatform/admin/votes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Advanced filter, search, and pagination criteria for votes */
    body: ICommunityPlatformVote.IRequest;
  };
  export type Body = ICommunityPlatformVote.IRequest;
  export type Response = IPageICommunityPlatformVote.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/votes";
  export const random = (): IPageICommunityPlatformVote.ISummary =>
    typia.random<IPageICommunityPlatformVote.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed voting record by voteId.
 *
 * Returns a single voting record including full field data: who voted, the
 * target (post or comment), vote value, and creation/update metadata. Useful
 * for per-user or moderation review. Access is restricted by role.
 *
 * Errors are returned for requests with invalid or unauthorized vote IDs.
 * Common usage includes review of individual voting actions or for platform
 * moderation purposes.
 *
 * @param props.connection
 * @param props.voteId The unique identifier (UUID) of the vote record
 * @path /communityPlatform/admin/votes/:voteId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the vote record */
    voteId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformVote;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/votes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): ICommunityPlatformVote =>
    typia.random<ICommunityPlatformVote>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
