import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformGuest } from "../../../../structures/ICommunityPlatformGuest";
import { IPageICommunityPlatformGuest } from "../../../../structures/IPageICommunityPlatformGuest";

/**
 * Admin search and list of all unauthenticated guest user records
 * (community_platform_guests table).
 *
 * Retrieve a paginated, filtered list of guest visitor entities from the
 * platform's analytics data store for auditing and business analysis. Returns
 * guest identifiers, session info, activity periods, and is strictly for admin
 * or analytics review. Business rules enforce anonymization and scope reduction
 * to comply with privacy policies. This is a read-only reporting operation,
 * restricted to administrators, and all activity is audited. Accessible filters
 * may include date ranges, identifiers, or user agent for statistical reporting
 * or abuse investigation use cases.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for guest visitor entity
 *   listing.
 * @path /communityPlatform/admin/guests
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for guest visitor entity listing. */
    body: ICommunityPlatformGuest.IRequest;
  };
  export type Body = ICommunityPlatformGuest.IRequest;
  export type Response = IPageICommunityPlatformGuest;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/guests";
  export const random = (): IPageICommunityPlatformGuest =>
    typia.random<IPageICommunityPlatformGuest>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve an analytics guest record by ID (system use only).
 *
 * Retrieve detailed information for a specific guest record identified by
 * guestId. This entity is used internally for analytics, tracking user
 * interactions, and auditing non-authenticated activity. It is not meant for
 * direct business user-facing queries. Returns analytics data including IP,
 * user agent, identifier, and timestamps, if available. Only system or
 * admin-level users should access this data; business API flows do not expose
 * this entity to members or guests.
 *
 * @param props.connection
 * @param props.guestId Unique identifier for the guest record to look up.
 * @path /communityPlatform/admin/guests/:guestId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the guest record to look up. */
    guestId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformGuest;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): ICommunityPlatformGuest =>
    typia.random<ICommunityPlatformGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
