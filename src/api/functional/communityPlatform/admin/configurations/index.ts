import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformConfiguration } from "../../../../structures/ICommunityPlatformConfiguration";
import { IPageICommunityPlatformConfiguration } from "../../../../structures/IPageICommunityPlatformConfiguration";

/**
 * Create a new configuration parameter (community_platform_configurations
 * table).
 *
 * Create a new system-wide configuration parameter. The operation requires a
 * unique key, value, optional description, and will record creation and audit
 * information. Business logic enforces uniqueness and proper encoding of
 * configuration state. The result is the detailed configuration object, which
 * is immediately available for management and effective throughout platform
 * logic. Only admins may create configuration parameters. The creation event is
 * recorded for audit/compliance and can be used for system-level behavior
 * toggles, policy adjustments, or operational settings.
 *
 * @param props.connection
 * @param props.body Information required to create a new configuration setting,
 *   including key, value, and optional description.
 * @path /communityPlatform/admin/configurations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information required to create a new configuration setting, including
     * key, value, and optional description.
     */
    body: ICommunityPlatformConfiguration.ICreate;
  };
  export type Body = ICommunityPlatformConfiguration.ICreate;
  export type Response = ICommunityPlatformConfiguration;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/configurations";
  export const random = (): ICommunityPlatformConfiguration =>
    typia.random<ICommunityPlatformConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin search and list of all configuration settings
 * (community_platform_configurations table).
 *
 * Retrieve a filtered, paginated list of system configuration parameters from
 * the platform. This operation supports complex querying and sorting over all
 * configuration settings, enabling administrative review, audit trail
 * inspection, and system-wide settings management. Returned results include
 * both active and soft-deleted settings, depending on query filters. Only admin
 * users are permitted to access this sensitive endpoint to ensure proper
 * configuration governance. Supports search by key, date range, and status.
 * Business logic ensures confidential information is excluded unless
 * authorized.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination parameters for
 *   configuration settings query.
 * @path /communityPlatform/admin/configurations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, search, and pagination parameters for configuration
     * settings query.
     */
    body: ICommunityPlatformConfiguration.IRequest;
  };
  export type Body = ICommunityPlatformConfiguration.IRequest;
  export type Response = IPageICommunityPlatformConfiguration;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/configurations";
  export const random = (): IPageICommunityPlatformConfiguration =>
    typia.random<IPageICommunityPlatformConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific system configuration parameter
 * (community_platform_configurations table).
 *
 * Retrieve the full details of a single system configuration setting, including
 * its key, value, description, and historical status. This endpoint is
 * restricted to admin users and returns information even if the configuration
 * has been soft-deleted. Intended for audit, compliance, or troubleshooting
 * scenarios. Sensitive or confidential values are only displayed if authorized.
 * Lookup is performed by the unique configuration ID. Access events are audit
 * logged.
 *
 * @param props.connection
 * @param props.configurationId Unique identifier of the system configuration
 *   parameter to retrieve.
 * @path /communityPlatform/admin/configurations/:configurationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the system configuration parameter to retrieve. */
    configurationId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformConfiguration;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): ICommunityPlatformConfiguration =>
    typia.random<ICommunityPlatformConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a system configuration parameter (community_platform_configurations
 * table).
 *
 * Update an existing configuration parameter's key, value, or description. Only
 * admin users are allowed to perform updates, and all changes are fully audit
 * logged. The operation ensures configuration key uniqueness and retains
 * historical versions for auditing. Immediately reflects changes throughout the
 * system and enables safe rollout of business, moderation, or UI policy
 * adjustments. Lookup is by configuration ID. Result includes the full, updated
 * configuration object.
 *
 * @param props.connection
 * @param props.configurationId Unique identifier of the configuration parameter
 *   to update.
 * @param props.body Payload of updated configuration properties, including key,
 *   value, and optional description.
 * @path /communityPlatform/admin/configurations/:configurationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the configuration parameter to update. */
    configurationId: string & tags.Format<"uuid">;

    /**
     * Payload of updated configuration properties, including key, value,
     * and optional description.
     */
    body: ICommunityPlatformConfiguration.IUpdate;
  };
  export type Body = ICommunityPlatformConfiguration.IUpdate;
  export type Response = ICommunityPlatformConfiguration;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/configurations/:configurationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): ICommunityPlatformConfiguration =>
    typia.random<ICommunityPlatformConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a system configuration parameter
 * (community_platform_configurations table).
 *
 * Remove a configuration parameter from the system by issuing a soft delete
 * (update 'deleted_at') operation. The configuration is excluded from future
 * effective system settings, but the record is retained for audit and possible
 * rollback. Only admins may delete configurations. All actions are tracked for
 * compliance and auditability. Soft-deleted configurations are visible for
 * administrative queries but do not affect platform logic.
 *
 * @param props.connection
 * @param props.configurationId Unique identifier of the configuration parameter
 *   to soft delete.
 * @path /communityPlatform/admin/configurations/:configurationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the configuration parameter to soft delete. */
    configurationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
