import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSearchQuery } from "../../../../../structures/ICommunityPlatformSearchQuery";
import { IPageICommunityPlatformSearchQuery } from "../../../../../structures/IPageICommunityPlatformSearchQuery";

/**
 * Search and retrieve a paginated/filterable list of search query logs (admin
 * only).
 *
 * Retrieve a paginated, filterable list of search query logs. Results may be
 * filtered by date/time, performer (member/admin), IP/context, query text
 * (full-text search), search_type (post/community/comment), and sorted by
 * performed_at or query. Used for auditing, investigation, trend analysis, and
 * abuse/compliance reporting. Sensitive endpoint, not exposed to regular users.
 * Pagination and advanced query support required for high-volume logs. May be
 * integrated with system dashboard analytics.
 *
 * @param props.connection
 * @param props.body Search filters, pagination, sorting, and advanced query
 *   parameters for search query log retrieval.
 * @path /communityPlatform/admin/search/queries
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search filters, pagination, sorting, and advanced query parameters
     * for search query log retrieval.
     */
    body: ICommunityPlatformSearchQuery.IRequest;
  };
  export type Body = ICommunityPlatformSearchQuery.IRequest;
  export type Response = IPageICommunityPlatformSearchQuery.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/search/queries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/search/queries";
  export const random = (): IPageICommunityPlatformSearchQuery.ISummary =>
    typia.random<IPageICommunityPlatformSearchQuery.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific search query log record by its ID (admin only).
 *
 * Retrieve the complete event record for a single search query log, specified
 * by its unique ID. Includes all event metadata: searcher (member/admin),
 * search text, search type, context, IP, and full timing/audit data. This
 * operation is primarily used for admin review, compliance, abuse
 * investigations, and log forensics. As search queries are system-generated,
 * this endpoint is not for regular user business needs, and access is
 * restricted to appropriate roles. Connected reporting/analytics endpoints may
 * aggregate this data for dashboards.
 *
 * @param props.connection
 * @param props.searchQueryId Unique identifier of the search query log record.
 * @path /communityPlatform/admin/search/queries/:searchQueryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the search query log record. */
    searchQueryId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSearchQuery;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/search/queries/:searchQueryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/search/queries/${encodeURIComponent(props.searchQueryId ?? "null")}`;
  export const random = (): ICommunityPlatformSearchQuery =>
    typia.random<ICommunityPlatformSearchQuery>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("searchQueryId")(() => typia.assert(props.searchQueryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
