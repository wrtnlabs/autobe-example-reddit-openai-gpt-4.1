import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformBannedWord } from "../../../../structures/ICommunityPlatformBannedWord";
import { IPageICommunityPlatformBannedWord } from "../../../../structures/IPageICommunityPlatformBannedWord";

/**
 * Create a new banned word or phrase for platform content moderation.
 *
 * Allows privileged admin users to insert a new banned word or phrase for
 * enforcement throughout the platform. Each banned word must have a unique
 * phrase and may be assigned a moderation category for reporting. Words can be
 * enabled or disabled for moderation, providing temporary control over
 * enforcement without database deletion.
 *
 * Applications include content moderation automation, report management, and
 * rapid ban/unban workflow. All entries are tracked for audit and enforcement.
 * Operation fails with a conflict if the phrase already exists in the system.
 * Closely related endpoints include listing, detail, update (enable/disable),
 * and delete for banned words.
 *
 * @param props.connection
 * @param props.body Data required to create a new banned word (phrase,
 *   category, enabled state)
 * @path /communityPlatform/admin/bannedWords
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data required to create a new banned word (phrase, category, enabled
     * state)
     */
    body: ICommunityPlatformBannedWord.ICreate;
  };
  export type Body = ICommunityPlatformBannedWord.ICreate;
  export type Response = ICommunityPlatformBannedWord;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/bannedWords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/bannedWords";
  export const random = (): ICommunityPlatformBannedWord =>
    typia.random<ICommunityPlatformBannedWord>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated, filterable list of all banned words.
 *
 * Enables admin users to browse and audit the complete set of banned words or
 * phrases in the content moderation system. Filtering options include search by
 * phrase text, filtering by category (profanity, spam, etc.), and filtering by
 * whether the phrase is currently enabled or disabled for enforcement.
 *
 * Paged results are returned with metadata, phrase text, category, status
 * (enabled), and audit timestamps. Administrative access is mandatory, as
 * changing the banned words list directly impacts user-generated content
 * moderation. Soft-deleted entries are omitted by default. Related APIs exist
 * for creating, updating, and deleting banned word entries.
 *
 * @param props.connection
 * @param props.body Filter/search, pagination, and sort options for banned
 *   words
 * @path /communityPlatform/admin/bannedWords
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter/search, pagination, and sort options for banned words */
    body: ICommunityPlatformBannedWord.IRequest;
  };
  export type Body = ICommunityPlatformBannedWord.IRequest;
  export type Response = IPageICommunityPlatformBannedWord.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/bannedWords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/bannedWords";
  export const random = (): IPageICommunityPlatformBannedWord.ISummary =>
    typia.random<IPageICommunityPlatformBannedWord.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific banned word moderation entry by UUID.
 *
 * Returns full details for an individual banned word, including phrase,
 * moderation category, enabled/disabled flag, and all audit timestamps. Soft
 * deleted records are found only using privileged or audit/recovery-specific
 * requests, and enabled==false entries may be omitted from normal enforcement.
 *
 * Usually used in admin-facing review or update UIs. Related endpoints include
 * update, create, list, and delete for banned word management.
 *
 * @param props.connection
 * @param props.bannedWordId The UUID of the banned word entry to retrieve
 * @path /communityPlatform/admin/bannedWords/:bannedWordId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID of the banned word entry to retrieve */
    bannedWordId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformBannedWord;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/bannedWords/:bannedWordId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/bannedWords/${encodeURIComponent(props.bannedWordId ?? "null")}`;
  export const random = (): ICommunityPlatformBannedWord =>
    typia.random<ICommunityPlatformBannedWord>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bannedWordId")(() => typia.assert(props.bannedWordId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a banned word or phrase for moderation purposes
 * (community_platform_banned_words table).
 *
 * Update the details of an existing banned word or phrase as part of the
 * system's content moderation dictionary. This operation supports modifying the
 * phrase, toggling its enabled state, or updating its category. Strict
 * validation ensures phrase uniqueness and correct category association. Only
 * admin users can execute this operation, and all changes are audit logged for
 * moderation traceability. Modifications may take immediate effect, impacting
 * real-time content submissions and moderation sweeps. If the phrase is
 * updated, the new phrase is checked for duplicates before applying changes.
 * Related moderation features reference this data live. All activities are
 * recorded in the audit logs for review.
 *
 * @param props.connection
 * @param props.bannedWordId Unique identifier of the banned word or phrase to
 *   update.
 * @param props.body Payload for updating the banned word or phrase, including
 *   new phrase value, category, and enabled state.
 * @path /communityPlatform/admin/bannedWords/:bannedWordId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the banned word or phrase to update. */
    bannedWordId: string & tags.Format<"uuid">;

    /**
     * Payload for updating the banned word or phrase, including new phrase
     * value, category, and enabled state.
     */
    body: ICommunityPlatformBannedWord.IUpdate;
  };
  export type Body = ICommunityPlatformBannedWord.IUpdate;
  export type Response = ICommunityPlatformBannedWord;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/bannedWords/:bannedWordId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/bannedWords/${encodeURIComponent(props.bannedWordId ?? "null")}`;
  export const random = (): ICommunityPlatformBannedWord =>
    typia.random<ICommunityPlatformBannedWord>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bannedWordId")(() => typia.assert(props.bannedWordId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a banned word or phrase from moderation list
 * (community_platform_banned_words table).
 *
 * Remove a banned word or phrase from the active moderation dictionary by
 * performing a soft delete (setting 'deleted_at'). This disables enforcement,
 * but preserves the item for auditing. Only admins may execute the removal. The
 * system ensures safe exclusion from moderation workflows and search
 * validation. Deleted records are retained for history and potential
 * restoration. The action is recorded in audit logs for compliance and
 * investigative transparency.
 *
 * @param props.connection
 * @param props.bannedWordId Unique identifier of the banned word or phrase to
 *   remove.
 * @path /communityPlatform/admin/bannedWords/:bannedWordId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the banned word or phrase to remove. */
    bannedWordId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/bannedWords/:bannedWordId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/bannedWords/${encodeURIComponent(props.bannedWordId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bannedWordId")(() => typia.assert(props.bannedWordId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
