import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminAction } from "../../../../structures/ICommunityPlatformAdminAction";
import { IPageICommunityPlatformAdminAction } from "../../../../structures/IPageICommunityPlatformAdminAction";

/**
 * Create a new admin/moderation action in the platform's audit trails.
 *
 * Logs a new administrative or moderation action to support full audit trails
 * and regulatory transparency. Admin users must supply the action type,
 * affected business entity and ID, rationale, and outcome. The operation
 * ensures all necessary relationships are respected, and audit information is
 * attached, supporting both business reporting and moderation compliance. Only
 * admin users can submit such records.
 *
 * @param props.connection
 * @param props.body Information required to create a new admin/moderation
 *   action record.
 * @path /communityPlatform/admin/adminActions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new admin/moderation action record. */
    body: ICommunityPlatformAdminAction.ICreate;
  };
  export type Body = ICommunityPlatformAdminAction.ICreate;
  export type Response = ICommunityPlatformAdminAction;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/adminActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/adminActions";
  export const random = (): ICommunityPlatformAdminAction =>
    typia.random<ICommunityPlatformAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of admin/moderation actions with advanced filters.
 *
 * Returns a paginated, filterable list of all admin actions executed on the
 * platform for monitoring and compliance purposes. Filtering is available by
 * admin ID, target entity type/ID, action type, date range, and action result.
 * Results are paginated and sorted for dashboard or audit tool consumption.
 * This endpoint is critical for transparency and enables audits of all
 * moderation/admin activity.
 *
 * @param props.connection
 * @param props.body Admin action search and pagination/filter parameters.
 * @path /communityPlatform/admin/adminActions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Admin action search and pagination/filter parameters. */
    body: ICommunityPlatformAdminAction.IRequest;
  };
  export type Body = ICommunityPlatformAdminAction.IRequest;
  export type Response = IPageICommunityPlatformAdminAction;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/adminActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/adminActions";
  export const random = (): IPageICommunityPlatformAdminAction =>
    typia.random<IPageICommunityPlatformAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific admin/moderation action by ID.
 *
 * Fetch all available details regarding a specific admin/moderation action for
 * auditing or dispute review. Administrators can examine the action type,
 * affected entity, rationale, and outcome, supporting regulatory and
 * operational compliance. The operation uses the action's unique ID and
 * enforces that only admin accounts can retrieve this sensitive audit data.
 *
 * @param props.connection
 * @param props.adminActionId Unique ID of the admin action record to retrieve.
 * @path /communityPlatform/admin/adminActions/:adminActionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the admin action record to retrieve. */
    adminActionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAdminAction;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/adminActions/:adminActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): ICommunityPlatformAdminAction =>
    typia.random<ICommunityPlatformAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing admin/moderation action record by ID.
 *
 * Allows updating an existing admin action record, such as supplying additional
 * resolution notes or revising the moderation rationale. Used by admins to
 * ensure audit records are accurate, complete, and reflect the real resolution
 * to moderation cases. Admins may update only records they are responsible for
 * or have permission to modify. All updates are audited and appended to the
 * compliance trail.
 *
 * @param props.connection
 * @param props.adminActionId Unique ID of the admin/moderation action record to
 *   update.
 * @param props.body Updated information for the admin/moderation action record.
 * @path /communityPlatform/admin/adminActions/:adminActionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique ID of the admin/moderation action record to update. */
    adminActionId: string & tags.Format<"uuid">;

    /** Updated information for the admin/moderation action record. */
    body: ICommunityPlatformAdminAction.IUpdate;
  };
  export type Body = ICommunityPlatformAdminAction.IUpdate;
  export type Response = ICommunityPlatformAdminAction;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/adminActions/:adminActionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): ICommunityPlatformAdminAction =>
    typia.random<ICommunityPlatformAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard-delete an admin/moderation action from the audit log.
 *
 * Removes an existing admin action record from the audit log. This is intended
 * for critical error correction, audit remediation, or appeal scenarios only.
 * Super-admin or designated audit staff access is required under strict
 * business rules to prevent tampering. This action is logged and deeply
 * reviewed for compliance reasons.
 *
 * @param props.connection
 * @param props.adminActionId Unique ID of the admin action record to delete.
 * @path /communityPlatform/admin/adminActions/:adminActionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique ID of the admin action record to delete. */
    adminActionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/adminActions/:adminActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
