import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAuditLog } from "../../../../structures/ICommunityPlatformAuditLog";
import { IPageICommunityPlatformAuditLog } from "../../../../structures/IPageICommunityPlatformAuditLog";

/**
 * Paginated search of moderation and admin audit logs for compliance review.
 *
 * Returns a paginated, filterable list of all audit logs covering moderation,
 * admin, and business-sensitive events. Filtering parameters and pagination
 * enable incident review for compliance, business reporting, and regulatory
 * audits. Each entry links to both admin and member where relevant, as well as
 * impacted entities. Used by forensic and compliance staff to examine the full
 * trace of platform actions.
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for searching
 *   moderation/admin audit logs.
 * @path /communityPlatform/admin/auditLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination criteria for searching moderation/admin audit
     * logs.
     */
    body: ICommunityPlatformAuditLog.IRequest;
  };
  export type Body = ICommunityPlatformAuditLog.IRequest;
  export type Response = IPageICommunityPlatformAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/auditLogs";
  export const random = (): IPageICommunityPlatformAuditLog =>
    typia.random<IPageICommunityPlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a community platform audit log entry by its ID from the audit log
 * table.
 *
 * This operation retrieves a full audit log record by its unique identifier.
 * The audit log includes details such as the admin or member involved, the type
 * of event (e.g., admin_action, escalation, data_access), the entity type and
 * ID impacted, complete metadata in JSON format, the result of the action, and
 * the timestamp. Audit logs are read-only and not user-editable. Access to this
 * endpoint is restricted to admin users for purposes of compliance, historical
 * traceability, and legal audit obligations. Related operations include listing
 * audit logs for a date range and fetching all actions taken by a specific
 * admin or on a specific entity. Care must be taken to ensure sensitive
 * metadata is handled according to policy.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier of the target audit log entry to
 *   fetch.
 * @path /communityPlatform/admin/auditLogs/:auditLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target audit log entry to fetch. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): ICommunityPlatformAuditLog =>
    typia.random<ICommunityPlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
