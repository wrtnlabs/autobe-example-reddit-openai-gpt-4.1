import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAppeal } from "../../../../structures/ICommunityPlatformAppeal";
import { IPageICommunityPlatformAppeal } from "../../../../structures/IPageICommunityPlatformAppeal";

/**
 * Search and retrieve a paginated, filterable list of moderation/admin appeals.
 *
 * Retrieve a paginated, filterable list of moderation or admin action appeals.
 * Members may view their own appeals, while admins have access to all appeals
 * for processing, review, and analytics. Supports filtering by appeal status
 * (submitted, under_review, resolved, rejected), member, admin, admin action,
 * and decision reason text. Used to administer and process appeals workflows,
 * track appeal status, and support transparency in moderation. Includes support
 * for pagination, sorting by updated_at or created_at, and searching by text in
 * decision rationale. Tied closely to the admin/moderation subsystem, and
 * integrated into the main dispute mediation flow.
 *
 * @param props.connection
 * @param props.body Request parameters specifying search filters (status,
 *   member, admin), text query, pagination, and sorting model for searching
 *   moderation/admin appeals.
 * @path /communityPlatform/admin/appeals
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters specifying search filters (status, member, admin),
     * text query, pagination, and sorting model for searching
     * moderation/admin appeals.
     */
    body: ICommunityPlatformAppeal.IRequest;
  };
  export type Body = ICommunityPlatformAppeal.IRequest;
  export type Response = IPageICommunityPlatformAppeal.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/appeals";
  export const random = (): IPageICommunityPlatformAppeal.ISummary =>
    typia.random<IPageICommunityPlatformAppeal.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single moderation/admin appeal record by ID.
 *
 * Retrieve a detailed record of a specific moderation/admin appeal including
 * its status, rationale, related admin action, decision reasoning, and the full
 * update and creation history. May be used by members (if they are the
 * appellant) and by admins (for all appeals) to track and resolve issues
 * arising from moderation or admin actions. Ensures transparency, due process,
 * and auditability in the dispute management workflow. Responds with all fields
 * from the corresponding appeals table entry.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal to retrieve.
 * @path /communityPlatform/admin/appeals/:appealId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the appeal to retrieve. */
    appealId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAppeal;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): ICommunityPlatformAppeal =>
    typia.random<ICommunityPlatformAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing moderation/admin appeal record by ID.
 *
 * Modify or update a moderation/admin appeal record, identified by a unique
 * appeal ID. Updates supported include changing the appeal status, assigning an
 * admin reviewer, and adding or updating the admin's decision rationale. This
 * operation is permissioned to admins as part of the dispute/appeal workflow.
 * Each update is fully audit-logged, and only authorized changes by appropriate
 * roles are permitted. The operation supports business process adherence,
 * dispute transparency, and appeal closure/finality.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal to update.
 * @param props.body Updated fields for the appeal record, including status,
 *   assigned admin, rationale, or other updatable fields.
 * @path /communityPlatform/admin/appeals/:appealId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the appeal to update. */
    appealId: string & tags.Format<"uuid">;

    /**
     * Updated fields for the appeal record, including status, assigned
     * admin, rationale, or other updatable fields.
     */
    body: ICommunityPlatformAppeal.IUpdate;
  };
  export type Body = ICommunityPlatformAppeal.IUpdate;
  export type Response = ICommunityPlatformAppeal;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/appeals/:appealId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): ICommunityPlatformAppeal =>
    typia.random<ICommunityPlatformAppeal>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase a moderation/admin appeal by ID.
 *
 * Permanently remove an appeal record by its unique ID. This operation is
 * reserved for appeals that were filed in error, invalid, withdrawn, or need to
 * be removed for compliance reasons. No recovery is possibleâ€”this directly
 * deletes the entry from storage. Admin permissions are strictly enforced. It
 * is recommended to maintain logs of erasures for compliance and historic
 * reference purposes.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal to erase.
 * @path /communityPlatform/admin/appeals/:appealId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the appeal to erase. */
    appealId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
