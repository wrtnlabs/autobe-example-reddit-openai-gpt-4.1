import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_member_password_reset_initiate } from "../../../../../../providers/post__auth_member_password_reset_initiate";

import { ICommunityPlatformMember } from "../../../../../../api/structures/ICommunityPlatformMember";

@Controller("/auth/member/password/reset/initiate")
export class AuthMemberPasswordResetInitiateController {
  /**
   * Initiate password reset workflow for member accounts
   * (community_platform_members, community_platform_password_resets).
   *
   * This API operation initiates a password reset process for 'member' user
   * accounts, referencing the 'community_platform_password_resets' and
   * 'community_platform_members' tables in the Prisma schema.
   *
   * Upon receiving a member's email address, the system searches for an active
   * and undeleted user; if found, a single-use, cryptographically secure
   * 'reset_token' is generated, stored with an expiration in the password
   * resets table, and associated with the member. The system then sends an
   * email to the provided address with reset instructions, regardless of
   * whether the address is found, to prevent information leakage.
   *
   * No password is changed at this stageâ€”the endpoint only starts the reset
   * process. If a request is made for a non-existent, inactive, or deleted
   * email, a generic success response is returned, never revealing account
   * existence. The member uses the reset token and a subsequent endpoint to
   * complete password reset.
   *
   * Audit trails for this workflow are maintained via the password resets and
   * related session management logic. This operation is typically followed by
   * the 'resetPasswordComplete' operation for updating the password using the
   * token.
   *
   * @param connection
   * @param body Member password reset request (email address).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async initiatePasswordReset(
    @TypedBody()
    body: ICommunityPlatformMember.IPasswordResetInitiate,
  ): Promise<ICommunityPlatformMember.IPasswordResetInitiateResponse> {
    try {
      return await post__auth_member_password_reset_initiate({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
