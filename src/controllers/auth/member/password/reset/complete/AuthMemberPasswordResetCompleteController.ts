import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_member_password_reset_complete } from "../../../../../../providers/post__auth_member_password_reset_complete";

import { ICommunityPlatformMember } from "../../../../../../api/structures/ICommunityPlatformMember";

@Controller("/auth/member/password/reset/complete")
export class AuthMemberPasswordResetCompleteController {
  /**
   * Complete password reset for member account using one-time token
   * (community_platform_password_resets).
   *
   * This API operation finalizes the password reset process for 'member' users
   * by accepting a valid one-time reset token and a new password, mapping to
   * the 'community_platform_password_resets' and 'community_platform_members'
   * tables.
   *
   * Upon receiving a reset token and new password (the latter to be securely
   * hashed), the system validates that the reset token exists, has not been
   * used, is not expired, and is associated with an active member. On success,
   * the member's 'password_hash' is updated accordingly, the reset record is
   * marked as used, and all prior access/refresh tokens (sessions) for the user
   * are invalidated for security.
   *
   * If the token is invalid, expired, or has already been used, an appropriate
   * error is returned. If successful, the endpoint issues a response confirming
   * that the password was changed. The member must log in again with the new
   * password; no JWT tokens are issued here. Enforces all current password
   * complexity rules as per business specifications.
   *
   * @param connection
   * @param body Password reset confirmation (reset token, new password).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async completePasswordReset(
    @TypedBody()
    body: ICommunityPlatformMember.IPasswordResetComplete,
  ): Promise<ICommunityPlatformMember.IPasswordResetCompleteResponse> {
    try {
      return await post__auth_member_password_reset_complete({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
