import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_memberUser_join } from "../../../providers/post__auth_memberUser_join";
import { post__auth_memberUser_login } from "../../../providers/post__auth_memberUser_login";
import { post__auth_memberUser_refresh } from "../../../providers/post__auth_memberUser_refresh";

import { ICommunityPlatformMemberUser } from "../../../api/structures/ICommunityPlatformMemberUser";

@Controller("/auth/memberUser")
export class AuthMemberuserController {
  /**
   * Register new memberUser accounts using unique email and password; creates
   * user and issues tokens (community_platform_memberusers).
   *
   * This endpoint enables registration of new memberUser accounts by capturing
   * and validating email and password inputs, linking the account to a
   * credential, and recording the user's initial display name if provided.
   * Registration results in credential creation in the
   * community_platform_user_credentials table and an account entry in
   * community_platform_memberusers. The system performs uniqueness checks for
   * email addresses, hashes passwords securely, and sets the user's status
   * (such as 'active'). Audit log entries and session creation are triggered.
   * Only non-authenticated users can perform registration. Security is ensured
   * by not allowing duplicate email addresses and never exposing the password
   * hash. Registration triggers issue of JWT access and refresh tokens (see the
   * session model). Related to login (for authentication), and refresh (for
   * token renewal). Errors include duplicate email and password policy
   * violations.
   *
   * @param connection
   * @param body Registration payload with unique email, strong password, and
   *   optional display name.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ICommunityPlatformMemberUser.IJoin,
  ): Promise<ICommunityPlatformMemberUser.IAuthorized> {
    try {
      return await post__auth_memberUser_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate memberUser by email/password and issue new JWT tokens
   * (community_platform_memberusers).
   *
   * This endpoint allows existing memberUser accounts to authenticate using
   * email and password credentials. Community_platform_user_credentials is used
   * for secure password hash validation, and community_platform_memberusers is
   * checked for active status and lack of deletion. Upon successful
   * authentication, new JWT access and refresh tokens are issued, tracked in
   * community_platform_sessions. Login events are audit-logged with IP/device
   * information. Validation ensures credentials match; status='active' and
   * deleted_at=null are required. Fails with generic error on wrong credentials
   * or suspended accounts. Security measures: password hash is never exposed,
   * and brute-force detection logic should be enforced by implementation.
   * Related operations: join (registration), refresh (token renewal), and
   * logout. Common error conditions: invalid credentials, account not active,
   * soft or hard deleted users.
   *
   * @param connection
   * @param body Login payload with existing memberUser email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ICommunityPlatformMemberUser.ILogin,
  ): Promise<ICommunityPlatformMemberUser.IAuthorized> {
    try {
      return await post__auth_memberUser_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for a memberUser via valid refresh token
   * (community_platform_sessions).
   *
   * This refresh endpoint enables active memberUser accounts to renew their JWT
   * access and refresh tokens using a valid, non-revoked, and unexpired refresh
   * token previously issued at login or registration. Session management and
   * validation occur in community_platform_sessions. If validation passes, the
   * user is granted a new token pair and updated session expiry. Audit logs
   * record refresh event including token and device info. If the token is
   * invalid, expired, or the account is suspended/deleted, the request fails.
   * Security is paramount: only valid active sessions may be refreshed. Related
   * endpoints: join (registration), login (credential authentication), and
   * logout (token/session invalidation). Errors returned for token expiry,
   * invalid session, or account status issues.
   *
   * @param connection
   * @param body Refresh token payload as issued in prior session.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ICommunityPlatformMemberUser.IRefresh,
  ): Promise<ICommunityPlatformMemberUser.IAuthorized> {
    try {
      return await post__auth_memberUser_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
