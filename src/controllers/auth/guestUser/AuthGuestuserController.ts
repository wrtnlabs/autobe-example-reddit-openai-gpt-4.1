import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_guestUser_join } from "../../../providers/post__auth_guestUser_join";
import { post__auth_guestUser_refresh } from "../../../providers/post__auth_guestUser_refresh";

import { ICommunityPlatformGuestUser } from "../../../api/structures/ICommunityPlatformGuestUser";

@Controller("/auth/guestUser")
export class AuthGuestuserController {
  /**
   * Guest user registration—create a guest session and issue a temporary token
   * (community_platform_guestusers).
   *
   * Initiates guest user registration, creating a row in
   * 'community_platform_guestusers' and issuing a temporary token, with no PII
   * stored by business logic or Prisma schema. Guest accounts provide only
   * browsing and analytics; they lack login credentials and do not have email,
   * password, or display name fields. The operation is public
   * (unauthenticated); it is designed to be invoked when a new visitor browses
   * the community platform or when browser/session state is lost. This
   * registration action creates a UUID and optional session_signature for the
   * guest, recording timestamps for first/last seen, with null 'deleted_at'.
   *
   * There is no credential authentication: guests may re-register or resume
   * without restrictions. Session tokens issued are short-lived and grant
   * access solely for anonymous browsing/searching (posting, voting, joining,
   * or editing require upgrading to memberUser). No PII is persisted—only
   * opaque session links for metrics. This operation is strictly
   * non-destructive (idempotent). Security risk is minimal since guest actions
   * are highly constrained by business logic and enforced in every feature
   * layer.
   *
   * Interacts with 'community_platform_guestusers' and is referenced by all
   * analytics and log tables related to session tracking. Related operations
   * include 'refresh' (for extending guest sessions), and all upgrade/auth
   * flows for registered users. Member and admin actions are explicitly blocked
   * for guests.
   *
   * Client may call this endpoint multiple times; each executes independently
   * with no conflict. For transitioning to memberUser, use the member
   * registration flow, which requires email, password, and explicit
   * authentication, not supported here.
   *
   * The response DTO is ICommunityPlatformGuestUser.IAuthorized: contains a
   * temporary token, expiry, and assigned guest UUID, exactly as provisioned by
   * platform authentication business logic.
   *
   * @param connection
   * @param body Guest session registration body. No user PII; only optional
   *   opaque session_signature for session re-linking. Used strictly for
   *   session analytics.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ICommunityPlatformGuestUser.IJoin,
  ): Promise<ICommunityPlatformGuestUser.IAuthorized> {
    try {
      return await post__auth_guestUser_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Guest session token refresh—extend guest access with a new temporary token
   * (community_platform_guestusers).
   *
   * This operation refreshes a temporary access token for a guest account,
   * based on the original guest token issued at registration. It ensures that
   * the linked guest account entry in 'community_platform_guestusers' is still
   * active (deleted_at is null) and not expired or revoked. Session renewal
   * returns a new signed JWT with a refreshed expiry. No credentials are used
   * since guest accounts contain no personal information; instead, only the
   * temporary token is validated. Guests cannot refresh their token if their
   * session has been deleted. Each refresh produces a new short-lived token,
   * permitting continued anonymous access.
   *
   * @param connection
   * @param body Request payload with the current guest user's token (from prior
   *   join/refresh calls).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ICommunityPlatformGuestUser.IRefresh,
  ): Promise<ICommunityPlatformGuestUser.IAuthorized> {
    try {
      return await post__auth_guestUser_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
