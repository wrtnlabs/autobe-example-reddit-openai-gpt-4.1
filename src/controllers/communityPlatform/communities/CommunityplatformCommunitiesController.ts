import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_communities } from "../../../providers/patch__communityPlatform_communities";
import { get__communityPlatform_communities_$communityId } from "../../../providers/get__communityPlatform_communities_$communityId";

import { IPageICommunityPlatformCommunity } from "../../../api/structures/IPageICommunityPlatformCommunity";
import { ICommunityPlatformCommunity } from "../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/communities")
export class CommunityplatformCommunitiesController {
  /**
   * Search and paginate sub-communities (community_platform_communities).
   *
   * This API operation returns a paginated, filterable list of sub-communities
   * matching complex search conditions, utilizing the
   * community_platform_communities Prisma schema. It underpins Explore, search,
   * and main home feed navigation flows, supporting filters by category, owner,
   * activity, and case-insensitive name searching.
   *
   * Results reflect the full business validation logic for unique naming,
   * category validity, and display ordering. Pagination and sorting are always
   * implemented based on platform standards (default by newest, optionally by
   * top, etc.).
   *
   * This endpoint is accessible publicly (for exploration) and with enhanced
   * filters for authenticated users. It forbids exposure of deleted or pending
   * communities, reflecting only currently active records.
   *
   * @param connection
   * @param body Complex search filters and pagination options for
   *   sub-communities.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformCommunity.IRequest,
  ): Promise<IPageICommunityPlatformCommunity.ISummary> {
    try {
      return await patch__communityPlatform_communities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full sub-community details by ID (community_platform_communities).
   *
   * Allows any user to get a detailed record for a sub-community using its ID.
   * Data returned includes all business-context fields, such as name
   * (case-insensitive), description, logo/banner URIs, rules, owner, and audit
   * timestamps. Underlying model is community_platform_communities.
   *
   * This data is the source for navigation, info boxes, community home layout,
   * and join/leave button logic. The operation omits deleted communities and
   * any soft-deleted records.
   *
   * Open to all users (public access), with enhanced permissions for
   * authenticated users when displaying join/leave or edit options.
   *
   * @param connection
   * @param communityId Unique identifier for the community record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":communityId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await get__communityPlatform_communities_$communityId({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
