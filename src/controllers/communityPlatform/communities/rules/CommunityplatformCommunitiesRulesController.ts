import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { get__communityPlatform_communities_$communityId_rules_$ruleId } from "../../../../providers/get__communityPlatform_communities_$communityId_rules_$ruleId";

import { ICommunityPlatformCommunityRule } from "../../../../api/structures/ICommunityPlatformCommunityRule";

@Controller("/communityPlatform/communities/:communityId/rules/:ruleId")
export class CommunityplatformCommunitiesRulesController {
  /**
   * Retrieve details of a specific community rule
   * (community_platform_community_rules table).
   *
   * This operation allows retrieval of a specific rule belonging to a community
   * within the platform. It is associated with the
   * community_platform_community_rules table and requires both the target
   * community's ID and the rule's ID for specificity.
   *
   * All users (including guests and authenticated users) can view community
   * rules as per business requirements, supporting broad visibility for rule
   * enforcement and transparency. The system fetches the specified rule’s order
   * (rule_index) and text (rule_text), enabling correct numbering and UI
   * rendering, and provides auxiliary metadata like creation timestamp.
   * Security is enforced such that only rule viewing is allowed here—creation
   * and update/delete operations are handled by restriction to owners or admins
   * on separate endpoints.
   *
   * Common error handling includes access to non-existent rules, invalid
   * identifiers, or referencing a rule outside its true community context.
   * Returns full rule context, supporting all presentation and compliance
   * needs. Only non-deleted, valid rules are returned.
   *
   * @param connection
   * @param communityId ID of the community containing the rule.
   * @param ruleId ID of the rule within the community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await get__communityPlatform_communities_$communityId_rules_$ruleId(
        {
          communityId,
          ruleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
