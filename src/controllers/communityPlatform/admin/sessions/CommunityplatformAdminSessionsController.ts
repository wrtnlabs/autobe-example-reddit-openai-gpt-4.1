import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_admin_sessions } from "../../../../providers/patch__communityPlatform_admin_sessions";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__communityPlatform_admin_sessions_$sessionId } from "../../../../providers/get__communityPlatform_admin_sessions_$sessionId";
import { put__communityPlatform_admin_sessions_$sessionId } from "../../../../providers/put__communityPlatform_admin_sessions_$sessionId";
import { delete__communityPlatform_admin_sessions_$sessionId } from "../../../../providers/delete__communityPlatform_admin_sessions_$sessionId";

import { IPageICommunityPlatformSession } from "../../../../api/structures/IPageICommunityPlatformSession";
import { ICommunityPlatformSession } from "../../../../api/structures/ICommunityPlatformSession";

@Controller("/communityPlatform/admin/sessions")
export class CommunityplatformAdminSessionsController {
  /**
   * Admin search and listing for session tokens (audit and management use).
   *
   * Search and retrieve session token records with support for advanced
   * filtering (by member/admin/user, IP, validity, creation, and expiration
   * times). Allows admins to monitor session lifecycles, security issues, check
   * for active/expired/inactive sessions, and gather insight about user or
   * system-level session access. Requires admin privileges for sensitive data
   * visibility. Returns a paginated list of session records matching
   * search/filtering criteria, including references to owner/member/admin and
   * device information. This operation does not expose session token values in
   * any standard business user or member flow, and responses are executed
   * solely for admin and system oversight.
   *
   * @param connection
   * @param body Advanced search and pagination parameters for session tokens.
   *   Supports filters like member/admin reference, expiration, invalidation,
   *   device, and time.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformSession.IRequest,
  ): Promise<IPageICommunityPlatformSession> {
    try {
      return await patch__communityPlatform_admin_sessions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get session metadata and info for a specific session by ID.
   *
   * Retrieve detailed session information for a given sessionId. Includes
   * metadata about the session, associated member or admin, device and browser
   * information, and timestamps. Enables security audits by administrators and
   * allows members to see their own active sessions as part of 'manage account'
   * or 'log out everywhere' features. Ensures that only authorized parties can
   * access session details—members can only see their own, admins see all. Does
   * not expose sensitive token values in response. Records that have been
   * soft-deleted (deleted_at set) are excluded by default unless explicitly
   * requested during auditing.
   *
   * @param connection
   * @param sessionId The unique identifier of the session record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sessionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSession> {
    try {
      return await get__communityPlatform_admin_sessions_$sessionId({
        admin,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update device/session metadata and timestamps for a specific session ID.
   *
   * Update allowed fields on a session by its ID—such as device fingerprint,
   * last-used time, or planned expiration time. Only accessible to the
   * session's owner (member/admin) or an administrator. Used in account
   * management or device session management screens. Mutations are strictly
   * limited to session metadata (device, times); tokens are never returned or
   * modifiable via this method. The endpoint validates session existence,
   * integrity, and ownership prior to updating. The response returns the
   * updated session entity. Supports hard or soft expiration extension, but not
   * token regeneration. If session has been soft-deleted, update is rejected.
   *
   * @param connection
   * @param sessionId The session record ID to update.
   * @param body Fields to update on the session (device info, expiration,
   *   timestamps, not token values).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sessionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformSession.IUpdate,
  ): Promise<ICommunityPlatformSession> {
    try {
      return await put__communityPlatform_admin_sessions_$sessionId({
        admin,
        sessionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (invalidate) a session by ID; immediate logout effect.
   *
   * Soft delete (invalidate) a session, marking its deleted_at timestamp.
   * Invalidates the JWT and refresh token for immediate effect. Serves as
   * system/admin-initiated forced logout for user or admin, or user self-logout
   * for a session. Only session owner or admin can perform this deletion. The
   * record remains for audit/logging but cannot be reactivated. Fails if
   * already deleted. This endpoint fulfills logout everywhere/log out current
   * device scenarios in account management flows.
   *
   * @param connection
   * @param sessionId Unique ID for the session to invalidate/delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sessionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_sessions_$sessionId({
        admin,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
