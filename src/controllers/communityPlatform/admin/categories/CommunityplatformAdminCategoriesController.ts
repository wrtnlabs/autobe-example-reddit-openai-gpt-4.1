import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_admin_categories } from "../../../../providers/post__communityPlatform_admin_categories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__communityPlatform_admin_categories } from "../../../../providers/patch__communityPlatform_admin_categories";
import { get__communityPlatform_admin_categories_$categoryId } from "../../../../providers/get__communityPlatform_admin_categories_$categoryId";
import { put__communityPlatform_admin_categories_$categoryId } from "../../../../providers/put__communityPlatform_admin_categories_$categoryId";
import { delete__communityPlatform_admin_categories_$categoryId } from "../../../../providers/delete__communityPlatform_admin_categories_$categoryId";

import { ICommunityPlatformCategory } from "../../../../api/structures/ICommunityPlatformCategory";
import { IPageICommunityPlatformCategory } from "../../../../api/structures/IPageICommunityPlatformCategory";

@Controller("/communityPlatform/admin/categories")
export class CommunityplatformAdminCategoriesController {
  /**
   * Create a new community category for sub-community classification.
   *
   * Allows admin users to create a new category for classifying sub-communities
   * on the platform. Requires a unique code and name, a human-friendly display
   * name, and optionally a longer description. If a provided code or name is
   * already in use, the system rejects the request and returns a conflict
   * error. All categories are tracked for audits by creation and update
   * timestamps.
   *
   * Admin privilege is required, as category creation shapes the system
   * taxonomy. All required inputs must pass validation for length, uniqueness,
   * and allowed characters. Related APIs include listing, detail, update, and
   * deletion endpoints for category management.
   *
   * @param connection
   * @param body Information required to create a new category (code, name,
   *   description)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformCategory.ICreate,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await post__communityPlatform_admin_categories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filterable list of all community
   * categories.
   *
   * This API operation fetches a filtered and paginated list of all defined
   * community categories. It allows admin users to perform comprehensive search
   * and management tasks on existing categories, which are used to organize
   * sub-communities. The response includes details such as category code,
   * display name, description, status (active/soft-deleted), and timestamps.
   *
   * Access to this operation is available to admin users only, as category
   * management directly impacts platform taxonomy and business reporting. The
   * endpoint is expected to exclude categories marked as soft-deleted unless
   * included by request.
   *
   * Advanced search parameters such as partial name/code matching and order-by
   * fields are available for rich UI experiences and reporting. Related API
   * operations include category creation, update, retrieval, and deletion
   * endpoints, which together make up the category lifecycle management suite.
   * Category records connect with the sub-community model for entity
   * enforcement and consistency.
   *
   * @param connection
   * @param body Filter/search, pagination, and sort options for category
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformCategory.IRequest,
  ): Promise<IPageICommunityPlatformCategory.ISummary> {
    try {
      return await patch__communityPlatform_admin_categories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific community category by its UUID identifier.
   *
   * Fetches the details of a single community platform category specified by
   * categoryId. Returns all available information (id, code, name, description,
   * timestamps) for use in edit or display screens. Soft-deleted categories are
   * not returned unless requested by super-admins or recovery workflows.
   *
   * Admin users only may call this endpoint due to taxonomy system impact. Not
   * found is reported when a non-existent or deleted category is requested.
   * Related operations include updating or deleting categories, as well as
   * listing all categories for management views.
   *
   * @param connection
   * @param categoryId The UUID of the target category to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await get__communityPlatform_admin_categories_$categoryId({
        admin,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing community category's display fields by UUID identifier.
   *
   * Allows updating of an existing category's display name, description, and
   * other mutable fields. The operation enforces that code and name remain
   * unique across the system. Administration rights are required for this
   * change.
   *
   * If attempting to modify an immutable field (such as code), the system
   * rejects the request. All successful updates refresh the updated_at
   * timestamp for audit and tracking. Errors are returned for not-found,
   * duplicate, or forbidden changes. Only used in privileged category
   * management UIs and flows. Related endpoints are get, list, and delete
   * operations for categories.
   *
   * @param connection
   * @param categoryId The UUID of the category to update
   * @param body Updated display name, description, and edit fields for the
   *   category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCategory.IUpdate,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await put__communityPlatform_admin_categories_$categoryId({
        admin,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a community category by setting deleted_at; removes from
   * functional lists.
   *
   * Performs a soft delete of the specified community category by marking its
   * deleted_at timestamp in the database. The category will be omitted from
   * normal functional queries, creation flows, or display UIs.
   *
   * Only administrators have the authority to retire categories, and all delete
   * events are logged for audits. This API does not fully erase records but
   * supports future recovery by privileged system operators if necessary.
   * Related endpoints include the category listing, retrieval, creation, and
   * update APIs.
   *
   * @param connection
   * @param categoryId The UUID of the category to soft-delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_categories_$categoryId({
        admin,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
