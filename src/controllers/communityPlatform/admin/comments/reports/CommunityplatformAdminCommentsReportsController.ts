import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_admin_comments_$commentId_reports } from "../../../../../providers/post__communityPlatform_admin_comments_$commentId_reports";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__communityPlatform_admin_comments_$commentId_reports } from "../../../../../providers/patch__communityPlatform_admin_comments_$commentId_reports";
import { get__communityPlatform_admin_comments_$commentId_reports_$reportId } from "../../../../../providers/get__communityPlatform_admin_comments_$commentId_reports_$reportId";
import { put__communityPlatform_admin_comments_$commentId_reports_$reportId } from "../../../../../providers/put__communityPlatform_admin_comments_$commentId_reports_$reportId";
import { delete__communityPlatform_admin_comments_$commentId_reports_$reportId } from "../../../../../providers/delete__communityPlatform_admin_comments_$commentId_reports_$reportId";

import { ICommunityPlatformCommentReport } from "../../../../../api/structures/ICommunityPlatformCommentReport";
import { IPageICommunityPlatformCommentReport } from "../../../../../api/structures/IPageICommunityPlatformCommentReport";

@Controller("/communityPlatform/admin/comments/:commentId/reports")
export class CommunityplatformAdminCommentsReportsController {
  /**
   * Create a new report for a comment (one report per member per comment).
   *
   * Create a new report for a specified comment. Members can file one report
   * per comment, specifying a report reason, type, and optional details. The
   * system validates that duplicate reports are not allowed and ties the
   * created report to the requesting member and comment.
   *
   * Upon creation, the report status is set to the initial moderation value.
   * The response contains the created report, including assigned status and
   * timestamps. Attempts to report nonexistent or already-deleted comments, or
   * to file duplicate reports, return standard error messages.
   *
   * @param connection
   * @param commentId Identifier of the comment being reported
   * @param body Report creation info (reason, type, details) for the comment
   *   report
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentReport.ICreate,
  ): Promise<ICommunityPlatformCommentReport> {
    try {
      return await post__communityPlatform_admin_comments_$commentId_reports({
        admin,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filterable list of reports for a specific comment.
   *
   * Retrieve all reports associated with a target comment. This operation
   * supports advanced filtering, searching, and pagination, which is essential
   * for moderation workflows where multiple reports may exist for a single
   * comment. Callers can filter by status, report reason, or other metadata
   * depending on the IRequest parameters.
   *
   * Access to this API is role-restricted: admins can view all reports, while
   * members can view only their own reports. Pagination allows efficient
   * moderation, surfacing the most relevant or critical cases first. The
   * response data includes summary or detailed report information, ideal for
   * moderation UIs or report histories.
   *
   * Error handling ensures that requests for invalid comment IDs, insufficient
   * permissions, or access to non-owned data are rejected with appropriate
   * error messages.
   *
   * @param connection
   * @param commentId Unique identifier for the comment whose reports should be
   *   listed
   * @param body Filter, search, and pagination parameters for comment report
   *   listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentReport.IRequest,
  ): Promise<IPageICommunityPlatformCommentReport.ISummary> {
    try {
      return await patch__communityPlatform_admin_comments_$commentId_reports({
        admin,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific comment report by reportId.
   *
   * Returns all fields for a single report instance tied to a specific comment.
   * This operation ensures that the full lifecycle (reason, status, assigned
   * admin, timestamps) and resolution notes are available for review. Security
   * logic restricts access: admins can retrieve any report; members may
   * retrieve reports they filed. The call will fail with appropriate errors for
   * invalid IDs, lack of permission, or attempts to access unrelated
   * resources.
   *
   * This endpoint is typically used in moderation dashboards, admin appeals,
   * and user self-service views for checking report status or dispute
   * workflows.
   *
   * @param connection
   * @param commentId Identifier of the target comment for which this report
   *   applies
   * @param reportId Unique ID of the comment report to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommentReport> {
    try {
      return await get__communityPlatform_admin_comments_$commentId_reports_$reportId(
        {
          admin,
          commentId,
          reportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing report for a specific comment.
   *
   * Update the details or status of a given comment report. Admins may use this
   * operation to resolve, escalate, or annotate moderation outcomes. The
   * reporting member may, depending on business logic, edit certain fields on
   * their own unresolved reports.
   *
   * All field-level and state-transition rules are enforced. Attempts to update
   * a report outside allowed transitions, or without proper authority, will
   * return permission or validation errors. Operation returns the updated
   * report.
   *
   * @param connection
   * @param commentId Identifier of the comment whose report is updated
   * @param reportId Unique ID of the report being updated
   * @param body Update info for the comment report - such as reason, status,
   *   resolution
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reportId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentReport.IUpdate,
  ): Promise<ICommunityPlatformCommentReport> {
    try {
      return await put__communityPlatform_admin_comments_$commentId_reports_$reportId(
        {
          admin,
          commentId,
          reportId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete this comment report. This operation allows either the
   * report author (while unresolved) or an admin to delete the report from the
   * database. The deletion is permanent and cannot be undone. Operation is
   * transactional and will return an error for unauthorized or invalid deletion
   * attempts.
   *
   * @param connection
   * @param commentId ID of the comment to which the report is linked
   * @param reportId ID of the report to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reportId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_comments_$commentId_reports_$reportId(
        {
          admin,
          commentId,
          reportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
