import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_admin_search_queries } from "../../../../../providers/patch__communityPlatform_admin_search_queries";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__communityPlatform_admin_search_queries_$searchQueryId } from "../../../../../providers/get__communityPlatform_admin_search_queries_$searchQueryId";

import { IPageICommunityPlatformSearchQuery } from "../../../../../api/structures/IPageICommunityPlatformSearchQuery";
import { ICommunityPlatformSearchQuery } from "../../../../../api/structures/ICommunityPlatformSearchQuery";

@Controller("/communityPlatform/admin/search/queries")
export class CommunityplatformAdminSearchQueriesController {
  /**
   * Search and retrieve a paginated/filterable list of search query logs (admin
   * only).
   *
   * Retrieve a paginated, filterable list of search query logs. Results may be
   * filtered by date/time, performer (member/admin), IP/context, query text
   * (full-text search), search_type (post/community/comment), and sorted by
   * performed_at or query. Used for auditing, investigation, trend analysis,
   * and abuse/compliance reporting. Sensitive endpoint, not exposed to regular
   * users. Pagination and advanced query support required for high-volume logs.
   * May be integrated with system dashboard analytics.
   *
   * @param connection
   * @param body Search filters, pagination, sorting, and advanced query
   *   parameters for search query log retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformSearchQuery.IRequest,
  ): Promise<IPageICommunityPlatformSearchQuery.ISummary> {
    try {
      return await patch__communityPlatform_admin_search_queries({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific search query log record by its ID (admin only).
   *
   * Retrieve the complete event record for a single search query log, specified
   * by its unique ID. Includes all event metadata: searcher (member/admin),
   * search text, search type, context, IP, and full timing/audit data. This
   * operation is primarily used for admin review, compliance, abuse
   * investigations, and log forensics. As search queries are system-generated,
   * this endpoint is not for regular user business needs, and access is
   * restricted to appropriate roles. Connected reporting/analytics endpoints
   * may aggregate this data for dashboards.
   *
   * @param connection
   * @param searchQueryId Unique identifier of the search query log record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":searchQueryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("searchQueryId")
    searchQueryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSearchQuery> {
    try {
      return await get__communityPlatform_admin_search_queries_$searchQueryId({
        admin,
        searchQueryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
