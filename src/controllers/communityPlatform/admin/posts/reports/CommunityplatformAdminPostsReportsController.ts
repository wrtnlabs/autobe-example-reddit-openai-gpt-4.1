import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_admin_posts_$postId_reports } from "../../../../../providers/post__communityPlatform_admin_posts_$postId_reports";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__communityPlatform_admin_posts_$postId_reports } from "../../../../../providers/patch__communityPlatform_admin_posts_$postId_reports";
import { get__communityPlatform_admin_posts_$postId_reports_$reportId } from "../../../../../providers/get__communityPlatform_admin_posts_$postId_reports_$reportId";
import { put__communityPlatform_admin_posts_$postId_reports_$reportId } from "../../../../../providers/put__communityPlatform_admin_posts_$postId_reports_$reportId";
import { delete__communityPlatform_admin_posts_$postId_reports_$reportId } from "../../../../../providers/delete__communityPlatform_admin_posts_$postId_reports_$reportId";

import { ICommunityPlatformPostReport } from "../../../../../api/structures/ICommunityPlatformPostReport";
import { IPageICommunityPlatformPostReport } from "../../../../../api/structures/IPageICommunityPlatformPostReport";

@Controller("/communityPlatform/admin/posts/:postId/reports")
export class CommunityplatformAdminPostsReportsController {
  /**
   * Create a new report about a post for moderation review
   * (community_platform_post_reports table).
   *
   * Create a new report regarding a given post, allowing members or admins to
   * flag inappropriate content, spam, abuse, or rule violations for moderation
   * review. The reporting user must be authenticated, and the target post
   * specified by postId. Request details must include a report_type for
   * category (such as spam, abuse, etc), a descriptive reason, and will be
   * tracked under 'open' status until reviewed. The operation enforces strict
   * input validation: report_type must match platform-allowed values, and
   * reason must be non-empty, up to 1000 chars (plain text). Only one report
   * per post per member is allowed; duplicate reports by the same member are
   * rejected. Admins can also create reports for escalated cases. Each report
   * is associated with the referenced post and the authenticated reporting
   * user, allowing follow-up workflow by moderators. Related APIs: PUT and
   * DELETE operations for managing reports, and admin moderation endpoints for
   * escalations and resolution management. Error handling covers permission
   * issues (non-members/guests can't report), invalid input, and business rule
   * failures.
   *
   * @param connection
   * @param postId Unique identifier of the target post being reported.
   * @param body Information for creating a report on a specific post, including
   *   report_type, reason, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostReport.ICreate,
  ): Promise<ICommunityPlatformPostReport> {
    try {
      return await post__communityPlatform_admin_posts_$postId_reports({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated, filtered search for reports/flags on a given post.
   *
   * This operation returns a paginated list of post report entities associated
   * with a specific post (by postId). The operation fetches from the
   * community_platform_post_reports table, using advanced filtering, sorting,
   * and pagination as set by the request DTO. Each report includes details such
   * as reported_by_member_id, admin_id, report_type, reason, status, resolution
   * notes, and creation/updated/resolved timestamps. Authorization is enforced:
   * admins may view all reports; members may view their own filed reports;
   * guests are denied. Use cases include moderation panels, abuse workflows,
   * and user transparency features. Error scenarios arise when accessing
   * reports for deleted/non-existent posts or without appropriate role. This
   * endpoint does not allow creation or modification of reportsâ€”only
   * search/list. Use the related endpoints to fetch report detail or to file a
   * new report.
   *
   * @param connection
   * @param postId The UUID of the post for which reports are queried.
   * @param body Query/filter parameters for paginated searching of post
   *   reports.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostReport.IRequest,
  ): Promise<IPageICommunityPlatformPostReport> {
    try {
      return await patch__communityPlatform_admin_posts_$postId_reports({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail for a specific report on a post by reportId.
   *
   * This operation retrieves details of an individual report concerning a
   * particular post, as identified by postId and reportId. It reads a full
   * record from community_platform_post_reports, returning reference IDs for
   * reporter and admin, the report type and reason, statuses and resolution
   * context, and all matching timestamps. Security guarantees that only the
   * reporter for the report or an admin can view the content. The endpoint is
   * used for moderation, review, transparency, and dispute workflows, and is
   * strictly read-only. Accessing a non-existent or unauthorized report results
   * in an error. Other API endpoints exist for creating, updating, or resolving
   * reports through administrative actions. Access is denied to guests.
   *
   * @param connection
   * @param postId The UUID of the post to which the report belongs.
   * @param reportId The unique identifier (UUID) of the specific report entity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostReport> {
    try {
      return await get__communityPlatform_admin_posts_$postId_reports_$reportId(
        {
          admin,
          postId,
          reportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update or resolve a post report as an admin
   * (community_platform_post_reports table).
   *
   * Update or resolve a specific post report, enabling an admin to change
   * status, add resolution notes, or adjust report metadata. Only users with
   * admin privileges can perform update actions on post reports. Status
   * transitions are strictly controlled: reports may move from open to
   * resolved, pending to dismissed, and admins may provide rationale in
   * resolution_notes. All updates are fully audited for moderation transparency
   * and accountability, with member visibility as required (e.g., to track
   * report progress). Related endpoints: report creation (POST), deletion
   * (DELETE), and detailed report history/audit logs. Validation covers
   * existence of the report (404 on missing/deleted), permissible status
   * values, and proper text fields. Edge cases include handling already
   * resolved or deleted reports.
   *
   * @param connection
   * @param postId Unique identifier of the post containing the report.
   * @param reportId Unique identifier of the report to update.
   * @param body Fields to modify for the post report, such as status or
   *   resolution_notes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reportId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostReport.IUpdate,
  ): Promise<ICommunityPlatformPostReport> {
    try {
      return await put__communityPlatform_admin_posts_$postId_reports_$reportId(
        {
          admin,
          postId,
          reportId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a report for a post as an admin
   * (community_platform_post_reports table).
   *
   * Delete a specific report for a post, removing it from the moderation
   * system. Only admins may perform this action. The deletion is implemented as
   * a soft delete by setting the deleted_at field on the report, which ensures
   * the record is not physically removed but becomes invisible to active
   * workflows and reporting interfaces. Deletion requests for already-deleted
   * or non-existent reports return a not found error. All deletion actions are
   * thoroughly audited for compliance and traceability. Related endpoints:
   * report creation (POST), update (PUT), and audit log retrieval.
   *
   * @param connection
   * @param postId Unique identifier of the post containing the report.
   * @param reportId Unique identifier of the report to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reportId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_posts_$postId_reports_$reportId(
        {
          admin,
          postId,
          reportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
