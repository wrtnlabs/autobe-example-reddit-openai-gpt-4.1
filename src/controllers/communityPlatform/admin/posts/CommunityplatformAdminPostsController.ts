import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__communityPlatform_admin_posts_$postId } from "../../../../providers/put__communityPlatform_admin_posts_$postId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { delete__communityPlatform_admin_posts_$postId } from "../../../../providers/delete__communityPlatform_admin_posts_$postId";

import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/admin/posts/:postId")
export class CommunityplatformAdminPostsController {
  /**
   * Update an existing community post by postId, with strict validation and
   * role checks.
   *
   * This endpoint updates a postâ€™s editable fields (title, body,
   * author_display_name) as defined in the community_platform_posts schema. It
   * requires authentication as the post author or admin, and strictly enforces
   * input validation. The updated content is persisted, timestamps are updated,
   * and a corresponding post_snapshot is generated for version history. The
   * operation does not allow updates to the post's community, author, or unique
   * id. If the target post does not exist, was deleted, or the user is not
   * authorized, a suitable error is returned. This endpoint is fundamental for
   * member-driven content management and editorial workflows in the platform
   * business domain. Other modification actions, such as moderation or post
   * restoration, are handled in separate administrative endpoints. API
   * consumers should ensure that edit/update shapes match the server's required
   * DTO and all business and schema rules.
   *
   * @param connection
   * @param postId The unique identifier (UUID) of the post to update.
   * @param body Fields to update in the specified post, following business
   *   input rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPost.IUpdate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await put__communityPlatform_admin_posts_$postId({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete the specified community post by postId (set deleted_at).
   *
   * This operation soft deletes a specific post on the community platform,
   * setting the 'deleted_at' column of community_platform_posts. Only the
   * post's author or an admin is permitted to perform this action. Soft
   * deletion ensures the post is hidden from the main feed but remains in the
   * database for compliance, audit, and possible future restoration. Comments,
   * votes, and related moderation data must be handled as per cascade rules in
   * business logic (e.g., marking associated comments as deleted). Deleting a
   * non-existent, already-deleted, or unauthorized post results in an error.
   * This endpoint does not support hard deletion or data purging, and is
   * consistent with audit, moderation, and compliance workflows. Soft-deleted
   * posts are not returned by most read/search operations. Restoration
   * (undelete) is performed via different admin endpoints if allowed by
   * business policy.
   *
   * @param connection
   * @param postId The unique identifier (UUID) of the post to delete (soft
   *   delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_posts_$postId({
        admin,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
