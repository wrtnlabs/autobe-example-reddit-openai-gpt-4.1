import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_admin_posts_$postId_snapshots } from "../../../../../providers/patch__communityPlatform_admin_posts_$postId_snapshots";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__communityPlatform_admin_posts_$postId_snapshots_$snapshotId } from "../../../../../providers/get__communityPlatform_admin_posts_$postId_snapshots_$snapshotId";

import { IPageICommunityPlatformPostSnapshot } from "../../../../../api/structures/IPageICommunityPlatformPostSnapshot";
import { ICommunityPlatformPostSnapshot } from "../../../../../api/structures/ICommunityPlatformPostSnapshot";

@Controller("/communityPlatform/admin/posts/:postId/snapshots")
export class CommunityplatformAdminPostsSnapshotsController {
  /**
   * Paginated, filtered query of snapshots (version history) for a specific
   * post.
   *
   * This endpoint retrieves paginated historical post revision snapshots for a
   * single post, identified by postId. It leverages the
   * community_platform_post_snapshots table for immutable audit/history
   * storage. The API supports advanced querying—pagination (page/limit),
   * optional sorting, and filters as described in the request DTO. Snapshots
   * include details such as title, body, author_display_name (if set), and
   * created_at timestamp for each post revision. Operation is restricted: only
   * the original author or an admin may view revision history. Use cases
   * include author content review, editorial control, and moderator audit
   * checks. Security is enforced to ensure privacy of post edit
   * history—read-only unless admin. Errors are returned for unauthorized view
   * or if post/snapshots are not found. This endpoint does not allow edits,
   * only retrieval. Related operations include creating/updating posts and
   * fetching post details.
   *
   * @param connection
   * @param postId The unique identifier (UUID) of the post whose snapshots are
   *   listed.
   * @param body Pagination and filter parameters to search for post snapshots.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostSnapshot.IRequest,
  ): Promise<IPageICommunityPlatformPostSnapshot> {
    try {
      return await patch__communityPlatform_admin_posts_$postId_snapshots({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific snapshot (version) for a post by snapshotId.
   *
   * This endpoint returns the details of a single revision snapshot for a
   * specified post, as identified by both postId and snapshotId. The target is
   * a row from community_platform_post_snapshots containing the historical
   * content of that post revision (title, body, author_display_name, created_at
   * timestamp, and references to author and post at the time of edit). Security
   * rules dictate that only the post's original author or admins may read post
   * history. If not found, an error is returned. This endpoint complements the
   * standard post GET and snapshot list endpoints, supporting granular
   * moderation, rollback, and transparency. It is a read-only operation.
   * Attempts to edit or delete the snapshot directly are not permitted under
   * business logic.
   *
   * @param connection
   * @param postId The identifier (UUID) of the post the snapshot belongs to.
   * @param snapshotId The unique identifier (UUID) of the snapshot to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":snapshotId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("snapshotId")
    snapshotId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostSnapshot> {
    try {
      return await get__communityPlatform_admin_posts_$postId_snapshots_$snapshotId(
        {
          admin,
          postId,
          snapshotId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
