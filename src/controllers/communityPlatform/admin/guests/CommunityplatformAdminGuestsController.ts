import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_admin_guests } from "../../../../providers/patch__communityPlatform_admin_guests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__communityPlatform_admin_guests_$guestId } from "../../../../providers/get__communityPlatform_admin_guests_$guestId";

import { IPageICommunityPlatformGuest } from "../../../../api/structures/IPageICommunityPlatformGuest";
import { ICommunityPlatformGuest } from "../../../../api/structures/ICommunityPlatformGuest";

@Controller("/communityPlatform/admin/guests")
export class CommunityplatformAdminGuestsController {
  /**
   * Admin search and list of all unauthenticated guest user records
   * (community_platform_guests table).
   *
   * Retrieve a paginated, filtered list of guest visitor entities from the
   * platform's analytics data store for auditing and business analysis. Returns
   * guest identifiers, session info, activity periods, and is strictly for
   * admin or analytics review. Business rules enforce anonymization and scope
   * reduction to comply with privacy policies. This is a read-only reporting
   * operation, restricted to administrators, and all activity is audited.
   * Accessible filters may include date ranges, identifiers, or user agent for
   * statistical reporting or abuse investigation use cases.
   *
   * @param connection
   * @param body Search and pagination parameters for guest visitor entity
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformGuest.IRequest,
  ): Promise<IPageICommunityPlatformGuest> {
    try {
      return await patch__communityPlatform_admin_guests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve an analytics guest record by ID (system use only).
   *
   * Retrieve detailed information for a specific guest record identified by
   * guestId. This entity is used internally for analytics, tracking user
   * interactions, and auditing non-authenticated activity. It is not meant for
   * direct business user-facing queries. Returns analytics data including IP,
   * user agent, identifier, and timestamps, if available. Only system or
   * admin-level users should access this data; business API flows do not expose
   * this entity to members or guests.
   *
   * @param connection
   * @param guestId Unique identifier for the guest record to look up.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":guestId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformGuest> {
    try {
      return await get__communityPlatform_admin_guests_$guestId({
        admin,
        guestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
