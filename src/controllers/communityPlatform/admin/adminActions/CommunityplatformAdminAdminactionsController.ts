import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_admin_adminActions } from "../../../../providers/post__communityPlatform_admin_adminActions";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__communityPlatform_admin_adminActions } from "../../../../providers/patch__communityPlatform_admin_adminActions";
import { get__communityPlatform_admin_adminActions_$adminActionId } from "../../../../providers/get__communityPlatform_admin_adminActions_$adminActionId";
import { put__communityPlatform_admin_adminActions_$adminActionId } from "../../../../providers/put__communityPlatform_admin_adminActions_$adminActionId";
import { delete__communityPlatform_admin_adminActions_$adminActionId } from "../../../../providers/delete__communityPlatform_admin_adminActions_$adminActionId";

import { ICommunityPlatformAdminAction } from "../../../../api/structures/ICommunityPlatformAdminAction";
import { IPageICommunityPlatformAdminAction } from "../../../../api/structures/IPageICommunityPlatformAdminAction";

@Controller("/communityPlatform/admin/adminActions")
export class CommunityplatformAdminAdminactionsController {
  /**
   * Create a new admin/moderation action in the platform's audit trails.
   *
   * Logs a new administrative or moderation action to support full audit trails
   * and regulatory transparency. Admin users must supply the action type,
   * affected business entity and ID, rationale, and outcome. The operation
   * ensures all necessary relationships are respected, and audit information is
   * attached, supporting both business reporting and moderation compliance.
   * Only admin users can submit such records.
   *
   * @param connection
   * @param body Information required to create a new admin/moderation action
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAdminAction.ICreate,
  ): Promise<ICommunityPlatformAdminAction> {
    try {
      return await post__communityPlatform_admin_adminActions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list of admin/moderation actions with advanced
   * filters.
   *
   * Returns a paginated, filterable list of all admin actions executed on the
   * platform for monitoring and compliance purposes. Filtering is available by
   * admin ID, target entity type/ID, action type, date range, and action
   * result. Results are paginated and sorted for dashboard or audit tool
   * consumption. This endpoint is critical for transparency and enables audits
   * of all moderation/admin activity.
   *
   * @param connection
   * @param body Admin action search and pagination/filter parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAdminAction.IRequest,
  ): Promise<IPageICommunityPlatformAdminAction> {
    try {
      return await patch__communityPlatform_admin_adminActions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific admin/moderation action by ID.
   *
   * Fetch all available details regarding a specific admin/moderation action
   * for auditing or dispute review. Administrators can examine the action type,
   * affected entity, rationale, and outcome, supporting regulatory and
   * operational compliance. The operation uses the action's unique ID and
   * enforces that only admin accounts can retrieve this sensitive audit data.
   *
   * @param connection
   * @param adminActionId Unique ID of the admin action record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminActionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminActionId")
    adminActionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAdminAction> {
    try {
      return await get__communityPlatform_admin_adminActions_$adminActionId({
        admin,
        adminActionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing admin/moderation action record by ID.
   *
   * Allows updating an existing admin action record, such as supplying
   * additional resolution notes or revising the moderation rationale. Used by
   * admins to ensure audit records are accurate, complete, and reflect the real
   * resolution to moderation cases. Admins may update only records they are
   * responsible for or have permission to modify. All updates are audited and
   * appended to the compliance trail.
   *
   * @param connection
   * @param adminActionId Unique ID of the admin/moderation action record to
   *   update.
   * @param body Updated information for the admin/moderation action record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminActionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminActionId")
    adminActionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdminAction.IUpdate,
  ): Promise<ICommunityPlatformAdminAction> {
    try {
      return await put__communityPlatform_admin_adminActions_$adminActionId({
        admin,
        adminActionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard-delete an admin/moderation action from the audit log.
   *
   * Removes an existing admin action record from the audit log. This is
   * intended for critical error correction, audit remediation, or appeal
   * scenarios only. Super-admin or designated audit staff access is required
   * under strict business rules to prevent tampering. This action is logged and
   * deeply reviewed for compliance reasons.
   *
   * @param connection
   * @param adminActionId Unique ID of the admin action record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminActionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminActionId")
    adminActionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_adminActions_$adminActionId({
        admin,
        adminActionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
