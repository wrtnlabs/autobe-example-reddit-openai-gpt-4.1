import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_admin_auditLogs } from "../../../../providers/patch__communityPlatform_admin_auditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__communityPlatform_admin_auditLogs_$auditLogId } from "../../../../providers/get__communityPlatform_admin_auditLogs_$auditLogId";

import { IPageICommunityPlatformAuditLog } from "../../../../api/structures/IPageICommunityPlatformAuditLog";
import { ICommunityPlatformAuditLog } from "../../../../api/structures/ICommunityPlatformAuditLog";

@Controller("/communityPlatform/admin/auditLogs")
export class CommunityplatformAdminAuditlogsController {
  /**
   * Paginated search of moderation and admin audit logs for compliance review.
   *
   * Returns a paginated, filterable list of all audit logs covering moderation,
   * admin, and business-sensitive events. Filtering parameters and pagination
   * enable incident review for compliance, business reporting, and regulatory
   * audits. Each entry links to both admin and member where relevant, as well
   * as impacted entities. Used by forensic and compliance staff to examine the
   * full trace of platform actions.
   *
   * @param connection
   * @param body Filter and pagination criteria for searching moderation/admin
   *   audit logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAuditLog.IRequest,
  ): Promise<IPageICommunityPlatformAuditLog> {
    try {
      return await patch__communityPlatform_admin_auditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a community platform audit log entry by its ID from the audit log
   * table.
   *
   * This operation retrieves a full audit log record by its unique identifier.
   * The audit log includes details such as the admin or member involved, the
   * type of event (e.g., admin_action, escalation, data_access), the entity
   * type and ID impacted, complete metadata in JSON format, the result of the
   * action, and the timestamp. Audit logs are read-only and not user-editable.
   * Access to this endpoint is restricted to admin users for purposes of
   * compliance, historical traceability, and legal audit obligations. Related
   * operations include listing audit logs for a date range and fetching all
   * actions taken by a specific admin or on a specific entity. Care must be
   * taken to ensure sensitive metadata is handled according to policy.
   *
   * @param connection
   * @param auditLogId Unique identifier of the target audit log entry to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAuditLog> {
    try {
      return await get__communityPlatform_admin_auditLogs_$auditLogId({
        admin,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
