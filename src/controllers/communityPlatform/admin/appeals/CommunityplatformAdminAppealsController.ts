import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_admin_appeals } from "../../../../providers/patch__communityPlatform_admin_appeals";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__communityPlatform_admin_appeals_$appealId } from "../../../../providers/get__communityPlatform_admin_appeals_$appealId";
import { put__communityPlatform_admin_appeals_$appealId } from "../../../../providers/put__communityPlatform_admin_appeals_$appealId";
import { delete__communityPlatform_admin_appeals_$appealId } from "../../../../providers/delete__communityPlatform_admin_appeals_$appealId";

import { IPageICommunityPlatformAppeal } from "../../../../api/structures/IPageICommunityPlatformAppeal";
import { ICommunityPlatformAppeal } from "../../../../api/structures/ICommunityPlatformAppeal";

@Controller("/communityPlatform/admin/appeals")
export class CommunityplatformAdminAppealsController {
  /**
   * Search and retrieve a paginated, filterable list of moderation/admin
   * appeals.
   *
   * Retrieve a paginated, filterable list of moderation or admin action
   * appeals. Members may view their own appeals, while admins have access to
   * all appeals for processing, review, and analytics. Supports filtering by
   * appeal status (submitted, under_review, resolved, rejected), member, admin,
   * admin action, and decision reason text. Used to administer and process
   * appeals workflows, track appeal status, and support transparency in
   * moderation. Includes support for pagination, sorting by updated_at or
   * created_at, and searching by text in decision rationale. Tied closely to
   * the admin/moderation subsystem, and integrated into the main dispute
   * mediation flow.
   *
   * @param connection
   * @param body Request parameters specifying search filters (status, member,
   *   admin), text query, pagination, and sorting model for searching
   *   moderation/admin appeals.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAppeal.IRequest,
  ): Promise<IPageICommunityPlatformAppeal.ISummary> {
    try {
      return await patch__communityPlatform_admin_appeals({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single moderation/admin appeal record by ID.
   *
   * Retrieve a detailed record of a specific moderation/admin appeal including
   * its status, rationale, related admin action, decision reasoning, and the
   * full update and creation history. May be used by members (if they are the
   * appellant) and by admins (for all appeals) to track and resolve issues
   * arising from moderation or admin actions. Ensures transparency, due
   * process, and auditability in the dispute management workflow. Responds with
   * all fields from the corresponding appeals table entry.
   *
   * @param connection
   * @param appealId Unique identifier of the appeal to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":appealId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAppeal> {
    try {
      return await get__communityPlatform_admin_appeals_$appealId({
        admin,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing moderation/admin appeal record by ID.
   *
   * Modify or update a moderation/admin appeal record, identified by a unique
   * appeal ID. Updates supported include changing the appeal status, assigning
   * an admin reviewer, and adding or updating the admin's decision rationale.
   * This operation is permissioned to admins as part of the dispute/appeal
   * workflow. Each update is fully audit-logged, and only authorized changes by
   * appropriate roles are permitted. The operation supports business process
   * adherence, dispute transparency, and appeal closure/finality.
   *
   * @param connection
   * @param appealId Unique identifier of the appeal to update.
   * @param body Updated fields for the appeal record, including status,
   *   assigned admin, rationale, or other updatable fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":appealId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAppeal.IUpdate,
  ): Promise<ICommunityPlatformAppeal> {
    try {
      return await put__communityPlatform_admin_appeals_$appealId({
        admin,
        appealId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase a moderation/admin appeal by ID.
   *
   * Permanently remove an appeal record by its unique ID. This operation is
   * reserved for appeals that were filed in error, invalid, withdrawn, or need
   * to be removed for compliance reasons. No recovery is possibleâ€”this directly
   * deletes the entry from storage. Admin permissions are strictly enforced. It
   * is recommended to maintain logs of erasures for compliance and historic
   * reference purposes.
   *
   * @param connection
   * @param appealId Unique identifier of the appeal to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":appealId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_appeals_$appealId({
        admin,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
