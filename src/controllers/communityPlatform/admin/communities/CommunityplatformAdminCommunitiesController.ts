import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__communityPlatform_admin_communities } from "../../../../providers/post__communityPlatform_admin_communities";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/admin/communities")
export class CommunityplatformAdminCommunitiesController {
  /**
   * Create a new community as an authenticated member or admin.
   *
   * Create a new community with all required and optional metadata: unique
   * name, category, owner (current member), description, and optional
   * logo/banner/rules. Validates strong input constraints for name and required
   * relationships. Only authenticated members or admins may perform this
   * operation, based on business rules. Responds with complete community
   * entity, including related defaults and any generated system fields. Does
   * not allow unauthenticated guests or nonmember operations. Rejects creation
   * if name, category, or other fields do not meet strict validation or
   * business rules. Triggers creation of related rule and membership entries
   * where required.
   *
   * @param connection
   * @param body Information to create a new community, including required and
   *   optional fields for metadata, categorization, and visual configuration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformCommunity.ICreate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await post__communityPlatform_admin_communities({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
