import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_admin_configurations } from "../../../../providers/post__communityPlatform_admin_configurations";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__communityPlatform_admin_configurations } from "../../../../providers/patch__communityPlatform_admin_configurations";
import { get__communityPlatform_admin_configurations_$configurationId } from "../../../../providers/get__communityPlatform_admin_configurations_$configurationId";
import { put__communityPlatform_admin_configurations_$configurationId } from "../../../../providers/put__communityPlatform_admin_configurations_$configurationId";
import { delete__communityPlatform_admin_configurations_$configurationId } from "../../../../providers/delete__communityPlatform_admin_configurations_$configurationId";

import { ICommunityPlatformConfiguration } from "../../../../api/structures/ICommunityPlatformConfiguration";
import { IPageICommunityPlatformConfiguration } from "../../../../api/structures/IPageICommunityPlatformConfiguration";

@Controller("/communityPlatform/admin/configurations")
export class CommunityplatformAdminConfigurationsController {
  /**
   * Create a new configuration parameter (community_platform_configurations
   * table).
   *
   * Create a new system-wide configuration parameter. The operation requires a
   * unique key, value, optional description, and will record creation and audit
   * information. Business logic enforces uniqueness and proper encoding of
   * configuration state. The result is the detailed configuration object, which
   * is immediately available for management and effective throughout platform
   * logic. Only admins may create configuration parameters. The creation event
   * is recorded for audit/compliance and can be used for system-level behavior
   * toggles, policy adjustments, or operational settings.
   *
   * @param connection
   * @param body Information required to create a new configuration setting,
   *   including key, value, and optional description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformConfiguration.ICreate,
  ): Promise<ICommunityPlatformConfiguration> {
    try {
      return await post__communityPlatform_admin_configurations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin search and list of all configuration settings
   * (community_platform_configurations table).
   *
   * Retrieve a filtered, paginated list of system configuration parameters from
   * the platform. This operation supports complex querying and sorting over all
   * configuration settings, enabling administrative review, audit trail
   * inspection, and system-wide settings management. Returned results include
   * both active and soft-deleted settings, depending on query filters. Only
   * admin users are permitted to access this sensitive endpoint to ensure
   * proper configuration governance. Supports search by key, date range, and
   * status. Business logic ensures confidential information is excluded unless
   * authorized.
   *
   * @param connection
   * @param body Filtering, search, and pagination parameters for configuration
   *   settings query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformConfiguration.IRequest,
  ): Promise<IPageICommunityPlatformConfiguration> {
    try {
      return await patch__communityPlatform_admin_configurations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific system configuration parameter
   * (community_platform_configurations table).
   *
   * Retrieve the full details of a single system configuration setting,
   * including its key, value, description, and historical status. This endpoint
   * is restricted to admin users and returns information even if the
   * configuration has been soft-deleted. Intended for audit, compliance, or
   * troubleshooting scenarios. Sensitive or confidential values are only
   * displayed if authorized. Lookup is performed by the unique configuration
   * ID. Access events are audit logged.
   *
   * @param connection
   * @param configurationId Unique identifier of the system configuration
   *   parameter to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":configurationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformConfiguration> {
    try {
      return await get__communityPlatform_admin_configurations_$configurationId(
        {
          admin,
          configurationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a system configuration parameter (community_platform_configurations
   * table).
   *
   * Update an existing configuration parameter's key, value, or description.
   * Only admin users are allowed to perform updates, and all changes are fully
   * audit logged. The operation ensures configuration key uniqueness and
   * retains historical versions for auditing. Immediately reflects changes
   * throughout the system and enables safe rollout of business, moderation, or
   * UI policy adjustments. Lookup is by configuration ID. Result includes the
   * full, updated configuration object.
   *
   * @param connection
   * @param configurationId Unique identifier of the configuration parameter to
   *   update.
   * @param body Payload of updated configuration properties, including key,
   *   value, and optional description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":configurationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformConfiguration.IUpdate,
  ): Promise<ICommunityPlatformConfiguration> {
    try {
      return await put__communityPlatform_admin_configurations_$configurationId(
        {
          admin,
          configurationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a system configuration parameter
   * (community_platform_configurations table).
   *
   * Remove a configuration parameter from the system by issuing a soft delete
   * (update 'deleted_at') operation. The configuration is excluded from future
   * effective system settings, but the record is retained for audit and
   * possible rollback. Only admins may delete configurations. All actions are
   * tracked for compliance and auditability. Soft-deleted configurations are
   * visible for administrative queries but do not affect platform logic.
   *
   * @param connection
   * @param configurationId Unique identifier of the configuration parameter to
   *   soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":configurationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_configurations_$configurationId(
        {
          admin,
          configurationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
