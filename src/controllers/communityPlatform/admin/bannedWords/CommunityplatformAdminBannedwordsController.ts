import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_admin_bannedWords } from "../../../../providers/post__communityPlatform_admin_bannedWords";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__communityPlatform_admin_bannedWords } from "../../../../providers/patch__communityPlatform_admin_bannedWords";
import { get__communityPlatform_admin_bannedWords_$bannedWordId } from "../../../../providers/get__communityPlatform_admin_bannedWords_$bannedWordId";
import { put__communityPlatform_admin_bannedWords_$bannedWordId } from "../../../../providers/put__communityPlatform_admin_bannedWords_$bannedWordId";
import { delete__communityPlatform_admin_bannedWords_$bannedWordId } from "../../../../providers/delete__communityPlatform_admin_bannedWords_$bannedWordId";

import { ICommunityPlatformBannedWord } from "../../../../api/structures/ICommunityPlatformBannedWord";
import { IPageICommunityPlatformBannedWord } from "../../../../api/structures/IPageICommunityPlatformBannedWord";

@Controller("/communityPlatform/admin/bannedWords")
export class CommunityplatformAdminBannedwordsController {
  /**
   * Create a new banned word or phrase for platform content moderation.
   *
   * Allows privileged admin users to insert a new banned word or phrase for
   * enforcement throughout the platform. Each banned word must have a unique
   * phrase and may be assigned a moderation category for reporting. Words can
   * be enabled or disabled for moderation, providing temporary control over
   * enforcement without database deletion.
   *
   * Applications include content moderation automation, report management, and
   * rapid ban/unban workflow. All entries are tracked for audit and
   * enforcement. Operation fails with a conflict if the phrase already exists
   * in the system. Closely related endpoints include listing, detail, update
   * (enable/disable), and delete for banned words.
   *
   * @param connection
   * @param body Data required to create a new banned word (phrase, category,
   *   enabled state)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformBannedWord.ICreate,
  ): Promise<ICommunityPlatformBannedWord> {
    try {
      return await post__communityPlatform_admin_bannedWords({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filterable list of all banned words.
   *
   * Enables admin users to browse and audit the complete set of banned words or
   * phrases in the content moderation system. Filtering options include search
   * by phrase text, filtering by category (profanity, spam, etc.), and
   * filtering by whether the phrase is currently enabled or disabled for
   * enforcement.
   *
   * Paged results are returned with metadata, phrase text, category, status
   * (enabled), and audit timestamps. Administrative access is mandatory, as
   * changing the banned words list directly impacts user-generated content
   * moderation. Soft-deleted entries are omitted by default. Related APIs exist
   * for creating, updating, and deleting banned word entries.
   *
   * @param connection
   * @param body Filter/search, pagination, and sort options for banned words
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformBannedWord.IRequest,
  ): Promise<IPageICommunityPlatformBannedWord.ISummary> {
    try {
      return await patch__communityPlatform_admin_bannedWords({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific banned word moderation entry by UUID.
   *
   * Returns full details for an individual banned word, including phrase,
   * moderation category, enabled/disabled flag, and all audit timestamps. Soft
   * deleted records are found only using privileged or audit/recovery-specific
   * requests, and enabled==false entries may be omitted from normal
   * enforcement.
   *
   * Usually used in admin-facing review or update UIs. Related endpoints
   * include update, create, list, and delete for banned word management.
   *
   * @param connection
   * @param bannedWordId The UUID of the banned word entry to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bannedWordId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bannedWordId")
    bannedWordId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformBannedWord> {
    try {
      return await get__communityPlatform_admin_bannedWords_$bannedWordId({
        admin,
        bannedWordId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a banned word or phrase for moderation purposes
   * (community_platform_banned_words table).
   *
   * Update the details of an existing banned word or phrase as part of the
   * system's content moderation dictionary. This operation supports modifying
   * the phrase, toggling its enabled state, or updating its category. Strict
   * validation ensures phrase uniqueness and correct category association. Only
   * admin users can execute this operation, and all changes are audit logged
   * for moderation traceability. Modifications may take immediate effect,
   * impacting real-time content submissions and moderation sweeps. If the
   * phrase is updated, the new phrase is checked for duplicates before applying
   * changes. Related moderation features reference this data live. All
   * activities are recorded in the audit logs for review.
   *
   * @param connection
   * @param bannedWordId Unique identifier of the banned word or phrase to
   *   update.
   * @param body Payload for updating the banned word or phrase, including new
   *   phrase value, category, and enabled state.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":bannedWordId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bannedWordId")
    bannedWordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformBannedWord.IUpdate,
  ): Promise<ICommunityPlatformBannedWord> {
    try {
      return await put__communityPlatform_admin_bannedWords_$bannedWordId({
        admin,
        bannedWordId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a banned word or phrase from moderation list
   * (community_platform_banned_words table).
   *
   * Remove a banned word or phrase from the active moderation dictionary by
   * performing a soft delete (setting 'deleted_at'). This disables enforcement,
   * but preserves the item for auditing. Only admins may execute the removal.
   * The system ensures safe exclusion from moderation workflows and search
   * validation. Deleted records are retained for history and potential
   * restoration. The action is recorded in audit logs for compliance and
   * investigative transparency.
   *
   * @param connection
   * @param bannedWordId Unique identifier of the banned word or phrase to
   *   remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bannedWordId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bannedWordId")
    bannedWordId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_admin_bannedWords_$bannedWordId({
        admin,
        bannedWordId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
