import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_admin_votes } from "../../../../providers/post__communityPlatform_admin_votes";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__communityPlatform_admin_votes } from "../../../../providers/patch__communityPlatform_admin_votes";
import { get__communityPlatform_admin_votes_$voteId } from "../../../../providers/get__communityPlatform_admin_votes_$voteId";

import { ICommunityPlatformVote } from "../../../../api/structures/ICommunityPlatformVote";
import { IPageICommunityPlatformVote } from "../../../../api/structures/IPageICommunityPlatformVote";

@Controller("/communityPlatform/admin/votes")
export class CommunityplatformAdminVotesController {
  /**
   * Create or update a vote for a post or comment.
   *
   * Create or update a user's vote on a specified post or comment. Only one
   * vote per user-target is retained; submitting a new vote overwrites any
   * prior. The value may be 1 (upvote), -1 (downvote), or 0 (neutral/remove
   * vote state). Voting on own content is forbidden in business logic and
   * checked at request time.
   *
   * Duplicate or conflicting votes are resolved by keeping the latest state.
   * Unauthorized or illogical attempts (e.g., voting on non-existent or own
   * content) result in standard error responses. On success, full vote record
   * is returned.
   *
   * @param connection
   * @param body Vote creation info: voter, target post/comment, and vote value
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformVote.ICreate,
  ): Promise<ICommunityPlatformVote> {
    try {
      return await post__communityPlatform_admin_votes({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated, filtered vote records across posts and comments.
   *
   * Return a paginated list of votes cast by users on posts and comments. This
   * API supports advanced filters including by voter, post/comment, vote value
   * (up, down, neutral), and timestamp ranges for reviewing platform activity
   * or personal voting history.
   *
   * Access control permits admins to view all voting records, while members may
   * only retrieve their own. Pagination, searching, and sorting allow efficient
   * bulk review or individual account history. Proper error handling is
   * provided for invalid filters or unauthorized access attempts.
   *
   * @param connection
   * @param body Advanced filter, search, and pagination criteria for votes
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformVote.IRequest,
  ): Promise<IPageICommunityPlatformVote.ISummary> {
    try {
      return await patch__communityPlatform_admin_votes({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed voting record by voteId.
   *
   * Returns a single voting record including full field data: who voted, the
   * target (post or comment), vote value, and creation/update metadata. Useful
   * for per-user or moderation review. Access is restricted by role.
   *
   * Errors are returned for requests with invalid or unauthorized vote IDs.
   * Common usage includes review of individual voting actions or for platform
   * moderation purposes.
   *
   * @param connection
   * @param voteId The unique identifier (UUID) of the vote record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformVote> {
    try {
      return await get__communityPlatform_admin_votes_$voteId({
        admin,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
