import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_memberUser_recentCommunities } from "../../../../providers/post__communityPlatform_memberUser_recentCommunities";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__communityPlatform_memberUser_recentCommunities } from "../../../../providers/patch__communityPlatform_memberUser_recentCommunities";
import { get__communityPlatform_memberUser_recentCommunities_$recentCommunityId } from "../../../../providers/get__communityPlatform_memberUser_recentCommunities_$recentCommunityId";
import { put__communityPlatform_memberUser_recentCommunities_$recentCommunityId } from "../../../../providers/put__communityPlatform_memberUser_recentCommunities_$recentCommunityId";
import { delete__communityPlatform_memberUser_recentCommunities_$recentCommunityId } from "../../../../providers/delete__communityPlatform_memberUser_recentCommunities_$recentCommunityId";

import { ICommunityPlatformRecentCommunity } from "../../../../api/structures/ICommunityPlatformRecentCommunity";
import { IPageICommunityPlatformRecentCommunity } from "../../../../api/structures/IPageICommunityPlatformRecentCommunity";

@Controller("/communityPlatform/memberUser/recentCommunities")
export class CommunityplatformMemberuserRecentcommunitiesController {
  /**
   * Add a recent community visit to the member's recency list
   * (community_platform_recent_communities table).
   *
   * This endpoint allows an authenticated member user to add a new recent
   * community record to their navigation list, as captured in the
   * community_platform_recent_communities table. When a user visits a community
   * not currently in their top 5, this operation inserts a record linking the
   * user to the community with the updated recency rank and timestamp.
   *
   * System logic ensures only one record per (memberuser, community)
   * combination and limits total entries to 5 per user—oldest records are
   * replaced as needed. Only the user themselves can create (synchronize) their
   * own recent communities; no cross-user creation is permitted. The returned
   * response includes the new or updated entry, enabling immediate
   * sidebar/recency context updates in the frontend.
   *
   * @param connection
   * @param body Information needed to create or update a recent community
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: ICommunityPlatformRecentCommunity.ICreate,
  ): Promise<ICommunityPlatformRecentCommunity> {
    try {
      return await post__communityPlatform_memberUser_recentCommunities({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve recent community navigation list for current member
   * (community_platform_recent_communities table).
   *
   * This endpoint allows an authenticated member user to view their recent
   * community navigation history, as represented in the
   * community_platform_recent_communities table. The system supports advanced
   * search, filtering, and pagination if extended, but by business rule returns
   * up to 5 entries ordered by recency (recent_rank/last_activity_at).
   *
   * The operation gathers necessary community data for personalized sidebars,
   * quick navigation, and context menus. Returned results respect memberuser_id
   * scoping—users can see only their own recent community list. Each entry
   * includes community reference, recency order, and last activity time.
   * Security and privacy are strictly enforced so users cannot view or access
   * other users’ recent communities.
   *
   * Key for supporting seamless UI context, home feed personalization, and
   * role-based navigation experiences. Attempts to access without
   * authentication are denied; only authenticated member users can use this
   * operation per validation rules.
   *
   * @param connection
   * @param body Optional search/pagination parameters for recent community
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: ICommunityPlatformRecentCommunity.IRequest,
  ): Promise<IPageICommunityPlatformRecentCommunity> {
    try {
      return await patch__communityPlatform_memberUser_recentCommunities({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific recent community entry for the member
   * (community_platform_recent_communities table).
   *
   * This endpoint lets an authenticated member user retrieve a specific record
   * from their recent communities navigation, leveraging the
   * community_platform_recent_communities table. The parameter
   * recentCommunityId references the unique entry. Logic ensures users can only
   * view their own records; cross-user access is denied by enforcement of
   * memberuser_id ownership per business and privacy rules.
   *
   * Returned data includes the linked community, the recency order, and the
   * timestamp for last activity, supporting robust UI personalization. Used for
   * context menu details, navigation previews, and background fetches for
   * context-aware features. Unauthorized or out-of-scope access attempts are
   * rejected with standard error responses.
   *
   * @param connection
   * @param recentCommunityId ID of the recent community record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recentCommunityId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("recentCommunityId")
    recentCommunityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformRecentCommunity> {
    try {
      return await get__communityPlatform_memberUser_recentCommunities_$recentCommunityId(
        {
          memberUser,
          recentCommunityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a recent community navigation entry
   * (community_platform_recent_communities table).
   *
   * This operation lets an authenticated member user update a specific recent
   * community record in their navigation history—managed in the
   * community_platform_recent_communities table. It allows changing fields such
   * as recent_rank or last_activity_at in order to maintain the correct recency
   * ordering and time context for personalized sidebars.
   *
   * Updates are only permitted for entries owned by the current member user;
   * attempts to update other users’ records are prohibited. Logic also enforces
   * maximum of 5 entries per user and recalculates ranks if changes are made
   * that affect recency. Business rules ensure that the update cannot create
   * duplicate records or cross-user data leaks.
   *
   * Success returns the updated recent community record for immediate
   * navigation/UI update.
   *
   * @param connection
   * @param recentCommunityId ID of the recent community record to update.
   * @param body Updated recency or activity data for the record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":recentCommunityId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("recentCommunityId")
    recentCommunityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformRecentCommunity.IUpdate,
  ): Promise<ICommunityPlatformRecentCommunity> {
    try {
      return await put__communityPlatform_memberUser_recentCommunities_$recentCommunityId(
        {
          memberUser,
          recentCommunityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a single recent community link by recentCommunityId from
   * community_platform_recent_communities.
   *
   * This API operation allows a member user to remove a community from their
   * personal list of recent communities for navigation and sidebar display. The
   * operation targets the community_platform_recent_communities table, which
   * links member users to communities based on recent activity.
   *
   * A user may have up to five recent communities; when one is deleted, the
   * system reorders the remaining entries and updates their recent_rank. Only
   * the user who owns the recent list (or an adminUser) may delete a recent
   * community link. If the recentCommunityId does not belong to the requesting
   * user or the user is not an admin, the operation fails with a permission
   * error.
   *
   * Deletion of a recent community in this context is a hard delete – the
   * association is permanently removed from the user's list but does not affect
   * membership or the underlying community entity. Error handling includes
   * checks for valid ownership and non-existent records.
   *
   * @param connection
   * @param recentCommunityId The unique identifier (UUID) of the recent
   *   community record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":recentCommunityId")
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("recentCommunityId")
    recentCommunityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_memberUser_recentCommunities_$recentCommunityId(
        {
          memberUser,
          recentCommunityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
