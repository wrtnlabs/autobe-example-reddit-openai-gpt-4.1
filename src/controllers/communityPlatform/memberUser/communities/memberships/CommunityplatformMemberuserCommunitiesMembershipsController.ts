import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_memberUser_communities_$communityId_memberships } from "../../../../../providers/post__communityPlatform_memberUser_communities_$communityId_memberships";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";
import { patch__communityPlatform_memberUser_communities_$communityId_memberships } from "../../../../../providers/patch__communityPlatform_memberUser_communities_$communityId_memberships";
import { get__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId } from "../../../../../providers/get__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId";
import { put__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId } from "../../../../../providers/put__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId";
import { delete__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId } from "../../../../../providers/delete__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId";

import { ICommunityPlatformCommunityMembership } from "../../../../../api/structures/ICommunityPlatformCommunityMembership";
import { IPageICommunityPlatformCommunityMembership } from "../../../../../api/structures/IPageICommunityPlatformCommunityMembership";

@Controller(
  "/communityPlatform/memberUser/communities/:communityId/memberships",
)
export class CommunityplatformMemberuserCommunitiesMembershipsController {
  /**
   * Join a community as a new member.
   *
   * This operation allows an authenticated user to join a specific community by
   * adding a membership entry in the community_platform_community_memberships
   * table. The communityId is required in the path, and the authenticated
   * user's own identifier is supplied in the request body.
   *
   * All business constraints are validated: users may only join a community
   * once, duplicate join attempts are rejected. Joined timestamp is
   * auto-populated to record when the memberships is created. Attempts by
   * unauthenticated users or attempts to artificially assign membership to
   * other users are disallowed unless the requester is an adminUser.
   *
   * Edge and error cases include already existing membership, attempts to join
   * or create memberships on behalf of other users (rejected unless admin), and
   * requests referencing non-existent communities. On success, the system
   * updates contextual UI elements, feeds, and recent communities lists to
   * reflect new membership.
   *
   * @param connection
   * @param communityId ID of the community to join.
   * @param body Payload containing the user ID to be associated (typically
   *   omitted for self, required for admin action).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityMembership.ICreate,
  ): Promise<ICommunityPlatformCommunityMembership> {
    try {
      return await post__communityPlatform_memberUser_communities_$communityId_memberships(
        {
          memberUser,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list memberships in a specific community.
   *
   * This operation fetches a paginated, filtered, and optionally sorted list of
   * all user memberships for a specific community, using the communityId as a
   * reference. Drawn from the community_platform_community_memberships Prisma
   * schema, each record links a member user and a community, recording join
   * time and enforcing uniqueness per (user, community) pair.
   *
   * Business logic permits users with appropriate permissions (typically any
   * logged-in user, but with restricted details according to role) to view
   * membership listings for open communities. Output includes member user ids,
   * join times, and associated membership IDs. Filtering allows by
   * memberuser_id, date joined, and other analytic queries as relevant. Sorting
   * and query options may default to join time descending.
   *
   * Security ensures that only authenticated users may access non-public member
   * data, and that user details are sanitized for privacy. Related operations
   * include joining/leaving a community and fetching recent communities for
   * display. Errors include invalid communityId or insufficient permissions.
   *
   * @param connection
   * @param communityId ID of the community whose memberships are being listed.
   * @param body Search filter and paging options for filtering memberships.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityMembership.IRequest,
  ): Promise<IPageICommunityPlatformCommunityMembership.ISummary> {
    try {
      return await patch__communityPlatform_memberUser_communities_$communityId_memberships(
        {
          memberUser,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific community membership.
   *
   * This operation retrieves comprehensive details for a particular community
   * membership by membershipId under the specified communityId. It references
   * the community_platform_community_memberships Prisma model, where each
   * record connects a member user to a community with unique constraints and
   * joined_at tracking.
   *
   * Retrieval is allowed for authenticated users, with privacy protection for
   * sensitive member information. The returned membership includes join
   * timestamp, membership id, community id, and member user id. Access controls
   * enforce read permissions: typically, only members of the community, the
   * user themselves, or admins may see certain sensitive fields depending on
   * application logic.
   *
   * Common error cases include membershipId not found, membership not belonging
   * to the indicated community, or the requester lacking permissions to view
   * the details. Related endpoints are joining/leaving memberships and listing
   * all memberships for a community.
   *
   * @param connection
   * @param communityId ID of the community containing the membership.
   * @param membershipId Unique identifier of the community membership record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":membershipId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityMembership> {
    try {
      return await get__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId(
        {
          memberUser,
          communityId,
          membershipId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update membership metadata for a specific member of a community.
   *
   * This operation updates select metadata of a specific community membership.
   * It references the community_platform_community_memberships model, where
   * each membership links a user and community. Updatable fields may include
   * the joined_at timestamp or analytic/status fields if present, but not the
   * member user or community association, which are immutable for each record.
   *
   * Typically only the user themselves or an adminUser may update a community
   * membership. Attempts to transfer membership to another user, change the
   * community, or duplicate an existing membership are forbidden and will
   * result in errors. Auditability is preserved by updating timestamps on every
   * change and logging admin-invoked changes.
   *
   * Common errors: insufficient permissions, attempts to edit immutable fields,
   * or constraints violation. Related endpoints are membership creation,
   * deletion, and listing for communities.
   *
   * @param connection
   * @param communityId ID of the community in which the membership exists.
   * @param membershipId Unique identifier of the membership to update.
   * @param body Payload specifying updatable fields for the membership, such as
   *   joined_at or auxiliary analytic fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":membershipId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityMembership.IUpdate,
  ): Promise<ICommunityPlatformCommunityMembership> {
    try {
      return await put__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId(
        {
          memberUser,
          communityId,
          membershipId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a user from a community (leave) by deleting their membership.
   *
   * This operation deletes an individual user's membership from a community.
   * The path specifies communityId and membershipId, and the corresponding
   * record in community_platform_community_memberships is permanently removed.
   * Only the membership's owner (the user themselves) or adminUsers are
   * permitted to invoke this deletion, enforcing business rules about voluntary
   * leaving or admin enforcement (e.g., bans).
   *
   * On success, the system removes the membership, updates the personalized
   * home feed and recent communities lists, and adjusts the member count for
   * the community. If the membership is not found, does not belong to the
   * indicated community, or is targeted by an unauthorized user, appropriate
   * errors and permission denials are returned.
   *
   * This operation does not affect the user's account or other memberships, and
   * is specific to the one community indicated by the path. Related endpoints
   * include join/creation, listing community memberships, and admin ban flows.
   *
   * @param connection
   * @param communityId ID of the community from which the user is to be
   *   removed.
   * @param membershipId Unique identifier for the membership to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":membershipId")
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_memberUser_communities_$communityId_memberships_$membershipId(
        {
          memberUser,
          communityId,
          membershipId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
