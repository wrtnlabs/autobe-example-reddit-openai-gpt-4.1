import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_memberUser_communities } from "../../../../providers/post__communityPlatform_memberUser_communities";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { put__communityPlatform_memberUser_communities_$communityId } from "../../../../providers/put__communityPlatform_memberUser_communities_$communityId";

import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/memberUser/communities")
export class CommunityplatformMemberuserCommunitiesController {
  /**
   * Create a new sub-community (community_platform_communities).
   *
   * This endpoint allows authenticated member or admin users to create a new
   * sub-community, providing a name (validated for uniqueness and format),
   * category reference, optional description, logo/banner URIs, and rules as
   * documented by business logic and the community_platform_communities
   * schema.
   *
   * Ownership is set to the authenticated user making the request and is
   * immutable for the life of the community. The operation enforces naming and
   * categorization business rules, initializing member count and joined status
   * appropriately. All required and optional attributes are validated per
   * schema and platform business rules. Conflicts or violations return error
   * messages as described in the requirements (e.g., name in use or invalid
   * format).
   *
   * Successfully created communities are immediately available for exploration,
   * joining, and post composition actions.
   *
   * @param connection
   * @param body Community creation input, including required and optional
   *   attributes for a new sub-community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: ICommunityPlatformCommunity.ICreate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await post__communityPlatform_memberUser_communities({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata and settings of a specific community (excluding
   * name/category).
   *
   * This operation updates mutable metadata for a given sub-community by
   * communityId, including fields like description, logo/image URI, banner URI,
   * and optionally community rules (if managed through the same DTO). The
   * operation references the community_platform_communities Prisma model, which
   * defines community structureâ€”name (immutable), description (max 200 chars),
   * logo_uri, banner_uri, and soft delete timestamp. Category is not editable
   * after initial creation.
   *
   * Only the original community creator (owner, referenced by owner_id) may
   * invoke this operation. Ownership is immutable and enforced at the
   * application logic layer. Attempts by non-owners will result in permission
   * errors. The update is reflected in updated_at and triggers updates in
   * contextual feeds and sidebars throughout the UI.
   *
   * Mutable fields are validated for business rules: description may be up to
   * 200 characters, logo/banner URIs must conform to application standards, and
   * attempts to change immutable fields (name, category_id) will return an
   * explicit error. All changes are permanently auditable via the updated_at
   * timestamp.
   *
   * Error scenarios include unauthorized user access, input exceeding allowed
   * field lengths, or incorrect attempts to update immutable properties.
   * Related APIs include community creation, soft deletion, membership
   * management, and rule editing endpoints.
   *
   * @param connection
   * @param communityId Unique identifier for the target community to update.
   * @param body Payload containing updatable community metadata (excluding
   *   name/category).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":communityId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunity.IUpdate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await put__communityPlatform_memberUser_communities_$communityId({
        memberUser,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
