import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_memberUser_communities_$communityId_rules } from "../../../../../providers/post__communityPlatform_memberUser_communities_$communityId_rules";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";
import { patch__communityPlatform_memberUser_communities_$communityId_rules } from "../../../../../providers/patch__communityPlatform_memberUser_communities_$communityId_rules";
import { put__communityPlatform_memberUser_communities_$communityId_rules_$ruleId } from "../../../../../providers/put__communityPlatform_memberUser_communities_$communityId_rules_$ruleId";
import { delete__communityPlatform_memberUser_communities_$communityId_rules_$ruleId } from "../../../../../providers/delete__communityPlatform_memberUser_communities_$communityId_rules_$ruleId";

import { ICommunityPlatformCommunityRule } from "../../../../../api/structures/ICommunityPlatformCommunityRule";
import { IPageICommunityPlatformCommunityRule } from "../../../../../api/structures/IPageICommunityPlatformCommunityRule";

@Controller("/communityPlatform/memberUser/communities/:communityId/rules")
export class CommunityplatformMemberuserCommunitiesRulesController {
  /**
   * Create a new rule for a community (community_platform_community_rules
   * table).
   *
   * This operation enables a community owner to add a new rule to their
   * community’s rules set, as stored in the community_platform_community_rules
   * table. Only the user who owns the target community may invoke this
   * operation; enforcement of ownership is critical per business logic. Upon
   * execution, the rule text is validated (up to 100 characters) and the
   * rule_index is determined based on the existing sequence (max 10 rules
   * allowed).
   *
   * The new rule is stored with references to the community and its insertion
   * index, ensuring correct presentation order for UI and enforcement. Attempts
   * to add a rule when already at maximum count, or by a non-owner, will result
   * in an error. This endpoint integrates with safeguards ensuring that
   * deletion of a community cascades to all associated rules. Success returns
   * the created rule, including its unique ID, text, order, and metadata for
   * proper list display.
   *
   * Relevant for admins or owners managing community guidelines and
   * transparency, and for UI features showing live-updated rules lists after
   * ownership actions.
   *
   * @param connection
   * @param communityId ID of the community that will receive the new rule.
   * @param body Information for the new rule to insert (rule_text, automatic
   *   rule_index).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.ICreate,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await post__communityPlatform_memberUser_communities_$communityId_rules(
        {
          memberUser,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search all rules for a specific community.
   *
   * This operation retrieves a collection of up to 10 rules for a specified
   * community, leveraging the community_platform_community_rules table. Each
   * rule contains a rule_index, rule_text, and created_at timestamp, and is
   * directly related to the referenced community via community_id. Rules are
   * used for informational and business constraint purposes, powering the UI
   * display in community info boxes and rule editors.
   *
   * The endpoint supports advanced filtering and pagination (useful for large
   * communities or future extensibility), though business rules enforce a
   * maximum of 10 rules per community. Only authenticated users (typically
   * owners or admins) may view or edit the full list; public users may only see
   * the visible subset. Security and privacy controls ensure sensitive or draft
   * rules are not leaked.
   *
   * Related endpoints include community creation (rule setup), community
   * metadata updating, and rule editing/removal flows. Error scenarios are
   * non-existent or unauthorized community, or attempts to access protected
   * rules by non-owners/admins.
   *
   * @param connection
   * @param communityId ID of the community whose rules are being
   *   listed/searched.
   * @param body Optional filtering/paging criteria for rules list (e.g., search
   *   text or page).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.IRequest,
  ): Promise<IPageICommunityPlatformCommunityRule> {
    try {
      return await patch__communityPlatform_memberUser_communities_$communityId_rules(
        {
          memberUser,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific community rule (community_platform_community_rules
   * table).
   *
   * This operation allows the owner of a community—or an adminUser—to update a
   * specific community rule’s contents, as represented by the
   * community_platform_community_rules table. Only the owning member or an
   * admin user may edit rules; other users are denied access per business
   * requirements.
   *
   * Input validation ensures the rule text does not exceed 100 characters, with
   * all changes audit-logged and respecting ordering (rule_index cannot be
   * changed through this endpoint). Business constraints prohibit editing rules
   * for non-existent communities or rules not belonging to the specified
   * community. If the community has been deleted (soft delete), or if maximum
   * rules are already present, these must be validated in logic.
   *
   * After successful update, the endpoint returns the updated rule, confirming
   * all persisted changes for UI and compliance. Only non-deleted, valid rules
   * may be updated.
   *
   * @param connection
   * @param communityId ID of the community containing the rule to update.
   * @param ruleId ID of the rule to update.
   * @param body Updated rule data—rule_text only.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":ruleId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.IUpdate,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await put__communityPlatform_memberUser_communities_$communityId_rules_$ruleId(
        {
          memberUser,
          communityId,
          ruleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific community rule (community_platform_community_rules
   * table).
   *
   * This endpoint allows the owner of a community or an adminUser to remove a
   * particular rule from a community’s rules, as per the
   * community_platform_community_rules table. Deletion is restricted to
   * validated owners or platform admins; unauthorized attempts are denied.
   *
   * Upon successful deletion, the rule is permanently removed from the
   * database, and any UI or rules display must update accordingly. Remaining
   * rules are renumbered (order/index) in the application logic if necessary to
   * preserve presentation sequence. No information remains in the database
   * regarding the deleted rule. Attempts to delete a rule from a non-existent
   * community or on a rule not belonging to the specified community will fail
   * with proper error messaging.
   *
   * This operation does not implement a soft-delete mechanism, as the schema
   * does not provide for a deleted_at column on rules. All deletions are
   * permanent and cannot be recovered by end users.
   *
   * @param connection
   * @param communityId ID of the community containing the rule to delete.
   * @param ruleId ID of the rule to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":ruleId")
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_memberUser_communities_$communityId_rules_$ruleId(
        {
          memberUser,
          communityId,
          ruleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
