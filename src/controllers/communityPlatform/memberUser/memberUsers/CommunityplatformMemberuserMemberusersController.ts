import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { get__communityPlatform_memberUser_memberUsers_$memberUserId } from "../../../../providers/get__communityPlatform_memberUser_memberUsers_$memberUserId";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";

import { ICommunityPlatformMemberUser } from "../../../../api/structures/ICommunityPlatformMemberUser";

@Controller("/communityPlatform/memberUser/memberUsers/:memberUserId")
export class CommunityplatformMemberuserMemberusersController {
  /**
   * Get detailed member user information by ID
   * (community_platform_memberusers).
   *
   * This endpoint allows retrieval of a member user's complete profile and
   * related attributes given their unique identifier, as defined in the
   * community_platform_memberusers Prisma model.
   *
   * It is used for backend logic and UI features such as profile display,
   * author information on posts and comments, and eligibility for content
   * actions. Only authenticated users and platform admins may use this
   * endpoint, in compliance with business access rules and privacy context.
   *
   * The returned object includes display name, status, timestamps, and all
   * business logic-required attributes. Related information from referencing
   * tables (e.g. posts, comments, community memberships) may be used by clients
   * to contextualize the user's activity footprint.
   *
   * If the requested member user does not exist or access is denied due to
   * authorization constraints, a 404 or appropriate error response is
   * provided.
   *
   * @param connection
   * @param memberUserId Unique identifier of the member user to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("memberUserId")
    memberUserId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformMemberUser> {
    try {
      return await get__communityPlatform_memberUser_memberUsers_$memberUserId({
        memberUser,
        memberUserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
