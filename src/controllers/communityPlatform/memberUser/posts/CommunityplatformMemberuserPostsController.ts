import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_memberUser_posts } from "../../../../providers/post__communityPlatform_memberUser_posts";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { put__communityPlatform_memberUser_posts_$postId } from "../../../../providers/put__communityPlatform_memberUser_posts_$postId";
import { delete__communityPlatform_memberUser_posts_$postId } from "../../../../providers/delete__communityPlatform_memberUser_posts_$postId";

import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/memberUser/posts")
export class CommunityplatformMemberuserPostsController {
  /**
   * Create a new post in community_platform_posts by providing the post details
   * and community association.
   *
   * POST /posts creates a new post entry in the system by inserting a record
   * into the community_platform_posts table. Required inputs are verified for
   * compliance: a valid, existing communityId must be specified, title and body
   * conform to business length/value rules, and the author must be an
   * authenticated memberUser or adminUser. If a display name is omitted or
   * empty, 'Anonymous' is automatically assigned.
   *
   * Security logic ensures posts can be created only when authenticated;
   * otherwise, the operation is rejected. On successful creation, the post is
   * associated with the authenticated user's id, the specified community, and
   * an appropriate author display name. Immediate error feedback is provided
   * for missing fields, invalid lengths, or community not found. The resulting
   * object includes all post fields for client-side confirmation and feed
   * refresh.
   *
   * @param connection
   * @param body Data for the new post: communityId, title, body, optional
   *   display name.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: ICommunityPlatformPost.ICreate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await post__communityPlatform_memberUser_posts({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a post's title, body, or display name in community_platform_posts by
   * postId.
   *
   * PUT /posts/{postId} allows an authenticated user to edit their own post or
   * for adminUser to update any post. The operation locates the target record
   * by postId and ensures the requester is authorized to modify the post
   * according to business ownership and moderation rules. Clients may update
   * the title (5–120 chars), body (10–10,000 chars), and display name (0–32
   * chars, optional—defaults to 'Anonymous' if empty).
   *
   * Validation constraints are enforced: posts must not be deleted, inputs must
   * match content rules, and community or author associations cannot be changed
   * via this operation. If requested by a non-author (non-admin), the operation
   * returns a permission error. The response contains the updated post details.
   * Error handling covers not found, deleted, or unauthorized modification
   * attempts.
   *
   * @param connection
   * @param postId The unique identifier (UUID) of the post to update.
   * @param body Fields allowed for update: title, body, optional display name
   *   (business rule checks enforced).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPost.IUpdate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await put__communityPlatform_memberUser_posts_$postId({
        memberUser,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an existing post in community_platform_posts by postId; only
   * allowed by author or adminUser.
   *
   * DELETE /posts/{postId} removes a post from user feeds and search by marking
   * the record as deleted (soft delete—sets deleted_at field) in
   * community_platform_posts. Only the author (memberUser/adminUser) or an
   * adminUser can delete. All underlying business checks for ownership,
   * existence, and non-previously-deleted status are enforced.
   *
   * Cascading application logic removes or marks as deleted dependent entities
   * such as comments or votes as per compliance rules. Attempted deletion of
   * non-owned posts by non-admins returns a permission error. Once deleted, the
   * post becomes inaccessible via normal queries, ensuring user privacy and
   * platform integrity. The operation does not return a body on success.
   *
   * @param connection
   * @param postId The UUID of the post to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_memberUser_posts_$postId({
        memberUser,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
