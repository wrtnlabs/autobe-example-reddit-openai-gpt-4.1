import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_memberUser_categories } from "../../../../providers/patch__communityPlatform_memberUser_categories";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { get__communityPlatform_memberUser_categories_$categoryId } from "../../../../providers/get__communityPlatform_memberUser_categories_$categoryId";

import { IPageICommunityPlatformCategory } from "../../../../api/structures/IPageICommunityPlatformCategory";
import { ICommunityPlatformCategory } from "../../../../api/structures/ICommunityPlatformCategory";

@Controller("/communityPlatform/memberUser/categories")
export class CommunityplatformMemberuserCategoriesController {
  /**
   * Search and list community platform categories with filtering and
   * pagination.
   *
   * Retrieve a list of categories from the community_platform_categories table,
   * enabling advanced filters by name, description (with GIN/trigram search
   * optimizations), and display_order. Pagination and sorting options are
   * supported as per system-wide listing standards. This operation allows
   * authenticated users (adminUser/memberUser) to discover categories for
   * community creation or UI selector purposes.
   *
   * The API response contains summary data for each category, such as ID, name,
   * display order, optional description, timestamps, and all fields defined in
   * the Prisma schema, enabling frontend typeahead, dropdowns, and management
   * interfaces.
   *
   * Permissions: This operation is available to both adminUser and memberUser
   * roles. It does not expose any sensitive data and is suitable for public
   * category listings. Error handling covers validation of search queries and
   * response limits to prevent abusive or nonsensical lookups.
   *
   * @param connection
   * @param body Search and filter criteria for categories, including
   *   name/description match, sorting, and paging.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: ICommunityPlatformCategory.IRequest,
  ): Promise<IPageICommunityPlatformCategory.ISummary> {
    try {
      return await patch__communityPlatform_memberUser_categories({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a category by categoryId (UUID) from
   * community_platform_categories.
   *
   * Obtains a single category by its unique identifier from the
   * community_platform_categories table. The response includes the primary key,
   * name, display order, description, and timestamps as per the Prisma schema.
   *
   * Permissions: Both adminUser and memberUser are permitted. This is suitable
   * for populating category edit dialogs or detailed UI category displays.
   *
   * Security: Exposes only non-sensitive business dictionary data, restricted
   * by access roles. Errors include not found (if the UUID does not match any
   * row).
   *
   * @param connection
   * @param categoryId Unique identifier for the target category
   *   (community_platform_categories.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await get__communityPlatform_memberUser_categories_$categoryId({
        memberUser,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
