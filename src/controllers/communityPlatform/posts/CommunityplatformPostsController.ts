import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_posts } from "../../../providers/patch__communityPlatform_posts";
import { get__communityPlatform_posts_$postId } from "../../../providers/get__communityPlatform_posts_$postId";

import { IPageICommunityPlatformPost } from "../../../api/structures/IPageICommunityPlatformPost";
import { ICommunityPlatformPost } from "../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/posts")
export class CommunityplatformPostsController {
  /**
   * List/query/filter posts with pagination (for feed, search, home).
   *
   * Retrieves a searchable, filterable, and paginated list of all posts
   * (threads) available on the platform. This operation supports filtering by
   * community, search keyword, sort order (newest/top), and full pagination
   * using standard query interfaces. Posts marked deleted (deleted_at != null)
   * are excluded from query results, ensuring that only active posts are shown
   * to users.
   *
   * Patch method supports advanced and dynamic query construction for clients
   * and UI components, addressing home, community, or search/recent feeds. This
   * operation is public and does not require authentication to read, but
   * individual post creation/edit/delete APIs do. The result format returns
   * paginated, ordered data suitable for infinite scroll, load more, or feed
   * rendering features.
   *
   * @param connection
   * @param body Query filters, search keywords, pagination and sorting options
   *   for post listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformPost.IRequest,
  ): Promise<IPageICommunityPlatformPost.ISummary> {
    try {
      return await patch__communityPlatform_posts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific post by postId from
   * community_platform_posts.
   *
   * This operation retrieves the full details of a specific post on the
   * community platform, as identified by the provided postId URL parameter. The
   * community_platform_posts table is queried for an entry matching the given
   * postId, and returns all its major fields including the associated community
   * ID, author/member ID, post title, content body, author display name (if
   * any), creation timestamp, last update timestamp, and deleted_at for
   * soft-delete state. If the post exists, it is returned in full; if not, a
   * not-found error is expected. Ownership and author details can be inferred
   * through relations to the member and community entities. Business logic
   * ensures that all posts are accessible for reading (public), but internal
   * fields such as deleted_at or author_display_name are only exposed according
   * to their definition in the schema. This endpoint is meant for consumption
   * by all user roles without authentication (public access). Edge cases are
   * handled gracefully; if the post does not exist or was deleted, a suitable
   * error message is provided. APIs related to editing, deletion or voting on
   * posts require additional endpoints. This endpoint is optimized for read
   * performance and may leverage indexes on postId. Soft-deleted posts (with
   * deleted_at set) should typically not be returned unless specifically
   * intended.
   *
   * @param connection
   * @param postId The unique identifier (UUID) of the post to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await get__communityPlatform_posts_$postId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
