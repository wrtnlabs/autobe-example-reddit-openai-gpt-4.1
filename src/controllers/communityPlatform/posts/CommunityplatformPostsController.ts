import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_posts } from "../../../providers/patch__communityPlatform_posts";
import { get__communityPlatform_posts_$postId } from "../../../providers/get__communityPlatform_posts_$postId";

import { IPageICommunityPlatformPost } from "../../../api/structures/IPageICommunityPlatformPost";
import { ICommunityPlatformPost } from "../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/posts")
export class CommunityplatformPostsController {
  /**
   * Search, filter, and retrieve a paginated list of posts from
   * community_platform_posts with advanced query options.
   *
   * Advanced post searching is provided via this PATCH request, allowing
   * clients to submit structured criteria for retrieving posts from the
   * community_platform_posts table. Search parameters include communityId(s),
   * authorUserId(s), title/body text match, and sort order (newest or top).
   * Result data is paginated (20 results per page by default), with sorting
   * business logic reflecting platform rules: newest sorts by creation time and
   * id, top sorts by score, then latest, then id.
   *
   * This operation adheres to business constraints such as minimum query length
   * (2+ characters for keyword searches), filtering of soft-deleted posts, and
   * member-specific restrictions when searching posts across joined
   * communities. Unauthenticated (guest) users may freely search published
   * posts system-wide, but results will exclude private or restricted content
   * as per platform rules.
   *
   * Error handling includes short query rejection and limits excessive page
   * requests. The response returns an IPageICommunityPlatformPost.ISummary for
   * efficient feed rendering.
   *
   * @param connection
   * @param body Search and pagination parameters for post filtering
   *   (communityIds, authorUserIds, keyword, sortOrder, page).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformPost.IRequest,
  ): Promise<IPageICommunityPlatformPost.ISummary> {
    try {
      return await patch__communityPlatform_posts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific post from
   * community_platform_posts by postId.
   *
   * Use this GET endpoint to fetch a single post by its unique postId
   * identifier from the community_platform_posts table. This operation returns
   * all post fields including title, body, community identity, author user id
   * (member or admin), author display name, creation and update time, and
   * relationships to the community and owner. Deleted or soft-deleted posts are
   * filtered from results.
   *
   * Security logic ensures that even guests can view public posts, but only
   * non-private, non-removed items are returned. Ownership and edit permissions
   * are not handled here but reflected in other business endpoints. Edge cases,
   * such as non-existent or deleted posts, return appropriate error statuses,
   * and fields are structured for detail screens with related entities
   * (community, comments, etc.).
   *
   * @param connection
   * @param postId The UUID of the post to fetch details for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await get__communityPlatform_posts_$postId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
