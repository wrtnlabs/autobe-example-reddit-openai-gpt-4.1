import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_member_votes } from "../../../../providers/post__communityPlatform_member_votes";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { patch__communityPlatform_member_votes } from "../../../../providers/patch__communityPlatform_member_votes";
import { get__communityPlatform_member_votes_$voteId } from "../../../../providers/get__communityPlatform_member_votes_$voteId";
import { put__communityPlatform_member_votes_$voteId } from "../../../../providers/put__communityPlatform_member_votes_$voteId";
import { delete__communityPlatform_member_votes_$voteId } from "../../../../providers/delete__communityPlatform_member_votes_$voteId";

import { ICommunityPlatformVote } from "../../../../api/structures/ICommunityPlatformVote";
import { IPageICommunityPlatformVote } from "../../../../api/structures/IPageICommunityPlatformVote";

@Controller("/communityPlatform/member/votes")
export class CommunityplatformMemberVotesController {
  /**
   * Create or update a vote for a post or comment.
   *
   * Create or update a user's vote on a specified post or comment. Only one
   * vote per user-target is retained; submitting a new vote overwrites any
   * prior. The value may be 1 (upvote), -1 (downvote), or 0 (neutral/remove
   * vote state). Voting on own content is forbidden in business logic and
   * checked at request time.
   *
   * Duplicate or conflicting votes are resolved by keeping the latest state.
   * Unauthorized or illogical attempts (e.g., voting on non-existent or own
   * content) result in standard error responses. On success, full vote record
   * is returned.
   *
   * @param connection
   * @param body Vote creation info: voter, target post/comment, and vote value
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformVote.ICreate,
  ): Promise<ICommunityPlatformVote> {
    try {
      return await post__communityPlatform_member_votes({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated, filtered vote records across posts and comments.
   *
   * Return a paginated list of votes cast by users on posts and comments. This
   * API supports advanced filters including by voter, post/comment, vote value
   * (up, down, neutral), and timestamp ranges for reviewing platform activity
   * or personal voting history.
   *
   * Access control permits admins to view all voting records, while members may
   * only retrieve their own. Pagination, searching, and sorting allow efficient
   * bulk review or individual account history. Proper error handling is
   * provided for invalid filters or unauthorized access attempts.
   *
   * @param connection
   * @param body Advanced filter, search, and pagination criteria for votes
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformVote.IRequest,
  ): Promise<IPageICommunityPlatformVote.ISummary> {
    try {
      return await patch__communityPlatform_member_votes({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed voting record by voteId.
   *
   * Returns a single voting record including full field data: who voted, the
   * target (post or comment), vote value, and creation/update metadata. Useful
   * for per-user or moderation review. Access is restricted by role.
   *
   * Errors are returned for requests with invalid or unauthorized vote IDs.
   * Common usage includes review of individual voting actions or for platform
   * moderation purposes.
   *
   * @param connection
   * @param voteId The unique identifier (UUID) of the vote record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformVote> {
    try {
      return await get__communityPlatform_member_votes_$voteId({
        member,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a user's existing vote on a post or comment in the community
   * platform.
   *
   * This operation allows a logged-in user to update their own vote on a post
   * or comment. It accepts the unique vote ID as a path parameter, checks that
   * the authenticated user is the owner of the vote (unless an admin override
   * is present), and updates the vote's value to either upvote (1), downvote
   * (-1), or none (0). The vote update is tracked with an updated_at timestamp
   * for audit compliance and history. Appropriate business logic is enforced to
   * prevent users from updating votes on their own content or multiple votes
   * per target. Admin users may update votes for moderation. The changed vote
   * value is instantly reflected in the net score and UI state.
   *
   * @param connection
   * @param voteId Unique ID of the vote to update.
   * @param body Updated vote information (vote value as 1, -1 or 0, and target
   *   identifiers).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformVote.IUpdate,
  ): Promise<ICommunityPlatformVote> {
    try {
      return await put__communityPlatform_member_votes_$voteId({
        member,
        voteId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (remove) a user's vote on a post or comment.
   *
   * This operation allows an authenticated user to remove (soft-delete) their
   * own vote on a post or comment, or for an admin to remove a user's vote as
   * part of moderation. It uses the vote's unique ID as a path parameter,
   * checks business rules for permission (ownership/admin), and sets the
   * deleted_at timestamp for soft deletion. The operation is tracked in audit
   * logs and affects the live score displayed for the target post or comment.
   *
   * @param connection
   * @param voteId Unique ID of the vote to remove (soft delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_member_votes_$voteId({
        member,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
