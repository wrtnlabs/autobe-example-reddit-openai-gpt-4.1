import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_member_posts_$postId_reports } from "../../../../../providers/post__communityPlatform_member_posts_$postId_reports";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patch__communityPlatform_member_posts_$postId_reports } from "../../../../../providers/patch__communityPlatform_member_posts_$postId_reports";
import { get__communityPlatform_member_posts_$postId_reports_$reportId } from "../../../../../providers/get__communityPlatform_member_posts_$postId_reports_$reportId";

import { ICommunityPlatformPostReport } from "../../../../../api/structures/ICommunityPlatformPostReport";
import { IPageICommunityPlatformPostReport } from "../../../../../api/structures/IPageICommunityPlatformPostReport";

@Controller("/communityPlatform/member/posts/:postId/reports")
export class CommunityplatformMemberPostsReportsController {
  /**
   * Create a new report about a post for moderation review
   * (community_platform_post_reports table).
   *
   * Create a new report regarding a given post, allowing members or admins to
   * flag inappropriate content, spam, abuse, or rule violations for moderation
   * review. The reporting user must be authenticated, and the target post
   * specified by postId. Request details must include a report_type for
   * category (such as spam, abuse, etc), a descriptive reason, and will be
   * tracked under 'open' status until reviewed. The operation enforces strict
   * input validation: report_type must match platform-allowed values, and
   * reason must be non-empty, up to 1000 chars (plain text). Only one report
   * per post per member is allowed; duplicate reports by the same member are
   * rejected. Admins can also create reports for escalated cases. Each report
   * is associated with the referenced post and the authenticated reporting
   * user, allowing follow-up workflow by moderators. Related APIs: PUT and
   * DELETE operations for managing reports, and admin moderation endpoints for
   * escalations and resolution management. Error handling covers permission
   * issues (non-members/guests can't report), invalid input, and business rule
   * failures.
   *
   * @param connection
   * @param postId Unique identifier of the target post being reported.
   * @param body Information for creating a report on a specific post, including
   *   report_type, reason, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostReport.ICreate,
  ): Promise<ICommunityPlatformPostReport> {
    try {
      return await post__communityPlatform_member_posts_$postId_reports({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated, filtered search for reports/flags on a given post.
   *
   * This operation returns a paginated list of post report entities associated
   * with a specific post (by postId). The operation fetches from the
   * community_platform_post_reports table, using advanced filtering, sorting,
   * and pagination as set by the request DTO. Each report includes details such
   * as reported_by_member_id, admin_id, report_type, reason, status, resolution
   * notes, and creation/updated/resolved timestamps. Authorization is enforced:
   * admins may view all reports; members may view their own filed reports;
   * guests are denied. Use cases include moderation panels, abuse workflows,
   * and user transparency features. Error scenarios arise when accessing
   * reports for deleted/non-existent posts or without appropriate role. This
   * endpoint does not allow creation or modification of reportsâ€”only
   * search/list. Use the related endpoints to fetch report detail or to file a
   * new report.
   *
   * @param connection
   * @param postId The UUID of the post for which reports are queried.
   * @param body Query/filter parameters for paginated searching of post
   *   reports.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostReport.IRequest,
  ): Promise<IPageICommunityPlatformPostReport> {
    try {
      return await patch__communityPlatform_member_posts_$postId_reports({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail for a specific report on a post by reportId.
   *
   * This operation retrieves details of an individual report concerning a
   * particular post, as identified by postId and reportId. It reads a full
   * record from community_platform_post_reports, returning reference IDs for
   * reporter and admin, the report type and reason, statuses and resolution
   * context, and all matching timestamps. Security guarantees that only the
   * reporter for the report or an admin can view the content. The endpoint is
   * used for moderation, review, transparency, and dispute workflows, and is
   * strictly read-only. Accessing a non-existent or unauthorized report results
   * in an error. Other API endpoints exist for creating, updating, or resolving
   * reports through administrative actions. Access is denied to guests.
   *
   * @param connection
   * @param postId The UUID of the post to which the report belongs.
   * @param reportId The unique identifier (UUID) of the specific report entity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostReport> {
    try {
      return await get__communityPlatform_member_posts_$postId_reports_$reportId(
        {
          member,
          postId,
          reportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
