import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__communityPlatform_member_appeals } from "../../../../providers/post__communityPlatform_member_appeals";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { ICommunityPlatformAppeal } from "../../../../api/structures/ICommunityPlatformAppeal";

@Controller("/communityPlatform/member/appeals")
export class CommunityplatformMemberAppealsController {
  /**
   * Create a moderation/admin appeal for a specific admin action on behalf of a
   * member.
   *
   * Create a new appeal on behalf of a member against a specific admin action.
   * The new appeal includes references to the member, the admin action record,
   * the appeal status (e.g., 'submitted'), and initial rationale if provided.
   * After the appeal is created, it enters the admin review workflow for
   * handling and resolution. Members may file appeals for actions taken against
   * their own accounts or content, and status is initially set to a submitted
   * or pending value. Subsequent updates/processes are handled via moderation
   * workflow.
   *
   * @param connection
   * @param body Appeal creation data: member ID, referenced admin action ID,
   *   status, and optional rationale/notes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformAppeal.ICreate,
  ): Promise<ICommunityPlatformAppeal> {
    try {
      return await post__communityPlatform_member_appeals({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
