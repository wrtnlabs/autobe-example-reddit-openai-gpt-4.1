import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_member_sessions } from "../../../../providers/patch__communityPlatform_member_sessions";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { get__communityPlatform_member_sessions_$sessionId } from "../../../../providers/get__communityPlatform_member_sessions_$sessionId";
import { put__communityPlatform_member_sessions_$sessionId } from "../../../../providers/put__communityPlatform_member_sessions_$sessionId";
import { delete__communityPlatform_member_sessions_$sessionId } from "../../../../providers/delete__communityPlatform_member_sessions_$sessionId";

import { IPageICommunityPlatformSession } from "../../../../api/structures/IPageICommunityPlatformSession";
import { ICommunityPlatformSession } from "../../../../api/structures/ICommunityPlatformSession";

@Controller("/communityPlatform/member/sessions")
export class CommunityplatformMemberSessionsController {
  /**
   * Search and paginate login sessions (current user only) as per the
   * community_platform_sessions table.
   *
   * Retrieve a paginated list of the authenticated user's login sessions. This
   * endpoint allows users (members or admins) to view all of their active and
   * historical login sessions, each representing a device/browser where their
   * account is or was logged in. Sessions include primary metadata such as
   * expiration, creation time, device fingerprint, and invalidation status.
   *
   * Security is enforced such that users can only review their own sessions;
   * admins can review their own admin sessions as well (but not those of others
   * unless a dedicated moderation tool is used). To protect user privacy,
   * cross-account and cross-role access is not permitted.
   *
   * The response is paginated to efficiently support accounts with many active
   * or historical sessions and supports advanced search and filtering
   * parameters, such as device type, expiration date ranges, or session state.
   * This operation is directly tied to the community_platform_sessions schema,
   * which includes relationships to both members and admin accounts as
   * described in the DB schema comments.
   *
   * This API is required for session management UIs (such as log out
   * everywhere), device security reviews, and is referenced in
   * authentication-related documentation and user settings.
   *
   * @param connection
   * @param body Criteria for searching and paginating sessions (e.g., date
   *   ranges, active/inactive state).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformSession.IRequest,
  ): Promise<IPageICommunityPlatformSession> {
    try {
      return await patch__communityPlatform_member_sessions({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get session metadata and info for a specific session by ID.
   *
   * Retrieve detailed session information for a given sessionId. Includes
   * metadata about the session, associated member or admin, device and browser
   * information, and timestamps. Enables security audits by administrators and
   * allows members to see their own active sessions as part of 'manage account'
   * or 'log out everywhere' features. Ensures that only authorized parties can
   * access session details—members can only see their own, admins see all. Does
   * not expose sensitive token values in response. Records that have been
   * soft-deleted (deleted_at set) are excluded by default unless explicitly
   * requested during auditing.
   *
   * @param connection
   * @param sessionId The unique identifier of the session record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sessionId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSession> {
    try {
      return await get__communityPlatform_member_sessions_$sessionId({
        member,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update device/session metadata and timestamps for a specific session ID.
   *
   * Update allowed fields on a session by its ID—such as device fingerprint,
   * last-used time, or planned expiration time. Only accessible to the
   * session's owner (member/admin) or an administrator. Used in account
   * management or device session management screens. Mutations are strictly
   * limited to session metadata (device, times); tokens are never returned or
   * modifiable via this method. The endpoint validates session existence,
   * integrity, and ownership prior to updating. The response returns the
   * updated session entity. Supports hard or soft expiration extension, but not
   * token regeneration. If session has been soft-deleted, update is rejected.
   *
   * @param connection
   * @param sessionId The session record ID to update.
   * @param body Fields to update on the session (device info, expiration,
   *   timestamps, not token values).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sessionId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformSession.IUpdate,
  ): Promise<ICommunityPlatformSession> {
    try {
      return await put__communityPlatform_member_sessions_$sessionId({
        member,
        sessionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (invalidate) a session by ID; immediate logout effect.
   *
   * Soft delete (invalidate) a session, marking its deleted_at timestamp.
   * Invalidates the JWT and refresh token for immediate effect. Serves as
   * system/admin-initiated forced logout for user or admin, or user self-logout
   * for a session. Only session owner or admin can perform this deletion. The
   * record remains for audit/logging but cannot be reactivated. Fails if
   * already deleted. This endpoint fulfills logout everywhere/log out current
   * device scenarios in account management flows.
   *
   * @param connection
   * @param sessionId Unique ID for the session to invalidate/delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sessionId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_member_sessions_$sessionId({
        member,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
