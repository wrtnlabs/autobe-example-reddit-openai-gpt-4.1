import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_member_communities_$communityId_recentCommunities } from "../../../../../providers/post__communityPlatform_member_communities_$communityId_recentCommunities";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patch__communityPlatform_member_communities_$communityId_recentCommunities } from "../../../../../providers/patch__communityPlatform_member_communities_$communityId_recentCommunities";
import { get__communityPlatform_member_communities_$communityId_recentCommunities_$recentCommunityId } from "../../../../../providers/get__communityPlatform_member_communities_$communityId_recentCommunities_$recentCommunityId";
import { delete__communityPlatform_member_communities_$communityId_recentCommunities_$recentCommunityId } from "../../../../../providers/delete__communityPlatform_member_communities_$communityId_recentCommunities_$recentCommunityId";

import { ICommunityPlatformRecentCommunity } from "../../../../../api/structures/ICommunityPlatformRecentCommunity";
import { IPageICommunityPlatformRecentCommunity } from "../../../../../api/structures/IPageICommunityPlatformRecentCommunity";

@Controller(
  "/communityPlatform/member/communities/:communityId/recentCommunities",
)
export class CommunityplatformMemberCommunitiesRecentcommunitiesController {
  /**
   * Add a community to the authenticated member's recent communities list.
   *
   * Adds or updates a community in the member's recent communities list to
   * enhance sidebar navigation and personalized recommendations. This operation
   * references the community_platform_recent_communities schema and operates
   * via the communityId path parameter, identifying the community the user is
   * interacting with. Only authenticated members can add to their own recent
   * communities list, which is automatically refreshed each time the user
   * visits, joins, or interacts meaningfully.
   *
   * The operation ensures that only one recent record per (member, community)
   * pair exists at any time, updating the timestamp if present or creating a
   * new entry if absent. This list is used to display up to five of the user's
   * most recently engaged communities. Membership here does not represent full
   * join status, but enables UI features for quick access.
   *
   * Because the table is used for quick navigation, only members can perform
   * this action, and results are scoped to the current session/authenticated
   * account. This operation does not affect broader memberships or moderation,
   * and is only for usability improvements.
   *
   * @param connection
   * @param communityId The UUID of the target community to add to recent
   *   communities.
   * @param body Payload for recording a recent visit to the community. Contains
   *   only necessary context for the backend to identify the user and
   *   timestamp, which are set server-side.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async addToRecentCommunities(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformRecentCommunity.ICreate,
  ): Promise<ICommunityPlatformRecentCommunity> {
    try {
      return await post__communityPlatform_member_communities_$communityId_recentCommunities(
        {
          member,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List recent communities touched by a member for sidebar/recent view
   * display.
   *
   * Retrieve a filterable, paginated list of recent communities interacted with
   * by a member, from within the context of a specific community. Used for
   * powering recent sidebar widgets, quick community switches, or personal
   * navigation features. The endpoint supports filtering and sorting by
   * recency, optionally filtering by member or activity window. Only
   * authentication is required; returns a pagination result containing summary
   * information of the member's recent communities list. Returns only
   * communities that the member has recently visited or engaged with, not a
   * full membership or global search.
   *
   * @param connection
   * @param communityId Contextual/community ID for which to list recent
   *   communities.
   * @param body Filter terms, paging, and sorting for recent communities
   *   search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformRecentCommunity.IRequest,
  ): Promise<IPageICommunityPlatformRecentCommunity.ISummary> {
    try {
      return await patch__communityPlatform_member_communities_$communityId_recentCommunities(
        {
          member,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information on a recent community for
   * context/community/member auditing or display.
   *
   * Get detail on a specific recent community row for a member, for a given
   * community context. The endpoint returns current state and recency
   * information for that recent community entity. Used by user-profile activity
   * displays, audit views, and membership navigation UIs. Only authenticated
   * users may access, and results may be permission-filtered for privacy or
   * moderation needs. If the entry does not exist or permissions are violated,
   * an appropriate error is returned. This endpoint does not allow editing or
   * deletion; used only for state inspection or activity logging.
   *
   * @param connection
   * @param communityId Current or context community for this recent entry.
   * @param recentCommunityId Unique recent community entity ID to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recentCommunityId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("recentCommunityId")
    recentCommunityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformRecentCommunity> {
    try {
      return await get__communityPlatform_member_communities_$communityId_recentCommunities_$recentCommunityId(
        {
          member,
          communityId,
          recentCommunityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a community from a member's list of recent communities.
   *
   * Permanently removes the mapping between the member and the community from
   * the recent communities list. This is a hard delete operation as supported
   * by the schema. The operation only affects which communities appear in the
   * user's recent communities sidebar or similar UI components. It does not
   * affect actual community membership or content, and is accessible only to
   * authenticated members. This action cannot be undone.
   *
   * @param connection
   * @param communityId The UUID of the community being referenced for the
   *   recent record.
   * @param recentCommunityId The UUID of the recent_community mapping record to
   *   remove from the member's list.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":recentCommunityId")
  public async eraseRecentCommunity(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("recentCommunityId")
    recentCommunityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_member_communities_$communityId_recentCommunities_$recentCommunityId(
        {
          member,
          communityId,
          recentCommunityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
