import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_member_communities_$communityId_rules } from "../../../../../providers/post__communityPlatform_member_communities_$communityId_rules";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patch__communityPlatform_member_communities_$communityId_rules } from "../../../../../providers/patch__communityPlatform_member_communities_$communityId_rules";
import { get__communityPlatform_member_communities_$communityId_rules_$ruleId } from "../../../../../providers/get__communityPlatform_member_communities_$communityId_rules_$ruleId";
import { put__communityPlatform_member_communities_$communityId_rules_$ruleId } from "../../../../../providers/put__communityPlatform_member_communities_$communityId_rules_$ruleId";
import { delete__communityPlatform_member_communities_$communityId_rules_$ruleId } from "../../../../../providers/delete__communityPlatform_member_communities_$communityId_rules_$ruleId";

import { ICommunityPlatformCommunityRule } from "../../../../../api/structures/ICommunityPlatformCommunityRule";
import { IPageICommunityPlatformCommunityRule } from "../../../../../api/structures/IPageICommunityPlatformCommunityRule";

@Controller("/communityPlatform/member/communities/:communityId/rules")
export class CommunityplatformMemberCommunitiesRulesController {
  /**
   * Add a new rule to a specified community.
   *
   * Creates and appends a new rule for the given community. Allows
   * owners/admins to curate their community's behavior policies. The payload
   * must meet length and uniqueness rules (one per index, max 10 rules of up to
   * 50 chars). Ownership/authorization checks are enforced via business logic,
   * and the result includes the new rule's id, index, and text. Soft/hard
   * limits are handled before creation. Only available to authorized
   * actors—ownership or admin status required.
   *
   * @param connection
   * @param communityId The UUID of the parent community to which the rule will
   *   be added.
   * @param body Single rule creation input, including rule index and text line
   *   (max 50 chars).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCommunityRule(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.ICreate,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await post__communityPlatform_member_communities_$communityId_rules(
        {
          member,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List all rules for a given community (paginated, for curation).
   *
   * Retrieves a list of all rules associated with a target community for
   * editing or curation purposes. This read operation enables community owners
   * or privileged users to review, sort, and search rules for their community.
   * Utilizes pagination and filtering payload per the standard request schema,
   * and references the Prisma table for validation. The rules list is capped at
   * 10 entries by business policy.
   *
   * While any user may view public rules, only authenticated members with
   * ownership/admin rights can curate, reorder, or edit them with this
   * endpoint. The operation guarantees that each rule is unique by (community,
   * rule_index), enabling efficient UI updates and owner workflows for rule
   * management. Results include rule index, text, and current ordering. Use for
   * both listing and configuring rules as allowed by policy.
   *
   * @param connection
   * @param communityId The UUID of the community whose rules are being listed.
   * @param body Filtering and pagination instructions for listing all rules of
   *   the given community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCommunityRules(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.IRequest,
  ): Promise<IPageICommunityPlatformCommunityRule> {
    try {
      return await patch__communityPlatform_member_communities_$communityId_rules(
        {
          member,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific rule from a community.
   *
   * Retrieves a single rule from the specified community for inspection or edit
   * preparation. The rule is identified by ruleId, which is unique per rule
   * row, and is returned with its index and text. This enables direct access
   * for per-rule display, edit UI, and policy review interfaces. Use primarily
   * for rule-editing flows or admin auditing. Any ownership or admin checks are
   * handled at a higher level of business logic as required by the platform.
   *
   * @param connection
   * @param communityId The UUID of the parent community owning the rule.
   * @param ruleId The UUID of the specific rule to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":ruleId")
  public async getCommunityRule(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await get__communityPlatform_member_communities_$communityId_rules_$ruleId(
        {
          member,
          communityId,
          ruleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Edit a specific rule for a given community.
   *
   * Updates the content or ordering of a community rule. Requires the rule to
   * be identified by ruleId within communityId, both provided as path
   * parameters. Only community owners and admins can edit or reorder community
   * rules; all changes must comply with maximum length (50 chars) and rule
   * ordering business constraints. This allows owners to maintain, correct, or
   * clarify their rules as community needs change.
   *
   * @param connection
   * @param communityId UUID of the parent community for which the rule is being
   *   edited.
   * @param ruleId UUID of the specific community rule to be updated.
   * @param body Input for editing the rule's index or text, respecting length
   *   and uniqueness rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":ruleId")
  public async updateCommunityRule(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.IUpdate,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await put__communityPlatform_member_communities_$communityId_rules_$ruleId(
        {
          member,
          communityId,
          ruleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a community rule permanently.
   *
   * Deletes a specific rule from the rule set of a given community. This
   * operation is only available to community owners and admins. The hard delete
   * removes the rule by ruleId from the communityId's rule set—resulting in
   * immediate disappearance from UI and moderation overlays. All business
   * constraints on rule count and ordering are enforced by subsequent
   * operations. No content is recoverable after this action. Application logic
   * must update indexes/order as needed.
   *
   * @param connection
   * @param communityId UUID of the parent community whose rule will be deleted.
   * @param ruleId UUID of the rule to delete from the community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":ruleId")
  public async eraseCommunityRule(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_member_communities_$communityId_rules_$ruleId(
        {
          member,
          communityId,
          ruleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
