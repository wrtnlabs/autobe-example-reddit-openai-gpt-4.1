import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_member_communities } from "../../../../providers/post__communityPlatform_member_communities";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { put__communityPlatform_member_communities_$communityId } from "../../../../providers/put__communityPlatform_member_communities_$communityId";
import { delete__communityPlatform_member_communities_$communityId } from "../../../../providers/delete__communityPlatform_member_communities_$communityId";

import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/member/communities")
export class CommunityplatformMemberCommunitiesController {
  /**
   * Create a new community as an authenticated member or admin.
   *
   * Create a new community with all required and optional metadata: unique
   * name, category, owner (current member), description, and optional
   * logo/banner/rules. Validates strong input constraints for name and required
   * relationships. Only authenticated members or admins may perform this
   * operation, based on business rules. Responds with complete community
   * entity, including related defaults and any generated system fields. Does
   * not allow unauthenticated guests or nonmember operations. Rejects creation
   * if name, category, or other fields do not meet strict validation or
   * business rules. Triggers creation of related rule and membership entries
   * where required.
   *
   * @param connection
   * @param body Information to create a new community, including required and
   *   optional fields for metadata, categorization, and visual configuration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformCommunity.ICreate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await post__communityPlatform_member_communities({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the metadata and settings of an existing sub-community by
   * communityId.
   *
   * Update the metadata of a sub-community (such as description, logo/banner,
   * display title, or category) using this endpoint. Only the community creator
   * or administrators are permitted to modify this information. The operation
   * validates the provided category ID against the allowed categories table and
   * ensures the new metadata follows business rules, such as not exceeding
   * character limits for titles and descriptions, and only referencing valid
   * image URIs. If a user attempts to change an immutable property such as the
   * community name or violates ownership/authorization, an appropriate error is
   * returned. This operation is critical for enabling users to manage their
   * sub-communities as the platform grows while maintaining strict enforcement
   * of naming and category constraints.
   *
   * Community rules (multi-line guidelines) are managed via a separate endpoint
   * and cannot be updated through this operation. The endpoint ensures all
   * changes are properly audited and that UI feeds reflect updated data upon
   * success. Cascade effects (e.g., changing category may update how the
   * community is listed) are handled as per business logic. Errors are surfaced
   * for all violations, and audit logging is triggered for successful updates.
   *
   * @param connection
   * @param communityId Unique ID of the target community to update.
   * @param body Editable fields for a sub-community update (title, description,
   *   logo/banner URIs, category).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":communityId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunity.IUpdate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await put__communityPlatform_member_communities_$communityId({
        member,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (logical delete) a sub-community by setting deleted_at
   * timestamp.
   *
   * Soft delete a sub-community by updating its deleted_at timestamp in the
   * database rather than permanently removing the record. This operation
   * preserves historical data for compliance, moderation, and potential
   * restoration. Only the creator of the community or administrators are
   * permitted to perform the soft delete. Related posts, comments, memberships,
   * and rules are likewise marked as deleted according to cascade policies,
   * ensuring no orphaned entities remain. This action is logged for full audit,
   * and the affected community is excluded from standard queries and listings
   * after soft deletion. Attempts to delete a non-existent community or without
   * proper authorization result in an error message. Restoration operations (if
   * supported) may be implemented separately based on business requirements.
   *
   * @param connection
   * @param communityId Unique ID of the community to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":communityId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_member_communities_$communityId({
        member,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
