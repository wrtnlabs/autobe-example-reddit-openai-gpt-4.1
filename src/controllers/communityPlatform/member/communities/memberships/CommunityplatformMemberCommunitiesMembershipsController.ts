import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_member_communities_$communityId_memberships } from "../../../../../providers/post__communityPlatform_member_communities_$communityId_memberships";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patch__communityPlatform_member_communities_$communityId_memberships } from "../../../../../providers/patch__communityPlatform_member_communities_$communityId_memberships";
import { get__communityPlatform_member_communities_$communityId_memberships_$membershipId } from "../../../../../providers/get__communityPlatform_member_communities_$communityId_memberships_$membershipId";
import { delete__communityPlatform_member_communities_$communityId_memberships_$membershipId } from "../../../../../providers/delete__communityPlatform_member_communities_$communityId_memberships_$membershipId";

import { ICommunityPlatformCommunityMembership } from "../../../../../api/structures/ICommunityPlatformCommunityMembership";
import { IPageICommunityPlatformCommunityMembership } from "../../../../../api/structures/IPageICommunityPlatformCommunityMembership";

@Controller("/communityPlatform/member/communities/:communityId/memberships")
export class CommunityplatformMemberCommunitiesMembershipsController {
  /**
   * Join a sub-community (create new membership) as an authenticated user.
   *
   * Join a specific sub-community by creating a new membership record for the
   * authenticated user. This action updates the user's community list and feed
   * preferences. The system enforces business rules that a member may only have
   * one membership per community. Attempts to join the same community again
   * will result in a duplicate error. The operation notifies UI feeds and
   * recent community lists of successful membership. Requires correct
   * communityId as path, and the relevant membership creation parameters in the
   * body DTO.
   *
   * @param connection
   * @param communityId ID of the community to join.
   * @param body Membership creation details for joining a community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityMembership.ICreate,
  ): Promise<ICommunityPlatformCommunityMembership> {
    try {
      return await post__communityPlatform_member_communities_$communityId_memberships(
        {
          member,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search current members of a specific community, with pagination
   * and filtering support.
   *
   * Retrieve a paginated list of all current members belonging to a specified
   * sub-community. Supports advanced filtering (such as join date range) and
   * searching by member display name. This endpoint is used for both community
   * owner/admin moderation views and ordinary participants viewing a roster or
   * member card list. Returned information typically includes joined date,
   * member basic info, and other summary details as defined in the membership
   * DTO. Requires appropriate authentication, and the results may be
   * permission-filtered for sensitive data fields. The endpoint enables both
   * roster UIs and member management use-cases for large communities.
   *
   * @param connection
   * @param communityId The community for which to list current members.
   * @param body Advanced filter/search/sort and pagination options for
   *   membership listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityMembership.IRequest,
  ): Promise<IPageICommunityPlatformCommunityMembership.ISummary> {
    try {
      return await patch__communityPlatform_member_communities_$communityId_memberships(
        {
          member,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details on a specific community membership within a given
   * community.
   *
   * Get details about a single community membership for a given member within a
   * specific sub-community. This operation returns join date, member
   * information, and related metadata. Used by moderation tools, admin
   * dashboards, or detail member profile modals in the community context.
   * Access is protected by authentication and may be permission-filtered based
   * on context or member roles. Returns error if the membership does not exist
   * or if unauthorized.
   *
   * @param connection
   * @param communityId The community containing the membership.
   * @param membershipId Unique membership ID to retrieve details for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":membershipId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityMembership> {
    try {
      return await get__communityPlatform_member_communities_$communityId_memberships_$membershipId(
        {
          member,
          communityId,
          membershipId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a single member from a community by deleting the membership record.
   *
   * Remove a member from a specified sub-community by deleting the given
   * membership record. Commonly used when a user chooses to leave a community
   * or when an admin removes a member. Only the member being removed or a
   * community admin/owner may perform this operation. The endpoint guarantees
   * data integrity by ensuring the membership exists and is properly
   * identified. The affected user's memberships and feeds are updated to
   * reflect the removal. All related audit events are logged for compliance and
   * support for community moderation dashboards.
   *
   * @param connection
   * @param communityId ID of the parent community.
   * @param membershipId Unique membership record ID (membership to delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":membershipId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_member_communities_$communityId_memberships_$membershipId(
        {
          member,
          communityId,
          membershipId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
