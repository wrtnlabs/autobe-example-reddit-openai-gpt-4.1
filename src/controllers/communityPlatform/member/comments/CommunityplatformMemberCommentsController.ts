import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_member_comments } from "../../../../providers/post__communityPlatform_member_comments";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { put__communityPlatform_member_comments_$commentId } from "../../../../providers/put__communityPlatform_member_comments_$commentId";
import { delete__communityPlatform_member_comments_$commentId } from "../../../../providers/delete__communityPlatform_member_comments_$commentId";

import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/member/comments")
export class CommunityplatformMemberCommentsController {
  /**
   * Create a new comment on a post or as a reply (community_platform_comments).
   *
   * Submit a new comment to a post, or as a reply to another comment (if
   * parent_id provided), as an authenticated member. All comment data must
   * conform to schema: post_id, author_id (from user session), content (2-2000
   * chars, plain text), edited (false on create), parent_id if a reply, and
   * timestamps set by server. Guests cannot comment; error returned on
   * unauthenticated requests. Membership in post's community may be verified as
   * part of business logic. If parent_id is given, must match an existing
   * comment on the same post. Related APIs: PATCH for searching, GET for
   * detail, PUT for updating, DELETE for removal.
   *
   * @param connection
   * @param body Fields required to create a new comment. Must include at least
   *   post_id and content. parent_id for replies optional.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformComment.ICreate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await post__communityPlatform_member_comments({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing comment by ID (community_platform_comments).
   *
   * Edit a comment by its ID, restricted to the comment's author or an admin.
   * Payload must contain only the fields allowed by business rules (typically,
   * new content text). Content must remain plain text, 2-2000 chars, no
   * code/scripts. On successful update, the edited flag is set to true,
   * updated_at refreshed, and an audit snapshot is stored. If the comment does
   * not exist or is deleted, returns 404. Edge cases include update attempts by
   * unauthorized users or invalid content input. Related endpoints: PATCH for
   * list, GET for detail, POST for creation, DELETE for removal.
   *
   * @param connection
   * @param commentId Unique identifier of the comment to update.
   * @param body Content to update for the comment. Must comply with plain text
   *   rules and length requirements.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IUpdate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await put__communityPlatform_member_comments_$commentId({
        member,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a comment (soft delete, community_platform_comments table).
   *
   * Delete a comment. Only the author or an admin can delete. Guests cannot
   * delete comments. This is a soft delete, setting deleted_at; data remains
   * for audit/policy but is excluded from standard queries. The operation also
   * cascades to delete all descendant (child) comments and associated votes in
   * the thread. A 404 is returned if the comment does not exist or is already
   * deleted. Related endpoints: PATCH (list), GET (detail), POST (create), PUT
   * (update).
   *
   * @param connection
   * @param commentId Unique identifier of the comment to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_member_comments_$commentId({
        member,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
