import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_comments } from "../../../providers/patch__communityPlatform_comments";
import { get__communityPlatform_comments_$commentId } from "../../../providers/get__communityPlatform_comments_$commentId";

import { IPageICommunityPlatformComment } from "../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/comments")
export class CommunityplatformCommentsController {
  /**
   * Paginated and searchable list of comments with core summary data.
   *
   * Retrieves a paginated, filtered list of comments system-wide or for a
   * particular context (e.g., specific post or parent comment). Supports rich
   * filtering (e.g., by post, author, nesting), advanced full-text search on
   * content, and paging for performance. Sorting is offered by newest or top
   * score.
   *
   * Each comment entry exposes summary fields per the Prisma schema: content
   * (body), display name, creation date, parent linkage, etc. Publicly readable
   * by any role, including unauthenticated users, but only non-private fields
   * are returned if accessed as a guest.
   *
   * Operation is accessible to all users; sensitive fields are omitted for
   * guests as per privacy rules. Standard error handling is enforced for
   * malformed queries or unauthorized field access.
   *
   * @param connection
   * @param body Search/filter criteria and pagination options for querying
   *   comments.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment.ISummary> {
    try {
      return await patch__communityPlatform_comments({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific comment by its unique ID.
   *
   * Fetches a single comment with full detail: plain-text body,
   * author/member/guest/admin, display name (with 'Anonymous' fallback),
   * parent/child (reply) relationships, timestamps, and status
   * (deleted/active).
   *
   * Comment detail retrieval is allowed for any user (including guests), but
   * only public-safe fields (per privacy requirements) are shown to
   * non-authenticated users. The operation handles missing or deleted comments
   * with appropriate errors.
   *
   * @param connection
   * @param commentId Unique identifier of the target comment (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await get__communityPlatform_comments_$commentId({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
