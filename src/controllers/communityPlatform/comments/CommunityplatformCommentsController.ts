import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_comments } from "../../../providers/patch__communityPlatform_comments";
import { get__communityPlatform_comments_$commentId } from "../../../providers/get__communityPlatform_comments_$commentId";

import { IPageICommunityPlatformComment } from "../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/comments")
export class CommunityplatformCommentsController {
  /**
   * List/filter/search public comments with pagination
   * (community_platform_comments).
   *
   * Search and retrieve a list of comments matching specified filters and
   * criteria, supporting advanced text query, author and post lookup, and
   * flexible sort and pagination controls. All fields must match actual
   * properties from the schema. Only non-deleted comments are included unless
   * requested by an admin. Public access: guests, members, and admins all can
   * search comments. The operation supports searching by a substring of
   * content, filtering to a particular post or author, and sorting by newest or
   * score. Pagination is managed via request body parameters (e.g., page,
   * pageSize). Related endpoints: comment detail (GET), creation (POST),
   * modification (PUT), and deletion (DELETE).
   *
   * @param connection
   * @param body Search and filter request parameters for comment listing.
   *   Supports query by content/post/author and page/sort controls.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment.ISummary> {
    try {
      return await patch__communityPlatform_comments({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch detailed information for a comment by ID
   * (community_platform_comments).
   *
   * Retrieve all details for a specific comment, as identified by its
   * commentId. Any user can fetch public comments, with admins able to access
   * deleted ones if authorized. Returns null if the comment does not exist or
   * has been permanently deleted (hard delete is not used; deleted_at indicates
   * logical deletion). Related endpoints: PATCH for search/results, POST for
   * creation, PUT for modification, DELETE for removal.
   *
   * @param connection
   * @param commentId Unique identifier of the comment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await get__communityPlatform_comments_$commentId({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
