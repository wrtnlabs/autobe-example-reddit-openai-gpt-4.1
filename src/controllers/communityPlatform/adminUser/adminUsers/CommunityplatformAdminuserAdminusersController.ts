import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_adminUsers } from "../../../../providers/patch__communityPlatform_adminUser_adminUsers";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_adminUsers_$adminUserId } from "../../../../providers/get__communityPlatform_adminUser_adminUsers_$adminUserId";

import { IPageICommunityPlatformAdminUser } from "../../../../api/structures/IPageICommunityPlatformAdminUser";
import { ICommunityPlatformAdminUser } from "../../../../api/structures/ICommunityPlatformAdminUser";

@Controller("/communityPlatform/adminUser/adminUsers")
export class CommunityplatformAdminuserAdminusersController {
  /**
   * Search and paginate admin users (community_platform_adminusers).
   *
   * This operation fetches a paginated, searchable list of admin users
   * registered on the platform. It implements complex filtering, sorting, and
   * pagination using the community_platform_adminusers table definition.
   *
   * Used by the platform management dashboard and other administration tools,
   * this endpoint supports filters for status, name, and other admin
   * attributes. Access is restricted to users with appropriate permissions
   * (typically admin role only), ensuring proper visibility moderation and
   * audit controls.
   *
   * The request body allows for specifying page size, search criteria, and
   * sorting preferences. The response includes admin user summary data for
   * fast, secure list displays, with navigational paging that supports large
   * account volumes.
   *
   * Any attempt by unauthorized users to access this endpoint is denied with an
   * appropriate error, in line with platform and business rule requirements.
   *
   * @param connection
   * @param body Advanced search, filter, and pagination parameters for
   *   retrieving admin users.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformAdminUser.IRequest,
  ): Promise<IPageICommunityPlatformAdminUser.ISummary> {
    try {
      return await patch__communityPlatform_adminUser_adminUsers({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed admin user information by ID (community_platform_adminusers).
   *
   * This endpoint enables retrieval of a specific admin user's full record
   * based on their unique identifier, as specified in the
   * community_platform_adminusers schema. Data returned is essential for
   * administrative dashboards, audit log linkage, and role management logic.
   *
   * Included fields are all business-relevant attributes, such as display name,
   * status, timestamps, and credential references, as documented in the
   * database comments and security policies.
   *
   * Access to this endpoint is strictly limited to users with the admin role.
   * If a non-authorized request is made or no record is found for the provided
   * adminUserId, the response is a 404 or equivalent error per platform error
   * standards.
   *
   * Returned data must be compliant with privacy and audit requirements,
   * exposing only approved fields as described in the schema.
   *
   * @param connection
   * @param adminUserId Unique identifier of the target admin user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminUserId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("adminUserId")
    adminUserId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAdminUser> {
    try {
      return await get__communityPlatform_adminUser_adminUsers_$adminUserId({
        adminUser,
        adminUserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
