import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_userCredentials } from "../../../../providers/patch__communityPlatform_adminUser_userCredentials";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_userCredentials_$userCredentialId } from "../../../../providers/get__communityPlatform_adminUser_userCredentials_$userCredentialId";

import { IPageICommunityPlatformUserCredential } from "../../../../api/structures/IPageICommunityPlatformUserCredential";
import { ICommunityPlatformUserCredential } from "../../../../api/structures/ICommunityPlatformUserCredential";

@Controller("/communityPlatform/adminUser/userCredentials")
export class CommunityplatformAdminuserUsercredentialsController {
  /**
   * Search and paginate user credentials (community_platform_user_credentials).
   *
   * This operation provides platform administrators with a powerful tool to
   * list, search, and audit user credentials across all authentication-enabled
   * users. Focusing on the community_platform_user_credentials table, it
   * supports advanced queries such as email lookups, status filtering, and
   * sorted pagination.
   *
   * Essential for user management, password reset validation, and compliance
   * checks, this endpoint is accessible only to admin users. Business logic and
   * database documentation enforce secure, privacy-compliant exposure of email
   * and credential metadata; hashed passwords remain inaccessible to
   * non-privileged logic.
   *
   * The request body enables complex search combinations, including partial
   * matches, temporal queries, and specific credential attribute filters.
   * Pagination ensures responsive performance even at high user volumes.
   * Unauthorized requests are blocked as per role requirements.
   *
   * @param connection
   * @param body Filter, search, and paging options for retrieving user
   *   credentials.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformUserCredential.IRequest,
  ): Promise<IPageICommunityPlatformUserCredential.ISummary> {
    try {
      return await patch__communityPlatform_adminUser_userCredentials({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get user credential details by ID (community_platform_user_credentials).
   *
   * This endpoint provides detailed authentication credential records for a
   * user, found by unique credential ID. It is critical for admin audit flows,
   * password reset validation, and verifying business rules on account status.
   *
   * Schema fields retrieved correspond to the
   * community_platform_user_credentials model, including email, status, and
   * timestamps. Password hashes are never returned, ensuring privacy
   * compliance.
   *
   * Access is available exclusively to admin users. Requests for non-existent
   * or unauthorized credentials return error status codes matching platform
   * security standards.
   *
   * @param connection
   * @param userCredentialId Unique identifier of the user credential record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userCredentialId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("userCredentialId")
    userCredentialId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformUserCredential> {
    try {
      return await get__communityPlatform_adminUser_userCredentials_$userCredentialId(
        {
          adminUser,
          userCredentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
