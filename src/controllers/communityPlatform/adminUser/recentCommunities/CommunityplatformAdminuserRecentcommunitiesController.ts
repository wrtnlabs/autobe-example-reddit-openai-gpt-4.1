import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { delete__communityPlatform_adminUser_recentCommunities_$recentCommunityId } from "../../../../providers/delete__communityPlatform_adminUser_recentCommunities_$recentCommunityId";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";

@Controller("/communityPlatform/adminUser/recentCommunities/:recentCommunityId")
export class CommunityplatformAdminuserRecentcommunitiesController {
  /**
   * Remove a single recent community link by recentCommunityId from
   * community_platform_recent_communities.
   *
   * This API operation allows a member user to remove a community from their
   * personal list of recent communities for navigation and sidebar display. The
   * operation targets the community_platform_recent_communities table, which
   * links member users to communities based on recent activity.
   *
   * A user may have up to five recent communities; when one is deleted, the
   * system reorders the remaining entries and updates their recent_rank. Only
   * the user who owns the recent list (or an adminUser) may delete a recent
   * community link. If the recentCommunityId does not belong to the requesting
   * user or the user is not an admin, the operation fails with a permission
   * error.
   *
   * Deletion of a recent community in this context is a hard delete â€“ the
   * association is permanently removed from the user's list but does not affect
   * membership or the underlying community entity. Error handling includes
   * checks for valid ownership and non-existent records.
   *
   * @param connection
   * @param recentCommunityId The unique identifier (UUID) of the recent
   *   community record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("recentCommunityId")
    recentCommunityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_recentCommunities_$recentCommunityId(
        {
          adminUser,
          recentCommunityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
