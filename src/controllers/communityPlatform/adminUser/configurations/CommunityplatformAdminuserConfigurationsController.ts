import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_adminUser_configurations } from "../../../../providers/post__communityPlatform_adminUser_configurations";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__communityPlatform_adminUser_configurations } from "../../../../providers/patch__communityPlatform_adminUser_configurations";
import { get__communityPlatform_adminUser_configurations_$configurationId } from "../../../../providers/get__communityPlatform_adminUser_configurations_$configurationId";
import { put__communityPlatform_adminUser_configurations_$configurationId } from "../../../../providers/put__communityPlatform_adminUser_configurations_$configurationId";
import { delete__communityPlatform_adminUser_configurations_$configurationId } from "../../../../providers/delete__communityPlatform_adminUser_configurations_$configurationId";

import { ICommunityPlatformConfiguration } from "../../../../api/structures/ICommunityPlatformConfiguration";
import { IPageICommunityPlatformConfiguration } from "../../../../api/structures/IPageICommunityPlatformConfiguration";

@Controller("/communityPlatform/adminUser/configurations")
export class CommunityplatformAdminuserConfigurationsController {
  /**
   * Create a new platform configuration parameter (admin only).
   *
   * Inserts a row into the community_platform_configurations table with the
   * required 'key' (must be unique; e.g. 'max_post_length'), 'value' (arbitrary
   * string/JSON/number as string), optional description (max 200 chars), and
   * sets all audit timestamps. Intended for adminUser access only.
   *
   * Validation includes unique constraint for 'key', description length, and
   * validation of any business-allowed character set or semantic standards for
   * 'key'. Used for UI-driven feature flag and config managers. Attempting to
   * create with duplicate keys or violating length rules is rejected as
   * validation error.
   *
   * @param connection
   * @param body Required fields for config creation: key, value,
   *   description(optional).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformConfiguration.ICreate,
  ): Promise<ICommunityPlatformConfiguration> {
    try {
      return await post__communityPlatform_adminUser_configurations({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List all configuration parameters (filtered, paginated; admin only).
   *
   * Retrieves a sequence of configuration parameter records, supporting filter
   * by key, description, value (with trigram or substring search), sorting and
   * paging as per admin system standards. Provides audit properties, parameter
   * value and description for each config variable leveraged by server and
   * admin logic.
   *
   * Typically used by adminUser to view and review global config parameters for
   * platform health and feature toggles. Results are not public due to possible
   * disclosure of sensitive system tuning information.
   *
   * @param connection
   * @param body Search/filter and paging criteria for configs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformConfiguration.IRequest,
  ): Promise<IPageICommunityPlatformConfiguration.ISummary> {
    try {
      return await patch__communityPlatform_adminUser_configurations({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get all details for a configuration parameter by configurationId (UUID;
   * admin only).
   *
   * Gets the configuration parameter row with a specific UUID, returning all
   * fields defined (id, key, value, description, created_at, updated_at). These
   * records determine system environment and feature toggles, so read access is
   * adminUser only.
   *
   * Suitable for filling in edit panels. Content may include private or audit
   * relevant data so is never to be exposed in public UI or undocumented APIs.
   * Errors include not found for unknown UUIDs or deleted records.
   *
   * @param connection
   * @param configurationId Unique UUID for configuration parameter row;
   *   corresponds to community_platform_configurations.id.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":configurationId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformConfiguration> {
    try {
      return await get__communityPlatform_adminUser_configurations_$configurationId(
        {
          adminUser,
          configurationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a configuration entry (community_platform_configurations).
   *
   * This operation updates a single configuration parameter in the
   * community_platform_configurations schema table. Only authenticated admin
   * users can perform this action, ensuring enforcement of system configuration
   * constraints. Modification includes updating the value or description of an
   * existing configuration entry. The change is immediately propagated to
   * system components relying on this configuration key.
   *
   * Access to this operation is restricted to admin users for platform
   * security. All configuration changes are tracked via audit logs and
   * updated_at timestamps for compliance.
   *
   * Attempting to update a non-existent configuration key, or without
   * sufficient privileges, results in a not found or forbidden error. Related
   * endpoints include GET for configuration retrieval and PATCH for searching
   * configuration entries.
   *
   * @param connection
   * @param configurationId Unique identifier (UUID) of the configuration entry
   *   to update.
   * @param body New configuration value and optional description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":configurationId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformConfiguration.IUpdate,
  ): Promise<ICommunityPlatformConfiguration> {
    try {
      return await put__communityPlatform_adminUser_configurations_$configurationId(
        {
          adminUser,
          configurationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a configuration entry (community_platform_configurations).
   *
   * This operation permanently deletes a configuration entry from the
   * community_platform_configurations table. Only users with the adminUser role
   * have access, since configuration records control key platform behavior.
   * When deleted, the entry is removed from all future reads and the action is
   * logged for compliance monitoring.
   *
   * Deletion is performed via a hard delete. There is no recovery mechanism, so
   * care must be taken. Attempts to delete a non-existent or protected key
   * return an error.
   *
   * Related operations include PUT for updating, PATCH for searching, and GET
   * for retrieving configuration details.
   *
   * @param connection
   * @param configurationId Unique identifier (UUID) of the configuration entry
   *   to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":configurationId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_configurations_$configurationId(
        {
          adminUser,
          configurationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
