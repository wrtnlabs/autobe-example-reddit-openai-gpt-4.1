import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_guestUsers } from "../../../../providers/patch__communityPlatform_adminUser_guestUsers";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_guestUsers_$guestUserId } from "../../../../providers/get__communityPlatform_adminUser_guestUsers_$guestUserId";

import { IPageICommunityPlatformGuestUser } from "../../../../api/structures/IPageICommunityPlatformGuestUser";
import { ICommunityPlatformGuestUser } from "../../../../api/structures/ICommunityPlatformGuestUser";

@Controller("/communityPlatform/adminUser/guestUsers")
export class CommunityplatformAdminuserGuestusersController {
  /**
   * Search and paginate guest user session records
   * (community_platform_guestusers).
   *
   * Returns a paginated set of guest user sessions filtered and sorted by
   * creation or update timestamp, and optionally searched by session signature.
   * The operation references the community_platform_guestusers table in the
   * Prisma schema. Results are primarily intended for platform analytics, usage
   * tracing, or audit.
   *
   * This query supports pagination and field-based filtering, allowing analysis
   * of guest visits, activity patterns, and conversions. As guest users are
   * unauthenticated, no personal identifying data is included; only analytics
   * or tracking metadata (session signature, timestamps) is returned. Security:
   * strictly limited to admin users to prevent abuse.
   *
   * Feature is typically used by platform analytics dashboards, system health
   * reviews, or compliance audits. Errors and validation (such as invalid
   * pagination parameters) return descriptive error messages. No search or
   * enumeration is enabled for the general user base due to privacy risk.
   *
   * @param connection
   * @param body Pagination, sorting, or search criteria for guest user
   *   analytics logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformGuestUser.IRequest,
  ): Promise<IPageICommunityPlatformGuestUser.ISummary> {
    try {
      return await patch__communityPlatform_adminUser_guestUsers({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve guest user session detail by ID (community_platform_guestusers).
   *
   * Fetches and returns comprehensive metadata on a specific guest user
   * session, including creation and updated timestamps, unique session
   * signature, and deletion status. The path parameter guestUserId is a uuid
   * referencing the session of interest. The operation references the
   * community_platform_guestusers Prisma model ensuring all business, privacy,
   * and compliance constraints are rigorously enforced.
   *
   * Only admin users are permitted to access this detailed session data, in
   * accordance with business privacy requirements and audit policies. A 404
   * error is returned if the guest user session is not found. Typical uses
   * include platform analytics, security trace review, or abuse
   * investigations.
   *
   * No guest user credential or personally identifying information is ever
   * returned, only session and analytic metadata as allowed by platform rules.
   *
   * @param connection
   * @param guestUserId UUID of the guest user session to retrieve detail for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":guestUserId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("guestUserId")
    guestUserId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformGuestUser> {
    try {
      return await get__communityPlatform_adminUser_guestUsers_$guestUserId({
        adminUser,
        guestUserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
