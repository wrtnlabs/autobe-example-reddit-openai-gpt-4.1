import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_adminUser_communities } from "../../../../providers/post__communityPlatform_adminUser_communities";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { delete__communityPlatform_adminUser_communities_$communityId } from "../../../../providers/delete__communityPlatform_adminUser_communities_$communityId";

import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/adminUser/communities")
export class CommunityplatformAdminuserCommunitiesController {
  /**
   * Create a new sub-community (community_platform_communities).
   *
   * This endpoint allows authenticated member or admin users to create a new
   * sub-community, providing a name (validated for uniqueness and format),
   * category reference, optional description, logo/banner URIs, and rules as
   * documented by business logic and the community_platform_communities
   * schema.
   *
   * Ownership is set to the authenticated user making the request and is
   * immutable for the life of the community. The operation enforces naming and
   * categorization business rules, initializing member count and joined status
   * appropriately. All required and optional attributes are validated per
   * schema and platform business rules. Conflicts or violations return error
   * messages as described in the requirements (e.g., name in use or invalid
   * format).
   *
   * Successfully created communities are immediately available for exploration,
   * joining, and post composition actions.
   *
   * @param connection
   * @param body Community creation input, including required and optional
   *   attributes for a new sub-community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformCommunity.ICreate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await post__communityPlatform_adminUser_communities({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a community and all its related content.
   *
   * This operation deletes a community from the system, physically or
   * logically, depending on business rules and soft delete implementation of
   * the community_platform_communities table. It cascades the deletion to all
   * posts, memberships, recent community visits, and rules related to the
   * community, implementing the requirement for deep cleaning on community
   * deletion.
   *
   * Only an adminUser or the original owner may delete a community, with admins
   * holding the ultimate authority. When the operation is successful, all soft
   * deletable entities set their deleted_at fields; otherwise, the records are
   * permanently removed from child tables if not supporting soft deletion. This
   * ensures compliance with full data removal requirements in the business
   * logic and prevents orphaned records.
   *
   * Attempts to delete by unauthorized users are rejected with explicit
   * permission errors. On completion, the system updates feeds and navigation
   * across all affected users. All deletion actions are logged in the audit
   * trail for compliance. Related endpoints include post and membership
   * deletions and audit logs for deletion activity.
   *
   * @param connection
   * @param communityId Unique identifier for the community to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":communityId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_communities_$communityId(
        {
          adminUser,
          communityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
