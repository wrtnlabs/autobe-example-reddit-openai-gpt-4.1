import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_adminUser_categories } from "../../../../providers/post__communityPlatform_adminUser_categories";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__communityPlatform_adminUser_categories } from "../../../../providers/patch__communityPlatform_adminUser_categories";
import { get__communityPlatform_adminUser_categories_$categoryId } from "../../../../providers/get__communityPlatform_adminUser_categories_$categoryId";
import { put__communityPlatform_adminUser_categories_$categoryId } from "../../../../providers/put__communityPlatform_adminUser_categories_$categoryId";
import { delete__communityPlatform_adminUser_categories_$categoryId } from "../../../../providers/delete__communityPlatform_adminUser_categories_$categoryId";

import { ICommunityPlatformCategory } from "../../../../api/structures/ICommunityPlatformCategory";
import { IPageICommunityPlatformCategory } from "../../../../api/structures/IPageICommunityPlatformCategory";

@Controller("/communityPlatform/adminUser/categories")
export class CommunityplatformAdminuserCategoriesController {
  /**
   * Create a new community platform category (admin only) in
   * community_platform_categories.
   *
   * Creates a new entry in the community_platform_categories table with a
   * system-unique, case-insensitive name (5â€“32 characters, a-z, A-Z, 0-9,
   * hyphen, underscore), display order (integer), and optional description.
   * This operation is intended for admin users when expanding the fixed
   * category set for sub-communities.
   *
   * Validates all inputs including uniqueness and pattern enforcement for
   * 'name', sequentiality for 'display_order', and maximum length for
   * description. Tracking of creator and audit timestamps is handled
   * automatically.
   *
   * Only adminUser is permitted for category creation. Duplicate names or
   * invalid formats trigger validation errors as described in requirements.
   *
   * @param connection
   * @param body Category creation info: name (unique), displayOrder, and
   *   description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformCategory.ICreate,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await post__communityPlatform_adminUser_categories({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list community platform categories with filtering and
   * pagination.
   *
   * Retrieve a list of categories from the community_platform_categories table,
   * enabling advanced filters by name, description (with GIN/trigram search
   * optimizations), and display_order. Pagination and sorting options are
   * supported as per system-wide listing standards. This operation allows
   * authenticated users (adminUser/memberUser) to discover categories for
   * community creation or UI selector purposes.
   *
   * The API response contains summary data for each category, such as ID, name,
   * display order, optional description, timestamps, and all fields defined in
   * the Prisma schema, enabling frontend typeahead, dropdowns, and management
   * interfaces.
   *
   * Permissions: This operation is available to both adminUser and memberUser
   * roles. It does not expose any sensitive data and is suitable for public
   * category listings. Error handling covers validation of search queries and
   * response limits to prevent abusive or nonsensical lookups.
   *
   * @param connection
   * @param body Search and filter criteria for categories, including
   *   name/description match, sorting, and paging.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformCategory.IRequest,
  ): Promise<IPageICommunityPlatformCategory.ISummary> {
    try {
      return await patch__communityPlatform_adminUser_categories({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a category by categoryId (UUID) from
   * community_platform_categories.
   *
   * Obtains a single category by its unique identifier from the
   * community_platform_categories table. The response includes the primary key,
   * name, display order, description, and timestamps as per the Prisma schema.
   *
   * Permissions: Both adminUser and memberUser are permitted. This is suitable
   * for populating category edit dialogs or detailed UI category displays.
   *
   * Security: Exposes only non-sensitive business dictionary data, restricted
   * by access roles. Errors include not found (if the UUID does not match any
   * row).
   *
   * @param connection
   * @param categoryId Unique identifier for the target category
   *   (community_platform_categories.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await get__communityPlatform_adminUser_categories_$categoryId({
        adminUser,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update properties for a category (description, order) by categoryId (admin
   * only).
   *
   * This operation finds a category by its UUID and updates editable fields:
   * description and display_order (the 'name' remains immutable). It enforces
   * length and integer constraints, and updates the audit timestamps
   * (updated_at). If no record matches, not found is returned. Attempts to edit
   * 'name' are rejected per business rule.
   *
   * Only adminUser may execute. It is used in backend admin interfaces and
   * management panels. Validation errors occur if constraints are violated or
   * UUID is missing.
   *
   * @param connection
   * @param categoryId Target category ID (UUID) to update.
   * @param body Editable fields for a category (description, display_order).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCategory.IUpdate,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await put__communityPlatform_adminUser_categories_$categoryId({
        adminUser,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard delete a category by ID (admin only, irreversible).
   *
   * Permanently removes the specified category from the
   * community_platform_categories table by its UUID (categoryId). This
   * operation does not leave recoverable traces since no soft delete field
   * exists. Used only by adminUser role and typically restricted to prevent
   * orphaned sub-communities or system inconsistencies.
   *
   * Before deletion, systems may enforce checks to ensure no communities
   * reference the target category. If referenced, deletion should be blocked
   * with a meaningful error. Otherwise, the record is removed entirely.
   *
   * Error handling includes not found and foreign key constraint violations.
   *
   * @param connection
   * @param categoryId UUID of category to hard delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_categories_$categoryId({
        adminUser,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
