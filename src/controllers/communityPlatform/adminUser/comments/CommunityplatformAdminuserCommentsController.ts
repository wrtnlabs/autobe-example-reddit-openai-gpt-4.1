import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_adminUser_comments } from "../../../../providers/post__communityPlatform_adminUser_comments";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { put__communityPlatform_adminUser_comments_$commentId } from "../../../../providers/put__communityPlatform_adminUser_comments_$commentId";
import { delete__communityPlatform_adminUser_comments_$commentId } from "../../../../providers/delete__communityPlatform_adminUser_comments_$commentId";

import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/adminUser/comments")
export class CommunityplatformAdminuserCommentsController {
  /**
   * Create a new top-level comment or a reply on a post, for authenticated
   * users.
   *
   * Allows an authenticated member or admin user to create a comment for a post
   * or as a nested reply. Enforces all business logic for validation, including
   * minimum and maximum lengths, plain-text only input, and one-to-one
   * ownership (authenticated user only).
   *
   * Supports both top-level comments and arbitrary threading via
   * parent_comment_id. Parent relationships and post linkage are verified for
   * existence and permissions. Only the comment author or platform admin may
   * later edit or delete the comment (via respective APIs).
   *
   * Unauthenticated users are rejected with a login-required message.
   * Validation errors on content length or parent linkage result in clear
   * feedback, per platform standards.
   *
   * @param connection
   * @param body Information required to create a new comment (post_id, optional
   *   parent_comment_id, body, display name) following comment business rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformComment.ICreate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await post__communityPlatform_adminUser_comments({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a comment's body or display name (community_platform_comments
   * table).
   *
   * This API endpoint enables the editing of an existing comment on a post.
   * Only the original author of the comment or a platform admin user can
   * perform this action, ensuring ownership and moderation rules are enforced.
   * The underlying database table is community_platform_comments.
   *
   * The comment body must remain between 2 and 2,000 characters as plain text
   * and may not include executable code. The display_name is optional and
   * limited to 32 characters. If the field is left empty, the comment will
   * default to showing 'Anonymous' as the author. Attempts to modify the
   * comment by users who are not the original author or an admin will be
   * rejected with a permission error message.
   *
   * Security is ensured by verifying the user role and ownership before
   * allowing updates. Edits are reflected in the updated_at column to provide
   * an audit trail of modifications. This operation integrates with frontend
   * flows for comment editing and supports error handling for validation and
   * permission failures.
   *
   * @param connection
   * @param commentId Unique identifier of the target comment to update
   * @param body Fields to update in the comment: body (2–2,000 chars),
   *   display_name (0–32 chars, optional)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IUpdate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await put__communityPlatform_adminUser_comments_$commentId({
        adminUser,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a comment by ID (community_platform_comments table).
   *
   * This endpoint allows the deletion (soft-deletion) of a comment identified
   * by its commentId. The operation can be performed only by the original
   * author of the comment or by an admin user. Upon execution, the deleted_at
   * column of the comment (and all its direct and nested replies) is set to the
   * current timestamp, effectively hiding them from public view while
   * maintaining data integrity for compliance and recovery as required by
   * business rules.
   *
   * The database table community_platform_comments provides soft-delete
   * capability via the deleted_at field. Other users attempting to delete
   * comments they do not own will receive an error message. If the comment
   * hierarchy contains replies, all descendants are processed recursively.
   * Admin users may perform this on any comment for moderation, while regular
   * users are restricted to their own content.
   *
   * @param connection
   * @param commentId Unique identifier of the comment to soft-delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_comments_$commentId({
        adminUser,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
