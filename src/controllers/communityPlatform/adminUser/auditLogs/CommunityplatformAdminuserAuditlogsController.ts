import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_auditLogs } from "../../../../providers/patch__communityPlatform_adminUser_auditLogs";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_auditLogs_$auditLogId } from "../../../../providers/get__communityPlatform_adminUser_auditLogs_$auditLogId";

import { IPageICommunityPlatformAuditLog } from "../../../../api/structures/IPageICommunityPlatformAuditLog";
import { ICommunityPlatformAuditLog } from "../../../../api/structures/ICommunityPlatformAuditLog";

@Controller("/communityPlatform/adminUser/auditLogs")
export class CommunityplatformAdminuserAuditlogsController {
  /**
   * Search and paginate audit logs (community_platform_audit_logs).
   *
   * This operation allows admin users to search and paginate over platform
   * audit logs in community_platform_audit_logs. Search filtering can be
   * performed by event type (e.g. config change, session login), actor (member
   * or admin), IP address, and creation time range.
   *
   * Audit logs contain sensitive information and are only accessible to admin
   * users for compliance and investigation purposes. Results are paginated,
   * with support for ordering by time and filtering by details.
   *
   * Business logic enforces that unauthenticated or unauthorized users cannot
   * access this operation. Returned data includes all columns except for
   * internal security details. Related operations: GET for details of a
   * specific audit log entry.
   *
   * @param connection
   * @param body Filter and pagination parameters for searching audit logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformAuditLog.IRequest,
  ): Promise<IPageICommunityPlatformAuditLog> {
    try {
      return await patch__communityPlatform_adminUser_auditLogs({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of an audit log entry (community_platform_audit_logs).
   *
   * This operation returns comprehensive information for a specific audit log
   * entry in the community_platform_audit_logs schema. The log entry is
   * identified by its unique UUID. The details provided include event type,
   * actor (member/admin), event context, and timestamp.
   *
   * Audit logs are a restricted resource containing sensitive operations. Only
   * adminUser role is permitted access. Attempting to access a log without
   * privileges, or for a key that does not exist, results in an error. Related
   * operation: PATCH for searching all logs.
   *
   * @param connection
   * @param auditLogId Unique identifier (UUID) of the audit log entry to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAuditLog> {
    try {
      return await get__communityPlatform_adminUser_auditLogs_$auditLogId({
        adminUser,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
