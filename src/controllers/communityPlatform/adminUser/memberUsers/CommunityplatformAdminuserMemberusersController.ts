import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_memberUsers } from "../../../../providers/patch__communityPlatform_adminUser_memberUsers";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_memberUsers_$memberUserId } from "../../../../providers/get__communityPlatform_adminUser_memberUsers_$memberUserId";

import { IPageICommunityPlatformMemberUser } from "../../../../api/structures/IPageICommunityPlatformMemberUser";
import { ICommunityPlatformMemberUser } from "../../../../api/structures/ICommunityPlatformMemberUser";

@Controller("/communityPlatform/adminUser/memberUsers")
export class CommunityplatformAdminuserMemberusersController {
  /**
   * Search and paginate member user accounts (community_platform_memberusers).
   *
   * Returns a paginated set of member users (registered user accounts) filtered
   * by display name, account status, or creation/update timestamps, as defined
   * in the Prisma model community_platform_memberusers. This operation allows
   * admins to monitor, search, and manage the user base, applying business
   * logic for name/status searching, sort order, and precise pagination.
   *
   * Only admin users are granted access due to the privacy-sensitive nature of
   * user account data. The search supports partial matching for display names,
   * status filtering, and date range controls. Pagination is enforced with
   * efficient sorting according to primary business needs. If search criteria
   * are invalid or missing, descriptive error messages are returned. May be
   * used for admin user management, compliance review, or platform analytics
   * dashboards.
   *
   * For efficiency and privacy, only summary fields are returned in paginated
   * lists; full detail may be fetched via other admin endpoints as needed.
   * Audit logging for query access is recommended for legal/compliance review.
   *
   * @param connection
   * @param body Pagination, filter, and search criteria for member user
   *   accounts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformMemberUser.IRequest,
  ): Promise<IPageICommunityPlatformMemberUser.ISummary> {
    try {
      return await patch__communityPlatform_adminUser_memberUsers({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed member user information by ID
   * (community_platform_memberusers).
   *
   * This endpoint allows retrieval of a member user's complete profile and
   * related attributes given their unique identifier, as defined in the
   * community_platform_memberusers Prisma model.
   *
   * It is used for backend logic and UI features such as profile display,
   * author information on posts and comments, and eligibility for content
   * actions. Only authenticated users and platform admins may use this
   * endpoint, in compliance with business access rules and privacy context.
   *
   * The returned object includes display name, status, timestamps, and all
   * business logic-required attributes. Related information from referencing
   * tables (e.g. posts, comments, community memberships) may be used by clients
   * to contextualize the user's activity footprint.
   *
   * If the requested member user does not exist or access is denied due to
   * authorization constraints, a 404 or appropriate error response is
   * provided.
   *
   * @param connection
   * @param memberUserId Unique identifier of the member user to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberUserId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("memberUserId")
    memberUserId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformMemberUser> {
    try {
      return await get__communityPlatform_adminUser_memberUsers_$memberUserId({
        adminUser,
        memberUserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
