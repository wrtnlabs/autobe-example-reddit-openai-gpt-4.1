import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_adminUser_posts_$postId_votes } from "../../../../../providers/post__communityPlatform_adminUser_posts_$postId_votes";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { put__communityPlatform_adminUser_posts_$postId_votes_$voteId } from "../../../../../providers/put__communityPlatform_adminUser_posts_$postId_votes_$voteId";
import { delete__communityPlatform_adminUser_posts_$postId_votes_$voteId } from "../../../../../providers/delete__communityPlatform_adminUser_posts_$postId_votes_$voteId";

import { ICommunityPlatformPostVote } from "../../../../../api/structures/ICommunityPlatformPostVote";

@Controller("/communityPlatform/adminUser/posts/:postId/votes")
export class CommunityplatformAdminuserPostsVotesController {
  /**
   * Create or update a user's vote for a specific post (upvote, downvote, or
   * removal).
   *
   * Allows an authenticated member or admin user to submit a vote for a post,
   * capturing states: upvote, downvote, or removal (reset to none).
   *
   * The operation first verifies that the target post exists and that the user
   * is not the author (self-voting is prohibited by business rules and enforced
   * by application logic). If the user already has a vote on this post, the
   * submission either toggles or updates the vote state accordingly,
   * maintaining a one-vote-per-user-per-post policy.
   *
   * Voting events are tracked for analytics and score calculation. Immediate
   * feedback is provided to the frontend for optimistic UI; back-end
   * persistence confirms final state.
   *
   * Authentication is required. Authorization allows both memberUser and
   * adminUser types. Attempting to vote as a guest triggers a login prompt.
   * Errors are returned if self-vote, post not found, or if the user has no
   * permission.
   *
   * @param connection
   * @param postId Unique identifier of the target post to be voted on (UUID).
   * @param body Voting state information (e.g., upvote, downvote, or removal)
   *   for the post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostVote.ICreate,
  ): Promise<ICommunityPlatformPostVote> {
    try {
      return await post__communityPlatform_adminUser_posts_$postId_votes({
        adminUser,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the current user's existing vote on a specific post (upvote,
   * downvote, or removal).
   *
   * Allows an authenticated user to change or remove their existing vote for a
   * given post. The operation first verifies that the vote exists, belongs to
   * the current user, and that the user is not attempting to vote on their own
   * post (self-voting is prohibited).
   *
   * Vote state is updated to either upvote, downvote, or explicitly removed
   * (none). Ownership and authorization checks are enforced. Backend confirms
   * changes for accurate score calculation and frontend updates. Invalid
   * voteId, self-vote attempts, or unauthorized access are properly handled
   * with clear error messages.
   *
   * @param connection
   * @param postId Unique identifier of the post being voted on (UUID).
   * @param voteId Unique identifier of the user's vote record for the post
   *   (UUID).
   * @param body Updated voting state for the post vote (upvote, downvote, or
   *   none).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostVote.IUpdate,
  ): Promise<ICommunityPlatformPostVote> {
    try {
      return await put__communityPlatform_adminUser_posts_$postId_votes_$voteId(
        {
          adminUser,
          postId,
          voteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete the current user's own vote on a specific post.
   *
   * Allows an authenticated member or admin user to remove their own vote from
   * a post. This sets the user's vote state to none and updates the post score
   * accordingly.
   *
   * Operation verifies voteId belongs to the current user for the target post
   * and does not allow users to remove votes on their own posts. If the vote
   * does not exist, or does not belong to the current user, an error is
   * returned. The system confirms successful removal, ensuring only the owner
   * may perform this action.
   *
   * @param connection
   * @param postId Unique identifier of the post from which the vote is removed
   *   (UUID).
   * @param voteId Unique identifier of the user's vote record to delete (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_posts_$postId_votes_$voteId(
        {
          adminUser,
          postId,
          voteId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
