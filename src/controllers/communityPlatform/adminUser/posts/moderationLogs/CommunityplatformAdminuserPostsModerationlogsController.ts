import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_posts_$postId_moderationLogs } from "../../../../../providers/patch__communityPlatform_adminUser_posts_$postId_moderationLogs";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_posts_$postId_moderationLogs_$moderationLogId } from "../../../../../providers/get__communityPlatform_adminUser_posts_$postId_moderationLogs_$moderationLogId";

import { IPageICommunityPlatformPostModerationLog } from "../../../../../api/structures/IPageICommunityPlatformPostModerationLog";
import { ICommunityPlatformPostModerationLog } from "../../../../../api/structures/ICommunityPlatformPostModerationLog";

@Controller("/communityPlatform/adminUser/posts/:postId/moderationLogs")
export class CommunityplatformAdminuserPostsModerationlogsController {
  /**
   * Retrieve paginated moderation logs for a specific post, searchable and
   * filterable.
   *
   * Retrieves a filtered, paginated list of moderation logs for a post,
   * detailing every moderation action (edit, delete, restore, etc.) taken by
   * admin users on the specific post.
   *
   * The operation supports advanced filtering (mod type, date range),
   * comprehensive sorting by date or action type, and full pagination for
   * review purposes. Only admin users are permitted, as these logs may contain
   * sensitive information for compliance and accountability. The operation
   * integrates full detail fields (action type, reason, timestamp, performing
   * admin, etc.) as described in the Prisma schema, allowing audit trails and
   * monitoring.
   *
   * Proper error handling is provided for permission errors or malformed
   * filters. Usage is restricted to platform admins due to the nature of the
   * data.
   *
   * @param connection
   * @param postId Unique identifier of the target post whose moderation logs
   *   are queried (UUID).
   * @param body Filter, sort, and pagination parameters for fetching post
   *   moderation logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostModerationLog.IRequest,
  ): Promise<IPageICommunityPlatformPostModerationLog> {
    try {
      return await patch__communityPlatform_adminUser_posts_$postId_moderationLogs(
        {
          adminUser,
          postId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific post moderation log entry by
   * ID.
   *
   * Fetches detailed information about a single moderation log entry for a
   * specific post. The operation reveals action type, reason, timestamp,
   * performing admin, and associated post, as described in the Prisma schema.
   *
   * Authorization is restricted to admin users due to the sensitivity of
   * moderation logs. The operation handles errors when the log entry or post
   * does not exist, or if unauthorized access is attempted.
   *
   * @param connection
   * @param postId Unique identifier of the post the moderation log belongs to
   *   (UUID).
   * @param moderationLogId Unique identifier of the moderation log entry to
   *   retrieve (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationLogId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("moderationLogId")
    moderationLogId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostModerationLog> {
    try {
      return await get__communityPlatform_adminUser_posts_$postId_moderationLogs_$moderationLogId(
        {
          adminUser,
          postId,
          moderationLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
