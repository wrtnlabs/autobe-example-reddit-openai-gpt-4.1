import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__communityPlatform_adminUser_externalIntegrations } from "../../../../providers/post__communityPlatform_adminUser_externalIntegrations";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__communityPlatform_adminUser_externalIntegrations } from "../../../../providers/patch__communityPlatform_adminUser_externalIntegrations";
import { get__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId } from "../../../../providers/get__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId";
import { put__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId } from "../../../../providers/put__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId";
import { delete__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId } from "../../../../providers/delete__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId";

import { ICommunityPlatformExternalIntegration } from "../../../../api/structures/ICommunityPlatformExternalIntegration";
import { IPageICommunityPlatformExternalIntegration } from "../../../../api/structures/IPageICommunityPlatformExternalIntegration";

@Controller("/communityPlatform/adminUser/externalIntegrations")
export class CommunityplatformAdminuserExternalintegrationsController {
  /**
   * Create a new external integration
   * (community_platform_external_integrations).
   *
   * Allows administrative users to register a new external integration (such as
   * a webhook, OAuth provider, or analytics endpoint) with the platform. The
   * request body must contain an integration name (unique), provider URL,
   * operational status, configuration JSON (such as credentials or required
   * scopes), and initial timestamps. On success, the operation returns the full
   * integration entity for further management or audit.
   *
   * Role restrictions are strictly enforced, limiting access to admin users.
   * Core schema constraints—including integration name uniqueness and format
   * validation for URLs/status fields—are enforced server-side with clear error
   * response patterns. This operation is critical for onboarding new
   * third-party capabilities or managing evolving platform extensibility.
   *
   * If integration name is already in use or required fields are
   * missing/invalid, appropriate error messages are returned per business
   * logic.
   *
   * @param connection
   * @param body Creation data for the new external integration, including name,
   *   provider, configuration, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformExternalIntegration.ICreate,
  ): Promise<ICommunityPlatformExternalIntegration> {
    try {
      return await post__communityPlatform_adminUser_externalIntegrations({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate external integrations
   * (community_platform_external_integrations).
   *
   * Fetches a paginated, filterable list of all external integrations
   * registered on the platform, including fields for integration name, provider
   * URL, status, and configuration metadata. The operation supports search by
   * integration name and provider fields and allows sorting by creation or
   * update timestamps as well as status. Security: Only admin users may perform
   * this operation due to the sensitive nature of external integration details
   * and potential platform security implications.
   *
   * The result set contains the summary view of integration information, making
   * it suitable for list displays and administrative dashboards. Filtering
   * allows for pinpoint monitoring of integration health (using status and last
   * sync timestamp), while pagination ensures efficient retrieval. Only
   * authenticated admin users have permission, enforced by access control and
   * audit logging. When search terms are under 2 characters, a validation
   * message is returned in accordance with business requirements.
   *
   * Business rules from the schema, especially unique integration names and
   * provider URLs, are enforced internally; erroneous or malicious queries
   * result in clear validation errors. Related operations may include
   * retrieving a single integration by ID, creating new integrations, or
   * editing/deleting as appropriate.
   *
   * @param connection
   * @param body Search, filter, pagination, and sort criteria for external
   *   integrations.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformExternalIntegration.IRequest,
  ): Promise<IPageICommunityPlatformExternalIntegration.ISummary> {
    try {
      return await patch__communityPlatform_adminUser_externalIntegrations({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve external integration detail by ID
   * (community_platform_external_integrations).
   *
   * Returns detailed information about a specific external
   * integration—identified by externalIntegrationId—including fields such as
   * integration name, provider URL, status, configuration JSON, creation and
   * update timestamps, and last successful synchronization time.
   *
   * This operation is restricted to admin users due to the sensitive
   * operational and credential data for platform integrations. It references
   * the Prisma schema entity community_platform_external_integrations, ensuring
   * all field-level business constraints are observed and that lookups are
   * performed only for existing records. A 404 error is returned if the
   * integration is not found.
   *
   * This may be used in conjunction with update, delete, or configuration
   * viewing flows by admins. Strict role-based access control is enforced as
   * integrations could include credential or provider secrets. Parameters: the
   * path parameter externalIntegrationId is a required UUID uniquely
   * identifying the integration to retrieve.
   *
   * @param connection
   * @param externalIntegrationId UUID of the target external integration to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":externalIntegrationId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("externalIntegrationId")
    externalIntegrationId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformExternalIntegration> {
    try {
      return await get__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId(
        {
          adminUser,
          externalIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing external integration configuration
   * (community_platform_external_integrations).
   *
   * Allows administrative users to update metadata, provider information,
   * status, or other configuration for a registered external integration. This
   * could include updating the provider URL, status (enabled/disabled), or
   * configuration JSON for an OAuth or webhook endpoint.
   *
   * All business logic for mutable fields is enforced, and attempts to update
   * fields prohibited by schema (such as immutable integration names or IDs)
   * result in a clear error. Role-based access is enforced for admins only. All
   * updated fields are auditable and tracked with precise timestamps in the
   * underlying schema. A 404 is returned if the integration does not exist.
   *
   * Parameter: The path parameter, externalIntegrationId, uniquely identifies
   * the integration to update. Validation ensures that only permissible fields
   * are changed and that changes are compliant with business rules.
   *
   * @param connection
   * @param externalIntegrationId UUID of the external integration to update
   * @param body Data to update for the external integration. Only mutable
   *   fields supported.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":externalIntegrationId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("externalIntegrationId")
    externalIntegrationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformExternalIntegration.IUpdate,
  ): Promise<ICommunityPlatformExternalIntegration> {
    try {
      return await put__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId(
        {
          adminUser,
          externalIntegrationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (hard delete) an external integration
   * (community_platform_external_integrations).
   *
   * Permanently removes an external integration configuration—including all
   * metadata, provider URL, credentials, and status—from the database. This is
   * a destructive operation with no undo; only users with admin privileges may
   * perform this action.
   *
   * Path parameter externalIntegrationId specifies the unique integration to
   * erase. All business rules, including deletion of sensitive configuration
   * data and unique indexes, are enforced server-side. A success response is
   * returned if the resource is deleted; if the integration does not exist, a
   * 404 error is thrown. Audit logging is triggered for compliance tracking.
   *
   * No response body is returned for successful deletions. Related operations
   * include list, get, create, and update for integrations. Administrators
   * should exercise caution as deleted integrations cannot be restored.
   *
   * @param connection
   * @param externalIntegrationId UUID of the external integration to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":externalIntegrationId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("externalIntegrationId")
    externalIntegrationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_externalIntegrations_$externalIntegrationId(
        {
          adminUser,
          externalIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
