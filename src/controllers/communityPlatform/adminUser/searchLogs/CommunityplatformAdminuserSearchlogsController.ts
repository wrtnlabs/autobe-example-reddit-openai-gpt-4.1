import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_searchLogs } from "../../../../providers/patch__communityPlatform_adminUser_searchLogs";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_searchLogs_$searchLogId } from "../../../../providers/get__communityPlatform_adminUser_searchLogs_$searchLogId";

import { IPageICommunityPlatformSearchLog } from "../../../../api/structures/IPageICommunityPlatformSearchLog";
import { ICommunityPlatformSearchLog } from "../../../../api/structures/ICommunityPlatformSearchLog";

@Controller("/communityPlatform/adminUser/searchLogs")
export class CommunityplatformAdminuserSearchlogsController {
  /**
   * Paginated search and analytics logs (community_platform_search_logs).
   *
   * This API endpoint lists search analytics logs stored in the
   * community_platform_search_logs table. It offers advanced filtering by
   * search_query (minimum 2 characters), performed user (member/admin), date
   * range, scope, and IP address. Designed to support platform analytics, audit
   * logging, and compliance requirements such as GDPR data export.
   *
   * The endpoint is available only to admin users, ensuring privacy over
   * individual search histories. Returns results in pages with support for
   * sorting (by created_at, scope). Filtering parameters allow fine-grained
   * access to trends or event-level audit. Error responses are provided for
   * malformed queries or permission violations.
   *
   * @param connection
   * @param body Filter, search, and pagination options for search logs listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformSearchLog.IRequest,
  ): Promise<IPageICommunityPlatformSearchLog> {
    try {
      return await patch__communityPlatform_adminUser_searchLogs({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific search log entry
   * (community_platform_search_logs).
   *
   * This API endpoint allows an authorized adminUser to retrieve detailed
   * information about a particular search event logged by the system. The
   * community_platform_search_logs table records each search performed by a
   * memberUser or adminUser, including relevant metadata (query string, scope,
   * IP address, timestamp, and user IDs).
   *
   * Security is enforced such that only adminUser roles can access this
   * endpoint due to the sensitive nature of audit and analytics logs. The
   * endpoint's main purpose is for system monitoring, compliance reviews
   * (privacy requests), and detailed investigation of user or admin activity.
   * The operation includes contextual fields and ensures that only
   * non-soft-deleted records are retrievable.
   *
   * The searchLogId parameter must match an existing search log's primary key
   * (UUID format). If the log does not exist or has been soft-deleted, the API
   * returns a not found error. The result includes all available logged fields
   * for the entry as per the schema, but may omit certain sensitive information
   * depending on the adminUser's access level and business logic. This
   * operation is typically used in conjunction with list/search endpoints for
   * broader analytics review.
   *
   * Related endpoints may include bulk search log listing for compliance, or
   * access to data export logs for tracking broader data workflows.
   *
   * @param connection
   * @param searchLogId Unique identifier of the search log entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":searchLogId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("searchLogId")
    searchLogId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSearchLog> {
    try {
      return await get__communityPlatform_adminUser_searchLogs_$searchLogId({
        adminUser,
        searchLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
