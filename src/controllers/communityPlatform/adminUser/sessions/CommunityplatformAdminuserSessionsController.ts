import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__communityPlatform_adminUser_sessions } from "../../../../providers/patch__communityPlatform_adminUser_sessions";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__communityPlatform_adminUser_sessions_$sessionId } from "../../../../providers/get__communityPlatform_adminUser_sessions_$sessionId";
import { put__communityPlatform_adminUser_sessions_$sessionId } from "../../../../providers/put__communityPlatform_adminUser_sessions_$sessionId";
import { delete__communityPlatform_adminUser_sessions_$sessionId } from "../../../../providers/delete__communityPlatform_adminUser_sessions_$sessionId";

import { IPageICommunityPlatformSession } from "../../../../api/structures/IPageICommunityPlatformSession";
import { ICommunityPlatformSession } from "../../../../api/structures/ICommunityPlatformSession";

@Controller("/communityPlatform/adminUser/sessions")
export class CommunityplatformAdminuserSessionsController {
  /**
   * Search and paginate session tokens (community_platform_sessions).
   *
   * This operation lists and searches user sessions for the platform,
   * leveraging the community_platform_sessions schema. Admin users can filter
   * sessions by user ID, status (active, revoked, expired), device information,
   * and time range, supporting efficient session monitoring and management.
   *
   * Returned data includes session metadata but never plaintext tokens. Used
   * for security audits, forced logouts, and device tracking. Only adminUser
   * has access. Related operations: GET/PUT/DELETE for session detail and
   * management.
   *
   * @param connection
   * @param body Filter and pagination parameters for searching session tokens.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformSession.IRequest,
  ): Promise<IPageICommunityPlatformSession> {
    try {
      return await patch__communityPlatform_adminUser_sessions({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a session (community_platform_sessions).
   *
   * This operation retrieves complete details for a single session token record
   * in the community_platform_sessions schema. Only admin users are permitted
   * to access session details, which include user reference, device info, login
   * IP, timestamps, and expiration or revocation status.
   *
   * Plaintext session tokens are never returned. Intended for session audits,
   * forced logout management, or analysis of user activity. Related endpoints:
   * PATCH for searching, PUT/DELETE for detail/update.
   *
   * @param connection
   * @param sessionId Unique session UUID to retrieve details for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sessionId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSession> {
    try {
      return await get__communityPlatform_adminUser_sessions_$sessionId({
        adminUser,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a session record (community_platform_sessions).
   *
   * This operation allows an admin user to update selected fields of an
   * existing session token in the community_platform_sessions schema, such as
   * device info or status (e.g., manual revocation). Session token is
   * identified by its UUID. All updates are recorded in audit logs for
   * compliance.
   *
   * Only mutable fields may be changed; session tokens themselves are never
   * exposed. Related endpoints include GET for session detail and DELETE for
   * revocation.
   *
   * @param connection
   * @param sessionId Unique session UUID to update.
   * @param body Updated fields for the session record (e.g., device info,
   *   revoked_at).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sessionId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformSession.IUpdate,
  ): Promise<ICommunityPlatformSession> {
    try {
      return await put__communityPlatform_adminUser_sessions_$sessionId({
        adminUser,
        sessionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete or revoke a session record (community_platform_sessions).
   *
   * This operation permanently deletes or revokes a platform session record in
   * the community_platform_sessions schema. Access is restricted to admin users
   * for security. Once deleted, the session token is no longer valid for
   * authentication or access.
   *
   * Hard delete or manual revocation is enforced and audit logged for
   * compliance. Related endpoints include PATCH for listing/searching, GET/PUT
   * for detail/update.
   *
   * @param connection
   * @param sessionId Unique session UUID to delete/revoke.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sessionId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__communityPlatform_adminUser_sessions_$sessionId({
        adminUser,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
