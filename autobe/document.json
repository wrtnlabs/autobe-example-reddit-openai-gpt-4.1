{"operations":[{"specification":"Provides guest user registration—registers a new guest session, assigns a non-personal session identifier, and issues a temporary token for limited access (browse, search). Prisma table: community_platform_guestusers. Guests cannot log in or perform privileged actions; this operation is the entry point for obtaining a session and a temporary access token. Registration does not persist personal identifiers; associates new 'guest' identity with a session_signature (if provided) and timestamps. Essential for supporting smooth, resumable guest browsing and session analytics. Tokens issued are temporary, scoped for allowed actions (browsing/search). Relates to anonymous analytics/session flow. Session renewal and other upgrade flows handled by refresh or future join actions for member users. Error: Duplicate/invalid session signature is handled as benign, always succeeds (idempotent).","authorizationType":"join","description":"Initiates guest user registration, creating a row in 'community_platform_guestusers' and issuing a temporary token, with no PII stored by business logic or Prisma schema. Guest accounts provide only browsing and analytics; they lack login credentials and do not have email, password, or display name fields. The operation is public (unauthenticated); it is designed to be invoked when a new visitor browses the community platform or when browser/session state is lost. This registration action creates a UUID and optional session_signature for the guest, recording timestamps for first/last seen, with null 'deleted_at'.\n\nThere is no credential authentication: guests may re-register or resume without restrictions. Session tokens issued are short-lived and grant access solely for anonymous browsing/searching (posting, voting, joining, or editing require upgrading to memberUser). No PII is persisted—only opaque session links for metrics. This operation is strictly non-destructive (idempotent). Security risk is minimal since guest actions are highly constrained by business logic and enforced in every feature layer.\n\nInteracts with 'community_platform_guestusers' and is referenced by all analytics and log tables related to session tracking. Related operations include 'refresh' (for extending guest sessions), and all upgrade/auth flows for registered users. Member and admin actions are explicitly blocked for guests.\n\nClient may call this endpoint multiple times; each executes independently with no conflict. For transitioning to memberUser, use the member registration flow, which requires email, password, and explicit authentication, not supported here.\n\nThe response DTO is ICommunityPlatformGuestUser.IAuthorized: contains a temporary token, expiry, and assigned guest UUID, exactly as provisioned by platform authentication business logic.","summary":"Guest user registration—create a guest session and issue a temporary token (community_platform_guestusers).","parameters":[],"requestBody":{"description":"Guest session registration body. No user PII; only optional opaque session_signature for session re-linking. Used strictly for session analytics.","typeName":"ICommunityPlatformGuestUser.IJoin"},"responseBody":{"description":"Authorization data for guest user: includes assigned guest userId and a temporary session token for future platform access.","typeName":"ICommunityPlatformGuestUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/guestUser/join","method":"post"},{"specification":"Refreshes a temporary guest session token, extending the period a guest user may anonymously browse/search the platform. Associated with guest tokens previously issued by the join endpoint. Requires the previous guest token for validation, ensures that only non-revoked active sessions request extension. Targets Prisma table 'community_platform_guestusers' for identity, validating that the guest account is not marked deleted (deleted_at is null). Issues a new temporary token with updated expiration, referencing the original guest 'id'. No credentials or login is required; the token must be presented. Used for seamless guest session renewal without requiring guest account upgrade or data loss. This endpoint is critical for UX continuity and analytics tracking, ensuring consistent behavior for unauthenticated users across browser sessions and navigation events.","authorizationType":"refresh","description":"This operation refreshes a temporary access token for a guest account, based on the original guest token issued at registration. It ensures that the linked guest account entry in 'community_platform_guestusers' is still active (deleted_at is null) and not expired or revoked. Session renewal returns a new signed JWT with a refreshed expiry. No credentials are used since guest accounts contain no personal information; instead, only the temporary token is validated. Guests cannot refresh their token if their session has been deleted. Each refresh produces a new short-lived token, permitting continued anonymous access.","summary":"Guest session token refresh—extend guest access with a new temporary token (community_platform_guestusers).","parameters":[],"requestBody":{"description":"Request payload with the current guest user's token (from prior join/refresh calls).","typeName":"ICommunityPlatformGuestUser.IRefresh"},"responseBody":{"description":"The refreshed guest user token and updated authorization metadata for ongoing anonymous session use.","typeName":"ICommunityPlatformGuestUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/guestUser/refresh","method":"post"},{"specification":"This operation creates a new memberUser account on the community platform, triggering initial credential creation, secure password hashing, duplicate email enforcement, and account status assignment. If email is already registered, a duplicate error is returned. The primary underlying Prisma table is community_platform_memberusers, and credentials are stored in community_platform_user_credentials. The workflow also creates backend audit logs and issues an initial JWT access/refresh token pair for session management. Only non-authenticated clients may use this; used for initial registration. All credential, created_at, and status fields are enforced. Security: Only public access is permitted. Email must be unique; status is set to 'active' or equivalent. No additional PII fields are required. Related operations: login, refresh, logout. Handles error conditions for duplicates and weak password policy.","authorizationType":"join","description":"This endpoint enables registration of new memberUser accounts by capturing and validating email and password inputs, linking the account to a credential, and recording the user's initial display name if provided. Registration results in credential creation in the community_platform_user_credentials table and an account entry in community_platform_memberusers. The system performs uniqueness checks for email addresses, hashes passwords securely, and sets the user's status (such as 'active'). Audit log entries and session creation are triggered. Only non-authenticated users can perform registration. Security is ensured by not allowing duplicate email addresses and never exposing the password hash. Registration triggers issue of JWT access and refresh tokens (see the session model). Related to login (for authentication), and refresh (for token renewal). Errors include duplicate email and password policy violations.","summary":"Register new memberUser accounts using unique email and password; creates user and issues tokens (community_platform_memberusers).","parameters":[],"requestBody":{"description":"Registration payload with unique email, strong password, and optional display name.","typeName":"ICommunityPlatformMemberUser.IJoin"},"responseBody":{"description":"Upon success, the system returns issued JWT access and refresh tokens and an authorized session, tying the account to a secure credential. Fails on duplicate email or password errors.","typeName":"ICommunityPlatformMemberUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/memberUser/join","method":"post"},{"specification":"This endpoint authenticates an existing memberUser using their email and password, issuing new JWT access and refresh tokens to maintain session state as per business requirements. The underlying Prisma tables for email/password comparison are community_platform_user_credentials (stores hashed password) and community_platform_memberusers (stores account status and display name). Audit logging is performed on login. If credentials are invalid, appropriate errors are returned. Session tokens are issued for each valid login. Security: Fails securely on wrong credentials or suspended user. Related operations: join (registration), refresh (token renewal), logout (session end). Email must correspond to a registered user, and password is verified against securely stored hash. Account status and soft deletion are checked before token issuance.","authorizationType":"login","description":"This endpoint allows existing memberUser accounts to authenticate using email and password credentials. Community_platform_user_credentials is used for secure password hash validation, and community_platform_memberusers is checked for active status and lack of deletion. Upon successful authentication, new JWT access and refresh tokens are issued, tracked in community_platform_sessions. Login events are audit-logged with IP/device information. Validation ensures credentials match; status='active' and deleted_at=null are required. Fails with generic error on wrong credentials or suspended accounts. Security measures: password hash is never exposed, and brute-force detection logic should be enforced by implementation. Related operations: join (registration), refresh (token renewal), and logout. Common error conditions: invalid credentials, account not active, soft or hard deleted users.","summary":"Authenticate memberUser by email/password and issue new JWT tokens (community_platform_memberusers).","parameters":[],"requestBody":{"description":"Login payload with existing memberUser email and password.","typeName":"ICommunityPlatformMemberUser.ILogin"},"responseBody":{"description":"Returns a new authorized JWT token pair, session info, and account linkage if credentials are valid. Errors for wrong credentials or suspended user. Secure handling per system policy.","typeName":"ICommunityPlatformMemberUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/memberUser/login","method":"post"},{"specification":"This endpoint allows an authenticated memberUser to refresh their session by exchanging a valid refresh token for new JWT access and refresh tokens. The operation uses the community_platform_sessions table to lookup, validate, ensure non-revocation, and check expiry of the given token. Security: The refresh token must not be expired or revoked. If successful, new tokens are issued and session extended. Audit logs are generated for each refresh. Soft deletion and account status are respected. Related operations include login (original authentication), join (registration), and logout (token invalidation). Deletion of underlying user disables refresh. Principal fields from sessions: token, issued_at, expires_at, revoked_at.","authorizationType":"refresh","description":"This refresh endpoint enables active memberUser accounts to renew their JWT access and refresh tokens using a valid, non-revoked, and unexpired refresh token previously issued at login or registration. Session management and validation occur in community_platform_sessions. If validation passes, the user is granted a new token pair and updated session expiry. Audit logs record refresh event including token and device info. If the token is invalid, expired, or the account is suspended/deleted, the request fails. Security is paramount: only valid active sessions may be refreshed. Related endpoints: join (registration), login (credential authentication), and logout (token/session invalidation). Errors returned for token expiry, invalid session, or account status issues.","summary":"Refresh JWT tokens for a memberUser via valid refresh token (community_platform_sessions).","parameters":[],"requestBody":{"description":"Refresh token payload as issued in prior session.","typeName":"ICommunityPlatformMemberUser.IRefresh"},"responseBody":{"description":"If the refresh token is valid (active session, non-expired, non-revoked), new JWT token pair is returned; fails for logout/revoked or inactive accounts.","typeName":"ICommunityPlatformMemberUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/memberUser/refresh","method":"post"},{"specification":"This operation implements platform administrator registration (join) for the community platform. It allows a new adminUser to be created by supplying the required credential fields—email and (hashed) password are required, as defined in the community_platform_user_credentials table, and linked to the community_platform_adminusers table for admin metadata. Optional display_name is accepted. Upon successful registration, the platform issues initial JWT tokens (see community_platform_sessions for audit issuance and tracking) and credentials are linked 1:1 between credential and admin user records.\n\nThis endpoint enforces that adminUser accounts are not converted from other user types. All admin accounts must be explicitly created and managed by existing administrators. Security is paramount—passwords are stored as strong hashes and never returned in API responses. Session creation is recorded per the schema definitions. Registration responses return only required authentication payload (see response body).\n\nAs required by business logic and schema, admin users receive status (active/suspended/etc) per adminusers.status, but status is managed server-side during or after creation. Join operation is public, but only accessible to admins or via system bootstrap process.\n\nTokens issued via this endpoint are tracked in community_platform_sessions and reflected in audit logs (community_platform_audit_logs). No additional user management (profile editing, preference updates) is performed by this endpoint. Related operations: admin login, refresh, and password management flows.\n\nAPI strictly requires email and password (hashed on client), and can accept display_name. No other admin management logic is included here.","authorizationType":"join","description":"This endpoint allows creation of a new adminUser account on the community platform. It enforces the creation of a unique set of credentials in the community_platform_user_credentials table, including a secure email address and hashed password. Each new adminUser is linked by user_credential_id to a record in community_platform_adminusers, which stores status and optional display name. Responses issue initial JWT tokens (see community_platform_sessions schema for session tracking).\n\nCreation and management of adminUser accounts is restricted—they can only be registered through this endpoint by other administrators or during platform bootstrapping. The operation validates email uniqueness and password strength according to the credential schema, and all sensitive fields are omitted from response. Credentials and platform session records are automatically linked to the new adminUser. Passwords are hashed and not stored in plain text, reflecting security best practices. The endpoint does not allow member->admin conversion or general profile management.\n\nSensitive fields (password_hash, deleted_at) are validated and stored per schema rules. The adminUser is assigned a default active status, and additional management is only permitted through admin-specific logic. The join operation audits all actions using community_platform_audit_logs and writes new session entries in community_platform_sessions for every login. The endpoint does not expose profile editing, preference management, or non-authentication flows.\n\nJWT tokens are issued on successful adminUser creation and must be tracked in session tables for future management. All email/password validation is enforced server-side. Related operations: adminUser login, refresh token, and password reset flows.\n\nThis is a platform-critical function ensuring secure, traceable onboarding of admin-level platform accounts.","summary":"Registers a new adminUser with credentials; issues JWT tokens. (community_platform_adminusers, community_platform_user_credentials, community_platform_sessions)","parameters":[],"requestBody":{"description":"AdminUser registration (join) details: credential info and optional display_name.","typeName":"ICommunityPlatformAdminUser.IJoin"},"responseBody":{"description":"AdminUser authorized JWT/session response with core identity fields.","typeName":"ICommunityPlatformAdminUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/adminUser/join","method":"post"},{"specification":"This operation allows adminUser authentication (login) for the platform, validating credentials against the community_platform_user_credentials table, then matching the credential to an adminUser record in community_platform_adminusers via user_credential_id. If valid—and if not suspended or deleted—this operation issues new JWT access and refresh tokens. Each auth event records a session in community_platform_sessions and audit event/log in community_platform_audit_logs.\n\nCredentials are validated by email and password (password sent as hash, per schema rules). On success, the adminUser's id, display_name, and status are returned in JWT claims for the session. No profile, preference, or password updates are performed by this endpoint. User status is checked for active/suspended as defined by adminusers.status and enforced server-side. Session tracking reflects auditability for all login events per schema.\n\nThis endpoint does not allow login using memberUser credentials, nor does it allow external authentication providers (see external integrations for future expansion). It does not allow password resets or registration—see join and reset endpoints. Passwords are always securely checked and never returned in the payload.\n\nRelated operations include registration (join), token refresh, and password reset flows for admin users. All authentication logic is restricted to admin-level accounts as matched in the database, and the operation has no non-authentication business logic.","authorizationType":"login","description":"Authenticates an adminUser by verifying their credentials against the community_platform_user_credentials table and linking to the admin record in community_platform_adminusers. On success, issues new JWT tokens, records session in community_platform_sessions, and logs event in community_platform_audit_logs. Only users with valid (active, not suspended/deleted) status can login. Only supports adminUser accounts; member or guest credentials are rejected.\n\nThe endpoint does not permit any profile update, user management, or external authentication. It validates password hashes securely and ensures proper linking between credentials and admin account. Status is checked according to used schema fields. All successful and failed login attempts are logged for security. Result payload includes only token/session and admin user identity data required for authenticated sessions.\n\nRelated endpoints are: adminUser join/registration, token refresh, password reset. Use this for platform admin login only; not for member/guest accounts.","summary":"Logs in an adminUser account and issues JWT tokens. (community_platform_adminusers, community_platform_sessions)","parameters":[],"requestBody":{"description":"AdminUser login credentials: email and (hashed) password.","typeName":"ICommunityPlatformAdminUser.ILogin"},"responseBody":{"description":"AdminUser authorized JWT/session response with core identity fields.","typeName":"ICommunityPlatformAdminUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/adminUser/login","method":"post"},{"specification":"This operation renews JWT authentication tokens for an adminUser account given a valid refresh token. It verifies the refresh token matches an unexpired, unnulled session in the community_platform_sessions table, associated with an adminUser by user_id. If valid and not revoked/expired, it generates new JWT access/refresh tokens and records the refresh event for auditing (see community_platform_audit_logs).\n\nThe refresh endpoint does not require email or password, only a valid refresh token issued during prior login/join events. Session expiry, revocation, and admin status are checked according to schema, and revoked or expired tokens are rejected. All events (success and failure) are logged in audit logs. No profile or status updates are permitted here, only token lifecycle management.\n\nThis endpoint is available for active adminUser accounts only and does not permit refresh for member or guest tokens. It does not handle password reset or registration, which are separate endpoints. For security, tokens are always short-lived and non-replayable, as required by schema business rules. Revoked or expired sessions are assessed via community_platform_sessions and corresponding adminus ers table for status.\n\nAll new tokens are tracked by their session records for traceability. Endpoint strictly follows platform rules on session management, as summarized by the Prisma schema.","authorizationType":"refresh","description":"Issues new JWT tokens for an adminUser account, provided a valid refresh token matching a live session in community_platform_sessions and the linked community_platform_adminusers record. Only tokens for active (not suspended/deleted) adminUsers can be renewed. Tracks and logs all token refresh events for compliance (community_platform_audit_logs). The endpoint does not allow registration, login by credentials, or password updates – only authenticated refresh by token is performed.\n\nDoes not perform any non-authentication or user management logic, reflecting strict business segmentation of authentication/authorization operations. Token renewal uses server-verified schema logic and does not expose any sensitive credentials to the client. Related operations: join, login, and password reset for admin users.","summary":"Refreshes JWT tokens for an adminUser account. (community_platform_sessions, community_platform_adminusers)","parameters":[],"requestBody":{"description":"Refresh token payload as issued by previous login/join; required for adminUser session continuation.","typeName":"ICommunityPlatformAdminUser.IRefresh"},"responseBody":{"description":"AdminUser authorized JWT/session response with core identity fields.","typeName":"ICommunityPlatformAdminUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/adminUser/refresh","method":"post"},{"specification":"Searches and retrieves a filtered, paginated list of all community platform categories. This includes queries on category name, description, display order, and supports sorting and pagination. Based on the community_platform_categories table, it is the recommended way to retrieve multiple categories for admin or UI category selectors.","description":"Retrieve a list of categories from the community_platform_categories table, enabling advanced filters by name, description (with GIN/trigram search optimizations), and display_order. Pagination and sorting options are supported as per system-wide listing standards. This operation allows authenticated users (adminUser/memberUser) to discover categories for community creation or UI selector purposes.\n\nThe API response contains summary data for each category, such as ID, name, display order, optional description, timestamps, and all fields defined in the Prisma schema, enabling frontend typeahead, dropdowns, and management interfaces.\n\nPermissions: This operation is available to both adminUser and memberUser roles. It does not expose any sensitive data and is suitable for public category listings. Error handling covers validation of search queries and response limits to prevent abusive or nonsensical lookups.","summary":"Search and list community platform categories with filtering and pagination.","parameters":[],"requestBody":{"description":"Search and filter criteria for categories, including name/description match, sorting, and paging.","typeName":"ICommunityPlatformCategory.IRequest"},"responseBody":{"description":"Paginated list of category summaries matching search criteria.","typeName":"IPageICommunityPlatformCategory.ISummary"},"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/categories","method":"patch","name":"index"},{"specification":"Searches and retrieves a filtered, paginated list of all community platform categories. This includes queries on category name, description, display order, and supports sorting and pagination. Based on the community_platform_categories table, it is the recommended way to retrieve multiple categories for admin or UI category selectors.","description":"Retrieve a list of categories from the community_platform_categories table, enabling advanced filters by name, description (with GIN/trigram search optimizations), and display_order. Pagination and sorting options are supported as per system-wide listing standards. This operation allows authenticated users (adminUser/memberUser) to discover categories for community creation or UI selector purposes.\n\nThe API response contains summary data for each category, such as ID, name, display order, optional description, timestamps, and all fields defined in the Prisma schema, enabling frontend typeahead, dropdowns, and management interfaces.\n\nPermissions: This operation is available to both adminUser and memberUser roles. It does not expose any sensitive data and is suitable for public category listings. Error handling covers validation of search queries and response limits to prevent abusive or nonsensical lookups.","summary":"Search and list community platform categories with filtering and pagination.","parameters":[],"requestBody":{"description":"Search and filter criteria for categories, including name/description match, sorting, and paging.","typeName":"ICommunityPlatformCategory.IRequest"},"responseBody":{"description":"Paginated list of category summaries matching search criteria.","typeName":"IPageICommunityPlatformCategory.ISummary"},"authorizationType":null,"authorizationRole":"memberUser","path":"/communityPlatform/memberUser/categories","method":"patch","name":"index"},{"specification":"Retrieves details for a specific category record in the community_platform_categories table by categoryId. Returns all category properties including name, display order, description, and timestamps for the given UUID.","description":"Obtains a single category by its unique identifier from the community_platform_categories table. The response includes the primary key, name, display order, description, and timestamps as per the Prisma schema.\n\nPermissions: Both adminUser and memberUser are permitted. This is suitable for populating category edit dialogs or detailed UI category displays.\n\nSecurity: Exposes only non-sensitive business dictionary data, restricted by access roles. Errors include not found (if the UUID does not match any row).","summary":"Get details for a category by categoryId (UUID) from community_platform_categories.","parameters":[{"name":"categoryId","description":"Unique identifier for the target category (community_platform_categories.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All properties for community platform category matching the ID.","typeName":"ICommunityPlatformCategory"},"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/categories/{categoryId}","method":"get","name":"at"},{"specification":"Retrieves details for a specific category record in the community_platform_categories table by categoryId. Returns all category properties including name, display order, description, and timestamps for the given UUID.","description":"Obtains a single category by its unique identifier from the community_platform_categories table. The response includes the primary key, name, display order, description, and timestamps as per the Prisma schema.\n\nPermissions: Both adminUser and memberUser are permitted. This is suitable for populating category edit dialogs or detailed UI category displays.\n\nSecurity: Exposes only non-sensitive business dictionary data, restricted by access roles. Errors include not found (if the UUID does not match any row).","summary":"Get details for a category by categoryId (UUID) from community_platform_categories.","parameters":[{"name":"categoryId","description":"Unique identifier for the target category (community_platform_categories.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All properties for community platform category matching the ID.","typeName":"ICommunityPlatformCategory"},"authorizationType":null,"authorizationRole":"memberUser","path":"/communityPlatform/memberUser/categories/{categoryId}","method":"get","name":"at"},{"specification":"Creates a new community platform category row in the community_platform_categories table. Used by admin for introducing new classification groups for sub-communities. Enforces unique name and input validation as per schema.","description":"Creates a new entry in the community_platform_categories table with a system-unique, case-insensitive name (5–32 characters, a-z, A-Z, 0-9, hyphen, underscore), display order (integer), and optional description. This operation is intended for admin users when expanding the fixed category set for sub-communities.\n\nValidates all inputs including uniqueness and pattern enforcement for 'name', sequentiality for 'display_order', and maximum length for description. Tracking of creator and audit timestamps is handled automatically.\n\nOnly adminUser is permitted for category creation. Duplicate names or invalid formats trigger validation errors as described in requirements.","summary":"Create a new community platform category (admin only) in community_platform_categories.","parameters":[],"requestBody":{"description":"Category creation info: name (unique), displayOrder, and description.","typeName":"ICommunityPlatformCategory.ICreate"},"responseBody":{"description":"The created category record as stored in the database.","typeName":"ICommunityPlatformCategory"},"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/categories","method":"post","name":"create"},{"specification":"Updates a community platform category in the community_platform_categories table by categoryId. Allows admin to edit the description, display order, or category visual properties, but not the name (which is immutable as per schema/documentation).","description":"This operation finds a category by its UUID and updates editable fields: description and display_order (the 'name' remains immutable). It enforces length and integer constraints, and updates the audit timestamps (updated_at). If no record matches, not found is returned. Attempts to edit 'name' are rejected per business rule.\n\nOnly adminUser may execute. It is used in backend admin interfaces and management panels. Validation errors occur if constraints are violated or UUID is missing.","summary":"Update properties for a category (description, order) by categoryId (admin only).","parameters":[{"name":"categoryId","description":"Target category ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for a category (description, display_order).","typeName":"ICommunityPlatformCategory.IUpdate"},"responseBody":{"description":"The updated category record post-modification.","typeName":"ICommunityPlatformCategory"},"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/categories/{categoryId}","method":"put","name":"update"},{"specification":"Deletes a community platform category from the community_platform_categories table using categoryId (UUID). Performs a hard delete as there is no 'deleted_at' column in schema. Use with caution as this removes the category from the system entirely.","description":"Permanently removes the specified category from the community_platform_categories table by its UUID (categoryId). This operation does not leave recoverable traces since no soft delete field exists. Used only by adminUser role and typically restricted to prevent orphaned sub-communities or system inconsistencies.\n\nBefore deletion, systems may enforce checks to ensure no communities reference the target category. If referenced, deletion should be blocked with a meaningful error. Otherwise, the record is removed entirely.\n\nError handling includes not found and foreign key constraint violations.","summary":"Hard delete a category by ID (admin only, irreversible).","parameters":[{"name":"categoryId","description":"UUID of category to hard delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/categories/{categoryId}","method":"delete","name":"erase"},{"specification":"Search and retrieve a paginated, filtered list of platform configuration parameters from the community_platform_configurations table. Used for admin interface queries and edit screens for global settings.","description":"Retrieves a sequence of configuration parameter records, supporting filter by key, description, value (with trigram or substring search), sorting and paging as per admin system standards. Provides audit properties, parameter value and description for each config variable leveraged by server and admin logic.\n\nTypically used by adminUser to view and review global config parameters for platform health and feature toggles. Results are not public due to possible disclosure of sensitive system tuning information.","summary":"List all configuration parameters (filtered, paginated; admin only).","parameters":[],"requestBody":{"description":"Search/filter and paging criteria for configs.","typeName":"ICommunityPlatformConfiguration.IRequest"},"responseBody":{"description":"Paginated response of configuration parameter summaries.","typeName":"IPageICommunityPlatformConfiguration.ISummary"},"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/configurations","method":"patch","name":"index"},{"specification":"Obtains details for a specific platform configuration parameter in the community_platform_configurations table given configurationId (UUID). Used in suite/admin interfaces or audits for system state introspection.","description":"Gets the configuration parameter row with a specific UUID, returning all fields defined (id, key, value, description, created_at, updated_at). These records determine system environment and feature toggles, so read access is adminUser only.\n\nSuitable for filling in edit panels. Content may include private or audit relevant data so is never to be exposed in public UI or undocumented APIs. Errors include not found for unknown UUIDs or deleted records.","summary":"Get all details for a configuration parameter by configurationId (UUID; admin only).","parameters":[{"name":"configurationId","description":"Unique UUID for configuration parameter row; corresponds to community_platform_configurations.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All properties for a single configuration parameter.","typeName":"ICommunityPlatformConfiguration"},"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/configurations/{configurationId}","method":"get","name":"at"},{"specification":"Creates a new configuration parameter in the community_platform_configurations table, permitting platform operators/admins to add new system settings, feature toggles, or operational parameters as required by the platform business logic.","description":"Inserts a row into the community_platform_configurations table with the required 'key' (must be unique; e.g. 'max_post_length'), 'value' (arbitrary string/JSON/number as string), optional description (max 200 chars), and sets all audit timestamps. Intended for adminUser access only.\n\nValidation includes unique constraint for 'key', description length, and validation of any business-allowed character set or semantic standards for 'key'. Used for UI-driven feature flag and config managers. Attempting to create with duplicate keys or violating length rules is rejected as validation error.","summary":"Create a new platform configuration parameter (admin only).","parameters":[],"requestBody":{"description":"Required fields for config creation: key, value, description(optional).","typeName":"ICommunityPlatformConfiguration.ICreate"},"responseBody":{"description":"The configuration parameter row as stored after creation.","typeName":"ICommunityPlatformConfiguration"},"authorizationType":null,"authorizationRole":"adminUser","path":"/communityPlatform/adminUser/configurations","method":"post","name":"create"},{"specification":"Update an existing platform configuration entry by its unique identifier. This operates on the community_platform_configurations table, allowing an admin to change a configuration key's value and description. Only adminUser is permitted. All modifications are audited with a timestamp. Key and value must conform to business validation. This endpoint is not public and changes affect application runtime logic.","description":"This operation updates a single configuration parameter in the community_platform_configurations schema table. Only authenticated admin users can perform this action, ensuring enforcement of system configuration constraints. Modification includes updating the value or description of an existing configuration entry. The change is immediately propagated to system components relying on this configuration key.\n\nAccess to this operation is restricted to admin users for platform security. All configuration changes are tracked via audit logs and updated_at timestamps for compliance.\n\nAttempting to update a non-existent configuration key, or without sufficient privileges, results in a not found or forbidden error. Related endpoints include GET for configuration retrieval and PATCH for searching configuration entries.","path":"/communityPlatform/adminUser/configurations/{configurationId}","method":"put","summary":"Update a configuration entry (community_platform_configurations).","parameters":[{"name":"configurationId","description":"Unique identifier (UUID) of the configuration entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New configuration value and optional description.","typeName":"ICommunityPlatformConfiguration.IUpdate"},"responseBody":{"description":"Updated configuration entry.","typeName":"ICommunityPlatformConfiguration"},"authorizationType":null,"authorizationRole":"adminUser","name":"update"},{"specification":"Delete an existing platform configuration entry identified by its UUID from the community_platform_configurations table. Only admin users can perform this potentially destructive operation, which permanently removes the configuration entry from the system. Deletion is logged and affects the associated configuration key's availability system-wide.","description":"This operation permanently deletes a configuration entry from the community_platform_configurations table. Only users with the adminUser role have access, since configuration records control key platform behavior. When deleted, the entry is removed from all future reads and the action is logged for compliance monitoring.\n\nDeletion is performed via a hard delete. There is no recovery mechanism, so care must be taken. Attempts to delete a non-existent or protected key return an error.\n\nRelated operations include PUT for updating, PATCH for searching, and GET for retrieving configuration details.","path":"/communityPlatform/adminUser/configurations/{configurationId}","method":"delete","summary":"Delete a configuration entry (community_platform_configurations).","parameters":[{"name":"configurationId","description":"Unique identifier (UUID) of the configuration entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","name":"erase"},{"specification":"Search for audit logs recorded in the community_platform_audit_logs table. Allows filtering by event type, actor, and time range with pagination and ordering. Results are used for HR compliance, admin reviews, and platform monitoring. AdminUser role required. Returns a paginated list of audit logs matching filter parameters.","description":"This operation allows admin users to search and paginate over platform audit logs in community_platform_audit_logs. Search filtering can be performed by event type (e.g. config change, session login), actor (member or admin), IP address, and creation time range.\n\nAudit logs contain sensitive information and are only accessible to admin users for compliance and investigation purposes. Results are paginated, with support for ordering by time and filtering by details.\n\nBusiness logic enforces that unauthenticated or unauthorized users cannot access this operation. Returned data includes all columns except for internal security details. Related operations: GET for details of a specific audit log entry.","path":"/communityPlatform/adminUser/auditLogs","method":"patch","summary":"Search and paginate audit logs (community_platform_audit_logs).","parameters":[],"requestBody":{"description":"Filter and pagination parameters for searching audit logs.","typeName":"ICommunityPlatformAuditLog.IRequest"},"responseBody":{"description":"Paginated result of audit log entries.","typeName":"IPageICommunityPlatformAuditLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"index"},{"specification":"Retrieve the details of a specific audit log entry from the community_platform_audit_logs table using its UUID. Only admin users are authorized to access this sensitive security data. The operation provides event context, actor, timestamp, and event details.","description":"This operation returns comprehensive information for a specific audit log entry in the community_platform_audit_logs schema. The log entry is identified by its unique UUID. The details provided include event type, actor (member/admin), event context, and timestamp.\n\nAudit logs are a restricted resource containing sensitive operations. Only adminUser role is permitted access. Attempting to access a log without privileges, or for a key that does not exist, results in an error. Related operation: PATCH for searching all logs.","path":"/communityPlatform/adminUser/auditLogs/{auditLogId}","method":"get","summary":"Get details of an audit log entry (community_platform_audit_logs).","parameters":[{"name":"auditLogId","description":"Unique identifier (UUID) of the audit log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the audit log entry.","typeName":"ICommunityPlatformAuditLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"at"},{"specification":"Search and paginate active session tokens in the community_platform_sessions table for administrative management. Allows filtering by user, status, device info, and expiry. Only adminUser role can view or manage sessions. Returns paginated session entries for compliance, security audits, or session management.","description":"This operation lists and searches user sessions for the platform, leveraging the community_platform_sessions schema. Admin users can filter sessions by user ID, status (active, revoked, expired), device information, and time range, supporting efficient session monitoring and management.\n\nReturned data includes session metadata but never plaintext tokens. Used for security audits, forced logouts, and device tracking. Only adminUser has access. Related operations: GET/PUT/DELETE for session detail and management.","path":"/communityPlatform/adminUser/sessions","method":"patch","summary":"Search and paginate session tokens (community_platform_sessions).","parameters":[],"requestBody":{"description":"Filter and pagination parameters for searching session tokens.","typeName":"ICommunityPlatformSession.IRequest"},"responseBody":{"description":"Paginated list of session token records.","typeName":"IPageICommunityPlatformSession"},"authorizationType":null,"authorizationRole":"adminUser","name":"index"},{"specification":"Retrieve a specific session record by its UUID from the community_platform_sessions table. Used by admin users to view session metadata, device info, IP, status, and timing for session management and security auditing.","description":"This operation retrieves complete details for a single session token record in the community_platform_sessions schema. Only admin users are permitted to access session details, which include user reference, device info, login IP, timestamps, and expiration or revocation status.\n\nPlaintext session tokens are never returned. Intended for session audits, forced logout management, or analysis of user activity. Related endpoints: PATCH for searching, PUT/DELETE for detail/update.","path":"/communityPlatform/adminUser/sessions/{sessionId}","method":"get","summary":"Get details of a session (community_platform_sessions).","parameters":[{"name":"sessionId","description":"Unique session UUID to retrieve details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete session record and metadata.","typeName":"ICommunityPlatformSession"},"authorizationType":null,"authorizationRole":"adminUser","name":"at"},{"specification":"Update mutable fields for a specific session token record in the community_platform_sessions table. Enables admin users to manually revoke, extend, or update device metadata for a session. Typically used for session management or forced logout scenarios. Only adminUser has access.","description":"This operation allows an admin user to update selected fields of an existing session token in the community_platform_sessions schema, such as device info or status (e.g., manual revocation). Session token is identified by its UUID. All updates are recorded in audit logs for compliance.\n\nOnly mutable fields may be changed; session tokens themselves are never exposed. Related endpoints include GET for session detail and DELETE for revocation.","path":"/communityPlatform/adminUser/sessions/{sessionId}","method":"put","summary":"Update a session record (community_platform_sessions).","parameters":[{"name":"sessionId","description":"Unique session UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the session record (e.g., device info, revoked_at).","typeName":"ICommunityPlatformSession.IUpdate"},"responseBody":{"description":"Updated session record and metadata.","typeName":"ICommunityPlatformSession"},"authorizationType":null,"authorizationRole":"adminUser","name":"update"},{"specification":"Delete (revoke or remove) a session token record for a given UUID from the community_platform_sessions table. Only admin users may perform this action, which may involve marking the session as revoked or hard deletion depending on business logic. Intended for device/session management and security compliance. All actions are auditable.","description":"This operation permanently deletes or revokes a platform session record in the community_platform_sessions schema. Access is restricted to admin users for security. Once deleted, the session token is no longer valid for authentication or access.\n\nHard delete or manual revocation is enforced and audit logged for compliance. Related endpoints include PATCH for listing/searching, GET/PUT for detail/update.","path":"/communityPlatform/adminUser/sessions/{sessionId}","method":"delete","summary":"Delete or revoke a session record (community_platform_sessions).","parameters":[{"name":"sessionId","description":"Unique session UUID to delete/revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","name":"erase"},{"specification":"This operation retrieves a filtered, sorted, and paginated list of all configured external integrations for the community platform. It queries the community_platform_external_integrations table as defined in the Prisma schema, supporting advanced search by integration name, provider URL, operational status, and creation/updated timestamps. This enables administrators to effectively monitor, audit, and manage platform API integrations, such as OAuth providers or webhooks, ensuring compliance and operational visibility.","path":"/communityPlatform/adminUser/externalIntegrations","method":"patch","summary":"Search and paginate external integrations (community_platform_external_integrations)","description":"Fetches a paginated, filterable list of all external integrations registered on the platform, including fields for integration name, provider URL, status, and configuration metadata. The operation supports search by integration name and provider fields and allows sorting by creation or update timestamps as well as status. Security: Only admin users may perform this operation due to the sensitive nature of external integration details and potential platform security implications.\n\nThe result set contains the summary view of integration information, making it suitable for list displays and administrative dashboards. Filtering allows for pinpoint monitoring of integration health (using status and last sync timestamp), while pagination ensures efficient retrieval. Only authenticated admin users have permission, enforced by access control and audit logging. When search terms are under 2 characters, a validation message is returned in accordance with business requirements.\n\nBusiness rules from the schema, especially unique integration names and provider URLs, are enforced internally; erroneous or malicious queries result in clear validation errors. Related operations may include retrieving a single integration by ID, creating new integrations, or editing/deleting as appropriate.","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sort criteria for external integrations.","typeName":"ICommunityPlatformExternalIntegration.IRequest"},"responseBody":{"description":"Paginated list of external integration summaries matching search criteria.","typeName":"IPageICommunityPlatformExternalIntegration.ISummary"},"authorizationRoles":["adminUser"],"name":"index","authorizationRole":"adminUser","authorizationType":null},{"specification":"This operation retrieves detailed information about a single external integration given its unique identifier (UUID). The lookup is performed directly against the community_platform_external_integrations table and supports admin users in auditing, editing, or reviewing integration configuration, status, and historical metadata.","path":"/communityPlatform/adminUser/externalIntegrations/{externalIntegrationId}","method":"get","summary":"Retrieve external integration detail by ID (community_platform_external_integrations)","description":"Returns detailed information about a specific external integration—identified by externalIntegrationId—including fields such as integration name, provider URL, status, configuration JSON, creation and update timestamps, and last successful synchronization time.\n\nThis operation is restricted to admin users due to the sensitive operational and credential data for platform integrations. It references the Prisma schema entity community_platform_external_integrations, ensuring all field-level business constraints are observed and that lookups are performed only for existing records. A 404 error is returned if the integration is not found.\n\nThis may be used in conjunction with update, delete, or configuration viewing flows by admins. Strict role-based access control is enforced as integrations could include credential or provider secrets. Parameters: the path parameter externalIntegrationId is a required UUID uniquely identifying the integration to retrieve.","parameters":[{"name":"externalIntegrationId","description":"UUID of the target external integration to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full external integration entity containing all configuration and metadata for admin review/edit.","typeName":"ICommunityPlatformExternalIntegration"},"authorizationRoles":["adminUser"],"name":"at","authorizationRole":"adminUser","authorizationType":null},{"specification":"This operation creates a new external integration record for the platform, storing configuration for third-party API integrations, webhooks, or OAuth providers. The new integration is saved to the community_platform_external_integrations table, capturing all metadata and audit fields as per schema requirements. Only admin users may execute this operation.","path":"/communityPlatform/adminUser/externalIntegrations","method":"post","summary":"Create a new external integration (community_platform_external_integrations)","description":"Allows administrative users to register a new external integration (such as a webhook, OAuth provider, or analytics endpoint) with the platform. The request body must contain an integration name (unique), provider URL, operational status, configuration JSON (such as credentials or required scopes), and initial timestamps. On success, the operation returns the full integration entity for further management or audit.\n\nRole restrictions are strictly enforced, limiting access to admin users. Core schema constraints—including integration name uniqueness and format validation for URLs/status fields—are enforced server-side with clear error response patterns. This operation is critical for onboarding new third-party capabilities or managing evolving platform extensibility.\n\nIf integration name is already in use or required fields are missing/invalid, appropriate error messages are returned per business logic.","parameters":[],"requestBody":{"description":"Creation data for the new external integration, including name, provider, configuration, and status.","typeName":"ICommunityPlatformExternalIntegration.ICreate"},"responseBody":{"description":"Detailed record of the created external integration with all provided data, metadata, and timestamps.","typeName":"ICommunityPlatformExternalIntegration"},"authorizationRoles":["adminUser"],"name":"create","authorizationRole":"adminUser","authorizationType":null},{"specification":"This operation updates an existing external integration configuration on the platform, as identified by its unique externalIntegrationId (UUID). The update applies changes such as integration name (non-updatable if unique constraint applies), provider URL, status, or configuration JSON. Actual update fields and rules are governed by the Prisma schema for community_platform_external_integrations. Admin privileges required.","path":"/communityPlatform/adminUser/externalIntegrations/{externalIntegrationId}","method":"put","summary":"Update existing external integration configuration (community_platform_external_integrations)","description":"Allows administrative users to update metadata, provider information, status, or other configuration for a registered external integration. This could include updating the provider URL, status (enabled/disabled), or configuration JSON for an OAuth or webhook endpoint.\n\nAll business logic for mutable fields is enforced, and attempts to update fields prohibited by schema (such as immutable integration names or IDs) result in a clear error. Role-based access is enforced for admins only. All updated fields are auditable and tracked with precise timestamps in the underlying schema. A 404 is returned if the integration does not exist.\n\nParameter: The path parameter, externalIntegrationId, uniquely identifies the integration to update. Validation ensures that only permissible fields are changed and that changes are compliant with business rules.","parameters":[{"name":"externalIntegrationId","description":"UUID of the external integration to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update for the external integration. Only mutable fields supported.","typeName":"ICommunityPlatformExternalIntegration.IUpdate"},"responseBody":{"description":"Updated external integration record with new configuration, status, and metadata.","typeName":"ICommunityPlatformExternalIntegration"},"authorizationRoles":["adminUser"],"name":"update","authorizationRole":"adminUser","authorizationType":null},{"specification":"This operation permanently deletes an external integration configuration, identified by externalIntegrationId, from the community_platform_external_integrations table. This is a hard deletion and not recoverable. Intended for use by admin users only to remove integrations that are deprecated or no longer secure.","path":"/communityPlatform/adminUser/externalIntegrations/{externalIntegrationId}","method":"delete","summary":"Remove (hard delete) an external integration (community_platform_external_integrations)","description":"Permanently removes an external integration configuration—including all metadata, provider URL, credentials, and status—from the database. This is a destructive operation with no undo; only users with admin privileges may perform this action.\n\nPath parameter externalIntegrationId specifies the unique integration to erase. All business rules, including deletion of sensitive configuration data and unique indexes, are enforced server-side. A success response is returned if the resource is deleted; if the integration does not exist, a 404 error is thrown. Audit logging is triggered for compliance tracking.\n\nNo response body is returned for successful deletions. Related operations include list, get, create, and update for integrations. Administrators should exercise caution as deleted integrations cannot be restored.","parameters":[{"name":"externalIntegrationId","description":"UUID of the external integration to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["adminUser"],"name":"erase","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieve a paginated list of guest user sessions for analytics and traceability, as stored in the community_platform_guestusers table. This operation supports search and filtering by creation/update date and unique session signature, as well as pagination for large session logs. Intended for admin-only analytics/review purposes, not for public or normal member access.","path":"/communityPlatform/adminUser/guestUsers","method":"patch","summary":"Search and paginate guest user session records (community_platform_guestusers)","description":"Returns a paginated set of guest user sessions filtered and sorted by creation or update timestamp, and optionally searched by session signature. The operation references the community_platform_guestusers table in the Prisma schema. Results are primarily intended for platform analytics, usage tracing, or audit.\n\nThis query supports pagination and field-based filtering, allowing analysis of guest visits, activity patterns, and conversions. As guest users are unauthenticated, no personal identifying data is included; only analytics or tracking metadata (session signature, timestamps) is returned. Security: strictly limited to admin users to prevent abuse.\n\nFeature is typically used by platform analytics dashboards, system health reviews, or compliance audits. Errors and validation (such as invalid pagination parameters) return descriptive error messages. No search or enumeration is enabled for the general user base due to privacy risk.","parameters":[],"requestBody":{"description":"Pagination, sorting, or search criteria for guest user analytics logs.","typeName":"ICommunityPlatformGuestUser.IRequest"},"responseBody":{"description":"Paginated list of guest user session summaries for analytics/audit.","typeName":"IPageICommunityPlatformGuestUser.ISummary"},"authorizationRoles":["adminUser"],"name":"index","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieve full detail about a single guest user session using its unique identifier. This operation reads from the community_platform_guestusers table and includes all session metadata for analytics or audit review. Only admin users may access this data due to potential privacy and tracking sensitivity.","path":"/communityPlatform/adminUser/guestUsers/{guestUserId}","method":"get","summary":"Retrieve guest user session detail by ID (community_platform_guestusers)","description":"Fetches and returns comprehensive metadata on a specific guest user session, including creation and updated timestamps, unique session signature, and deletion status. The path parameter guestUserId is a uuid referencing the session of interest. The operation references the community_platform_guestusers Prisma model ensuring all business, privacy, and compliance constraints are rigorously enforced.\n\nOnly admin users are permitted to access this detailed session data, in accordance with business privacy requirements and audit policies. A 404 error is returned if the guest user session is not found. Typical uses include platform analytics, security trace review, or abuse investigations.\n\nNo guest user credential or personally identifying information is ever returned, only session and analytic metadata as allowed by platform rules.","parameters":[{"name":"guestUserId","description":"UUID of the guest user session to retrieve detail for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the selected guest user session, including all analytic fields.","typeName":"ICommunityPlatformGuestUser"},"authorizationRoles":["adminUser"],"name":"at","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieve a filtered, sorted, and paginated list of registered platform users (member users) matching optional search criteria, such as display name, status, or date of account creation. This operation reads from the community_platform_memberusers table and is used for user management, moderation, or analytics. Accessible only to admin users due to private user data exposure.","path":"/communityPlatform/adminUser/memberUsers","method":"patch","summary":"Search and paginate member user accounts (community_platform_memberusers)","description":"Returns a paginated set of member users (registered user accounts) filtered by display name, account status, or creation/update timestamps, as defined in the Prisma model community_platform_memberusers. This operation allows admins to monitor, search, and manage the user base, applying business logic for name/status searching, sort order, and precise pagination.\n\nOnly admin users are granted access due to the privacy-sensitive nature of user account data. The search supports partial matching for display names, status filtering, and date range controls. Pagination is enforced with efficient sorting according to primary business needs. If search criteria are invalid or missing, descriptive error messages are returned. May be used for admin user management, compliance review, or platform analytics dashboards.\n\nFor efficiency and privacy, only summary fields are returned in paginated lists; full detail may be fetched via other admin endpoints as needed. Audit logging for query access is recommended for legal/compliance review.","parameters":[],"requestBody":{"description":"Pagination, filter, and search criteria for member user accounts.","typeName":"ICommunityPlatformMemberUser.IRequest"},"responseBody":{"description":"Paginated list of member user account summary information.","typeName":"IPageICommunityPlatformMemberUser.ISummary"},"authorizationRoles":["adminUser"],"name":"index","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieves detailed information for a specific member user in the platform, using their unique member user ID. This operation is mapped to the community_platform_memberusers Prisma table and provides a complete data snapshot for user profile rendering, ownership enforcement, and personalized content flows.","path":"/communityPlatform/memberUser/memberUsers/{memberUserId}","method":"get","summary":"Get detailed member user information by ID (community_platform_memberusers)","description":"This endpoint allows retrieval of a member user's complete profile and related attributes given their unique identifier, as defined in the community_platform_memberusers Prisma model.\n\nIt is used for backend logic and UI features such as profile display, author information on posts and comments, and eligibility for content actions. Only authenticated users and platform admins may use this endpoint, in compliance with business access rules and privacy context.\n\nThe returned object includes display name, status, timestamps, and all business logic-required attributes. Related information from referencing tables (e.g. posts, comments, community memberships) may be used by clients to contextualize the user's activity footprint.\n\nIf the requested member user does not exist or access is denied due to authorization constraints, a 404 or appropriate error response is provided.","parameters":[{"name":"memberUserId","description":"Unique identifier of the member user to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full member user profile data as defined by business and privacy requirements.","typeName":"ICommunityPlatformMemberUser"},"authorizationRoles":["memberUser","adminUser"],"name":"at","authorizationRole":"memberUser","authorizationType":null},{"specification":"Retrieves detailed information for a specific member user in the platform, using their unique member user ID. This operation is mapped to the community_platform_memberusers Prisma table and provides a complete data snapshot for user profile rendering, ownership enforcement, and personalized content flows.","path":"/communityPlatform/adminUser/memberUsers/{memberUserId}","method":"get","summary":"Get detailed member user information by ID (community_platform_memberusers)","description":"This endpoint allows retrieval of a member user's complete profile and related attributes given their unique identifier, as defined in the community_platform_memberusers Prisma model.\n\nIt is used for backend logic and UI features such as profile display, author information on posts and comments, and eligibility for content actions. Only authenticated users and platform admins may use this endpoint, in compliance with business access rules and privacy context.\n\nThe returned object includes display name, status, timestamps, and all business logic-required attributes. Related information from referencing tables (e.g. posts, comments, community memberships) may be used by clients to contextualize the user's activity footprint.\n\nIf the requested member user does not exist or access is denied due to authorization constraints, a 404 or appropriate error response is provided.","parameters":[{"name":"memberUserId","description":"Unique identifier of the member user to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full member user profile data as defined by business and privacy requirements.","typeName":"ICommunityPlatformMemberUser"},"authorizationRoles":["memberUser","adminUser"],"name":"at","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieves a paginated, filterable list of platform admin users. This operation accesses the community_platform_adminusers Prisma table, supporting advanced queries for user management interfaces and audit/permission logic.","path":"/communityPlatform/adminUser/adminUsers","method":"patch","summary":"Search and paginate admin users (community_platform_adminusers)","description":"This operation fetches a paginated, searchable list of admin users registered on the platform. It implements complex filtering, sorting, and pagination using the community_platform_adminusers table definition.\n\nUsed by the platform management dashboard and other administration tools, this endpoint supports filters for status, name, and other admin attributes. Access is restricted to users with appropriate permissions (typically admin role only), ensuring proper visibility moderation and audit controls.\n\nThe request body allows for specifying page size, search criteria, and sorting preferences. The response includes admin user summary data for fast, secure list displays, with navigational paging that supports large account volumes.\n\nAny attempt by unauthorized users to access this endpoint is denied with an appropriate error, in line with platform and business rule requirements.","parameters":[],"requestBody":{"description":"Advanced search, filter, and pagination parameters for retrieving admin users.","typeName":"ICommunityPlatformAdminUser.IRequest"},"responseBody":{"description":"Paginated admin user summary information for admin user list views.","typeName":"IPageICommunityPlatformAdminUser.ISummary"},"authorizationRoles":["adminUser"],"name":"index","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieves detailed information for a specific admin user, identified by their unique admin user ID. This operation is directly linked to the community_platform_adminusers Prisma table and enables audit and moderation purposes.","path":"/communityPlatform/adminUser/adminUsers/{adminUserId}","method":"get","summary":"Get detailed admin user information by ID (community_platform_adminusers)","description":"This endpoint enables retrieval of a specific admin user's full record based on their unique identifier, as specified in the community_platform_adminusers schema. Data returned is essential for administrative dashboards, audit log linkage, and role management logic.\n\nIncluded fields are all business-relevant attributes, such as display name, status, timestamps, and credential references, as documented in the database comments and security policies.\n\nAccess to this endpoint is strictly limited to users with the admin role. If a non-authorized request is made or no record is found for the provided adminUserId, the response is a 404 or equivalent error per platform error standards.\n\nReturned data must be compliant with privacy and audit requirements, exposing only approved fields as described in the schema.","parameters":[{"name":"adminUserId","description":"Unique identifier of the target admin user.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full admin user record with fields as required for admin management.","typeName":"ICommunityPlatformAdminUser"},"authorizationRoles":["adminUser"],"name":"at","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieves a paginated and filterable list of user credentials for authentication administration. Implements advanced search, audit, and credential status flows using the community_platform_user_credentials table.","path":"/communityPlatform/adminUser/userCredentials","method":"patch","summary":"Search and paginate user credentials (community_platform_user_credentials)","description":"This operation provides platform administrators with a powerful tool to list, search, and audit user credentials across all authentication-enabled users. Focusing on the community_platform_user_credentials table, it supports advanced queries such as email lookups, status filtering, and sorted pagination.\n\nEssential for user management, password reset validation, and compliance checks, this endpoint is accessible only to admin users. Business logic and database documentation enforce secure, privacy-compliant exposure of email and credential metadata; hashed passwords remain inaccessible to non-privileged logic.\n\nThe request body enables complex search combinations, including partial matches, temporal queries, and specific credential attribute filters. Pagination ensures responsive performance even at high user volumes. Unauthorized requests are blocked as per role requirements.","parameters":[],"requestBody":{"description":"Filter, search, and paging options for retrieving user credentials.","typeName":"ICommunityPlatformUserCredential.IRequest"},"responseBody":{"description":"Paged summary results of user credentials for audit or management.","typeName":"IPageICommunityPlatformUserCredential.ISummary"},"authorizationRoles":["adminUser"],"name":"index","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieves information about a specific user's authentication credentials based on credential ID. Connected to the community_platform_user_credentials table for admin authentication workflows.","path":"/communityPlatform/adminUser/userCredentials/{userCredentialId}","method":"get","summary":"Get user credential details by ID (community_platform_user_credentials)","description":"This endpoint provides detailed authentication credential records for a user, found by unique credential ID. It is critical for admin audit flows, password reset validation, and verifying business rules on account status.\n\nSchema fields retrieved correspond to the community_platform_user_credentials model, including email, status, and timestamps. Password hashes are never returned, ensuring privacy compliance.\n\nAccess is available exclusively to admin users. Requests for non-existent or unauthorized credentials return error status codes matching platform security standards.","parameters":[{"name":"userCredentialId","description":"Unique identifier of the user credential record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete user credential information for administrative and audit use.","typeName":"ICommunityPlatformUserCredential"},"authorizationRoles":["adminUser"],"name":"at","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieves a paginated, filterable list of sub-communities based on the business, validation, and classification rules defined for the platform. Tied to the community_platform_communities table, it supports all category, search, and display ordering features.","path":"/communityPlatform/communities","method":"patch","summary":"Search and paginate sub-communities (community_platform_communities)","description":"This API operation returns a paginated, filterable list of sub-communities matching complex search conditions, utilizing the community_platform_communities Prisma schema. It underpins Explore, search, and main home feed navigation flows, supporting filters by category, owner, activity, and case-insensitive name searching.\n\nResults reflect the full business validation logic for unique naming, category validity, and display ordering. Pagination and sorting are always implemented based on platform standards (default by newest, optionally by top, etc.).\n\nThis endpoint is accessible publicly (for exploration) and with enhanced filters for authenticated users. It forbids exposure of deleted or pending communities, reflecting only currently active records.","parameters":[],"requestBody":{"description":"Complex search filters and pagination options for sub-communities.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paged list of sub-community summaries suitable for grid/list views and exploration.","typeName":"IPageICommunityPlatformCommunity.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null},{"specification":"Retrieves full detail for a specific sub-community by its unique community ID. Connected to the community_platform_communities table and supports detailed info requests for community home pages and join/leave flows.","path":"/communityPlatform/communities/{communityId}","method":"get","summary":"Get full sub-community details by ID (community_platform_communities)","description":"Allows any user to get a detailed record for a sub-community using its ID. Data returned includes all business-context fields, such as name (case-insensitive), description, logo/banner URIs, rules, owner, and audit timestamps. Underlying model is community_platform_communities.\n\nThis data is the source for navigation, info boxes, community home layout, and join/leave button logic. The operation omits deleted communities and any soft-deleted records.\n\nOpen to all users (public access), with enhanced permissions for authenticated users when displaying join/leave or edit options.","parameters":[{"name":"communityId","description":"Unique identifier for the community record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete, detailed sub-community information for UI and business logic.","typeName":"ICommunityPlatformCommunity"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null},{"specification":"Creates a new sub-community with validated name, ownership, and required attributes in the platform. Tied to the community_platform_communities schema and implements all business validation logic for creation, naming, and initial configuration.","path":"/communityPlatform/memberUser/communities","method":"post","summary":"Create a new sub-community (community_platform_communities)","description":"This endpoint allows authenticated member or admin users to create a new sub-community, providing a name (validated for uniqueness and format), category reference, optional description, logo/banner URIs, and rules as documented by business logic and the community_platform_communities schema.\n\nOwnership is set to the authenticated user making the request and is immutable for the life of the community. The operation enforces naming and categorization business rules, initializing member count and joined status appropriately. All required and optional attributes are validated per schema and platform business rules. Conflicts or violations return error messages as described in the requirements (e.g., name in use or invalid format).\n\nSuccessfully created communities are immediately available for exploration, joining, and post composition actions.","parameters":[],"requestBody":{"description":"Community creation input, including required and optional attributes for a new sub-community.","typeName":"ICommunityPlatformCommunity.ICreate"},"responseBody":{"description":"Complete sub-community record, fully populated after successful creation.","typeName":"ICommunityPlatformCommunity"},"authorizationRoles":["memberUser","adminUser"],"name":"create","authorizationRole":"memberUser","authorizationType":null},{"specification":"Creates a new sub-community with validated name, ownership, and required attributes in the platform. Tied to the community_platform_communities schema and implements all business validation logic for creation, naming, and initial configuration.","path":"/communityPlatform/adminUser/communities","method":"post","summary":"Create a new sub-community (community_platform_communities)","description":"This endpoint allows authenticated member or admin users to create a new sub-community, providing a name (validated for uniqueness and format), category reference, optional description, logo/banner URIs, and rules as documented by business logic and the community_platform_communities schema.\n\nOwnership is set to the authenticated user making the request and is immutable for the life of the community. The operation enforces naming and categorization business rules, initializing member count and joined status appropriately. All required and optional attributes are validated per schema and platform business rules. Conflicts or violations return error messages as described in the requirements (e.g., name in use or invalid format).\n\nSuccessfully created communities are immediately available for exploration, joining, and post composition actions.","parameters":[],"requestBody":{"description":"Community creation input, including required and optional attributes for a new sub-community.","typeName":"ICommunityPlatformCommunity.ICreate"},"responseBody":{"description":"Complete sub-community record, fully populated after successful creation.","typeName":"ICommunityPlatformCommunity"},"authorizationRoles":["memberUser","adminUser"],"name":"create","authorizationRole":"adminUser","authorizationType":null},{"specification":"Updates metadata and settings for a specific sub-community, referenced by communityId. Based on the community_platform_communities table, it allows the community owner to edit mutable fields such as description, logo_uri, banner_uri, or rules. The name and category are immutable after creation. Only the owner may perform this operation, except deletion, which is restricted to admins. Validation rules for maximal field lengths and uniqueness for logo/banner URIs are enforced at input. Business logic excludes updates to name or category_id. All updates are tracked for auditability with updated_at timestamps.","path":"/communityPlatform/memberUser/communities/{communityId}","method":"put","summary":"Update metadata and settings of a specific community (excluding name/category)","description":"This operation updates mutable metadata for a given sub-community by communityId, including fields like description, logo/image URI, banner URI, and optionally community rules (if managed through the same DTO). The operation references the community_platform_communities Prisma model, which defines community structure—name (immutable), description (max 200 chars), logo_uri, banner_uri, and soft delete timestamp. Category is not editable after initial creation.\n\nOnly the original community creator (owner, referenced by owner_id) may invoke this operation. Ownership is immutable and enforced at the application logic layer. Attempts by non-owners will result in permission errors. The update is reflected in updated_at and triggers updates in contextual feeds and sidebars throughout the UI.\n\nMutable fields are validated for business rules: description may be up to 200 characters, logo/banner URIs must conform to application standards, and attempts to change immutable fields (name, category_id) will return an explicit error. All changes are permanently auditable via the updated_at timestamp.\n\nError scenarios include unauthorized user access, input exceeding allowed field lengths, or incorrect attempts to update immutable properties. Related APIs include community creation, soft deletion, membership management, and rule editing endpoints.","parameters":[{"name":"communityId","description":"Unique identifier for the target community to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing updatable community metadata (excluding name/category).","typeName":"ICommunityPlatformCommunity.IUpdate"},"responseBody":{"description":"The updated community object after applying modifications.","typeName":"ICommunityPlatformCommunity"},"authorizationRole":"memberUser","authorizationType":null,"name":"update"},{"specification":"Permanently deletes a specific community identified by communityId. Cascades deletion to all related posts, memberships, recent activity, and rules. Associated with community_platform_communities table. Hard delete is performed since soft deletion applies only to the main record (via deleted_at), but all child entities are removed per business logic. Only platform admins may execute this operation per requirements.","path":"/communityPlatform/adminUser/communities/{communityId}","method":"delete","summary":"Delete a community and all its related content","description":"This operation deletes a community from the system, physically or logically, depending on business rules and soft delete implementation of the community_platform_communities table. It cascades the deletion to all posts, memberships, recent community visits, and rules related to the community, implementing the requirement for deep cleaning on community deletion.\n\nOnly an adminUser or the original owner may delete a community, with admins holding the ultimate authority. When the operation is successful, all soft deletable entities set their deleted_at fields; otherwise, the records are permanently removed from child tables if not supporting soft deletion. This ensures compliance with full data removal requirements in the business logic and prevents orphaned records.\n\nAttempts to delete by unauthorized users are rejected with explicit permission errors. On completion, the system updates feeds and navigation across all affected users. All deletion actions are logged in the audit trail for compliance. Related endpoints include post and membership deletions and audit logs for deletion activity.","parameters":[{"name":"communityId","description":"Unique identifier for the community to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"adminUser","authorizationType":null,"name":"erase"},{"specification":"Retrieves a paginated list of all membership records for a specific community, identified by communityId. Supports searching, filtering, and sorting memberships. Based on community_platform_community_memberships table. Used for membership management, analytics, or displaying the community's member list in the UI.","path":"/communityPlatform/memberUser/communities/{communityId}/memberships","method":"patch","summary":"Search and list memberships in a specific community","description":"This operation fetches a paginated, filtered, and optionally sorted list of all user memberships for a specific community, using the communityId as a reference. Drawn from the community_platform_community_memberships Prisma schema, each record links a member user and a community, recording join time and enforcing uniqueness per (user, community) pair.\n\nBusiness logic permits users with appropriate permissions (typically any logged-in user, but with restricted details according to role) to view membership listings for open communities. Output includes member user ids, join times, and associated membership IDs. Filtering allows by memberuser_id, date joined, and other analytic queries as relevant. Sorting and query options may default to join time descending.\n\nSecurity ensures that only authenticated users may access non-public member data, and that user details are sanitized for privacy. Related operations include joining/leaving a community and fetching recent communities for display. Errors include invalid communityId or insufficient permissions.","parameters":[{"name":"communityId","description":"ID of the community whose memberships are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search filter and paging options for filtering memberships.","typeName":"ICommunityPlatformCommunityMembership.IRequest"},"responseBody":{"description":"Paginated list of membership summary data for the specified community.","typeName":"IPageICommunityPlatformCommunityMembership.ISummary"},"authorizationRole":"memberUser","authorizationType":null,"name":"index"},{"specification":"Retrieves a single community membership record identified by membershipId within the designated community (communityId). Returns full detail for the membership, including user and joined_at fields. Derived from community_platform_community_memberships schema.","path":"/communityPlatform/memberUser/communities/{communityId}/memberships/{membershipId}","method":"get","summary":"Get detailed information for a specific community membership","description":"This operation retrieves comprehensive details for a particular community membership by membershipId under the specified communityId. It references the community_platform_community_memberships Prisma model, where each record connects a member user to a community with unique constraints and joined_at tracking.\n\nRetrieval is allowed for authenticated users, with privacy protection for sensitive member information. The returned membership includes join timestamp, membership id, community id, and member user id. Access controls enforce read permissions: typically, only members of the community, the user themselves, or admins may see certain sensitive fields depending on application logic.\n\nCommon error cases include membershipId not found, membership not belonging to the indicated community, or the requester lacking permissions to view the details. Related endpoints are joining/leaving memberships and listing all memberships for a community.","parameters":[{"name":"communityId","description":"ID of the community containing the membership.","schema":{"type":"string","format":"uuid"}},{"name":"membershipId","description":"Unique identifier of the community membership record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed membership entity, including user, join time, and IDs.","typeName":"ICommunityPlatformCommunityMembership"},"authorizationRole":"memberUser","authorizationType":null,"name":"at"},{"specification":"Creates a new membership for a user in the specified community. The operation creates a record in community_platform_community_memberships associating the authenticated user with the given community. Validates against double-joining and ensures only eligible authenticated users may join. Enforces business constraint: maximum one active membership per user per community.","path":"/communityPlatform/memberUser/communities/{communityId}/memberships","method":"post","summary":"Join a community as a new member","description":"This operation allows an authenticated user to join a specific community by adding a membership entry in the community_platform_community_memberships table. The communityId is required in the path, and the authenticated user's own identifier is supplied in the request body.\n\nAll business constraints are validated: users may only join a community once, duplicate join attempts are rejected. Joined timestamp is auto-populated to record when the memberships is created. Attempts by unauthenticated users or attempts to artificially assign membership to other users are disallowed unless the requester is an adminUser.\n\nEdge and error cases include already existing membership, attempts to join or create memberships on behalf of other users (rejected unless admin), and requests referencing non-existent communities. On success, the system updates contextual UI elements, feeds, and recent communities lists to reflect new membership.","parameters":[{"name":"communityId","description":"ID of the community to join.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing the user ID to be associated (typically omitted for self, required for admin action).","typeName":"ICommunityPlatformCommunityMembership.ICreate"},"responseBody":{"description":"The created membership entity representing the new join.","typeName":"ICommunityPlatformCommunityMembership"},"authorizationRole":"memberUser","authorizationType":null,"name":"create"},{"specification":"Updates a membership record in a specific community, referenced by communityId and membershipId. Typically used for updating joined_at (e.g., correcting errors), status, or related analytic fields, but not for transferring membership ownership, which is prohibited. Linked to community_platform_community_memberships table. Only an adminUser or the user themselves may invoke this operation.","path":"/communityPlatform/memberUser/communities/{communityId}/memberships/{membershipId}","method":"put","summary":"Update membership metadata for a specific member of a community","description":"This operation updates select metadata of a specific community membership. It references the community_platform_community_memberships model, where each membership links a user and community. Updatable fields may include the joined_at timestamp or analytic/status fields if present, but not the member user or community association, which are immutable for each record.\n\nTypically only the user themselves or an adminUser may update a community membership. Attempts to transfer membership to another user, change the community, or duplicate an existing membership are forbidden and will result in errors. Auditability is preserved by updating timestamps on every change and logging admin-invoked changes.\n\nCommon errors: insufficient permissions, attempts to edit immutable fields, or constraints violation. Related endpoints are membership creation, deletion, and listing for communities.","parameters":[{"name":"communityId","description":"ID of the community in which the membership exists.","schema":{"type":"string","format":"uuid"}},{"name":"membershipId","description":"Unique identifier of the membership to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying updatable fields for the membership, such as joined_at or auxiliary analytic fields.","typeName":"ICommunityPlatformCommunityMembership.IUpdate"},"responseBody":{"description":"The updated membership entity after applying changes.","typeName":"ICommunityPlatformCommunityMembership"},"authorizationRole":"memberUser","authorizationType":null,"name":"update"},{"specification":"Deletes a membership record in a specific community, referenced by communityId and membershipId. Removes the associated membership entry from the system after validating permissions and business logic. Uses community_platform_community_memberships model. Only the user themselves or adminUser may perform this operation. Cascade effects include updating joined lists and personalized feeds.","path":"/communityPlatform/memberUser/communities/{communityId}/memberships/{membershipId}","method":"delete","summary":"Remove a user from a community (leave) by deleting their membership","description":"This operation deletes an individual user's membership from a community. The path specifies communityId and membershipId, and the corresponding record in community_platform_community_memberships is permanently removed. Only the membership's owner (the user themselves) or adminUsers are permitted to invoke this deletion, enforcing business rules about voluntary leaving or admin enforcement (e.g., bans).\n\nOn success, the system removes the membership, updates the personalized home feed and recent communities lists, and adjusts the member count for the community. If the membership is not found, does not belong to the indicated community, or is targeted by an unauthorized user, appropriate errors and permission denials are returned.\n\nThis operation does not affect the user's account or other memberships, and is specific to the one community indicated by the path. Related endpoints include join/creation, listing community memberships, and admin ban flows.","parameters":[{"name":"communityId","description":"ID of the community from which the user is to be removed.","schema":{"type":"string","format":"uuid"}},{"name":"membershipId","description":"Unique identifier for the membership to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"memberUser","authorizationType":null,"name":"erase"},{"specification":"Retrieves a paginated, filtered, and optionally sorted list of community rules for a specific community, referenced by communityId. Based on community_platform_community_rules table. Primary purpose is to support UI display, editing, and management of visible rules in the community info section. Only authorized users may view/edit full lists.","path":"/communityPlatform/memberUser/communities/{communityId}/rules","method":"patch","summary":"List and search all rules for a specific community","description":"This operation retrieves a collection of up to 10 rules for a specified community, leveraging the community_platform_community_rules table. Each rule contains a rule_index, rule_text, and created_at timestamp, and is directly related to the referenced community via community_id. Rules are used for informational and business constraint purposes, powering the UI display in community info boxes and rule editors.\n\nThe endpoint supports advanced filtering and pagination (useful for large communities or future extensibility), though business rules enforce a maximum of 10 rules per community. Only authenticated users (typically owners or admins) may view or edit the full list; public users may only see the visible subset. Security and privacy controls ensure sensitive or draft rules are not leaked.\n\nRelated endpoints include community creation (rule setup), community metadata updating, and rule editing/removal flows. Error scenarios are non-existent or unauthorized community, or attempts to access protected rules by non-owners/admins.","parameters":[{"name":"communityId","description":"ID of the community whose rules are being listed/searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional filtering/paging criteria for rules list (e.g., search text or page).","typeName":"ICommunityPlatformCommunityRule.IRequest"},"responseBody":{"description":"Paginated list of rules for the community, each with index and text.","typeName":"IPageICommunityPlatformCommunityRule"},"authorizationRole":"memberUser","authorizationType":null,"name":"index"},{"specification":"Retrieves the details of a specific community rule within a sub-community. This operation accesses the community_platform_community_rules table, fetching the rule defined by ruleId within the communityId parent. This endpoint ensures the rule is displayed with its order and content, reflecting the business logic that only owners can alter rules, while any authenticated user may view them. Field-level details, including rule_text (max 100 characters), display full context to support business compliance, moderation, and UI rules displays. The fetched rule provides information for numbering and maximum per-community enforcement.","description":"This operation allows retrieval of a specific rule belonging to a community within the platform. It is associated with the community_platform_community_rules table and requires both the target community's ID and the rule's ID for specificity.\n\nAll users (including guests and authenticated users) can view community rules as per business requirements, supporting broad visibility for rule enforcement and transparency. The system fetches the specified rule’s order (rule_index) and text (rule_text), enabling correct numbering and UI rendering, and provides auxiliary metadata like creation timestamp. Security is enforced such that only rule viewing is allowed here—creation and update/delete operations are handled by restriction to owners or admins on separate endpoints.\n\nCommon error handling includes access to non-existent rules, invalid identifiers, or referencing a rule outside its true community context. Returns full rule context, supporting all presentation and compliance needs. Only non-deleted, valid rules are returned.","summary":"Retrieve details of a specific community rule (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"ID of the community containing the rule.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"ID of the rule within the community.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete information of the specified community rule.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":[],"name":"at","path":"/communityPlatform/communities/{communityId}/rules/{ruleId}","method":"get","authorizationRole":null,"authorizationType":null},{"specification":"Creates a new rule in the rules set for a specific community. This operation inserts a new row into the community_platform_community_rules table, ensuring order (rule_index) is maintained sequentially, no more than 10 rules exist, and text fits within 100 characters. Only the owner of the community is authorized to perform this action per business logic. Proper cascading relationships are respected.","description":"This operation enables a community owner to add a new rule to their community’s rules set, as stored in the community_platform_community_rules table. Only the user who owns the target community may invoke this operation; enforcement of ownership is critical per business logic. Upon execution, the rule text is validated (up to 100 characters) and the rule_index is determined based on the existing sequence (max 10 rules allowed).\n\nThe new rule is stored with references to the community and its insertion index, ensuring correct presentation order for UI and enforcement. Attempts to add a rule when already at maximum count, or by a non-owner, will result in an error. This endpoint integrates with safeguards ensuring that deletion of a community cascades to all associated rules. Success returns the created rule, including its unique ID, text, order, and metadata for proper list display.\n\nRelevant for admins or owners managing community guidelines and transparency, and for UI features showing live-updated rules lists after ownership actions.","summary":"Create a new rule for a community (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"ID of the community that will receive the new rule.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for the new rule to insert (rule_text, automatic rule_index).","typeName":"ICommunityPlatformCommunityRule.ICreate"},"responseBody":{"description":"The created community rule, including rule index and full context.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["memberUser","adminUser"],"name":"create","path":"/communityPlatform/memberUser/communities/{communityId}/rules","method":"post","authorizationRole":"memberUser","authorizationType":null},{"specification":"Creates a new rule in the rules set for a specific community. This operation inserts a new row into the community_platform_community_rules table, ensuring order (rule_index) is maintained sequentially, no more than 10 rules exist, and text fits within 100 characters. Only the owner of the community is authorized to perform this action per business logic. Proper cascading relationships are respected.","description":"This operation enables a community owner to add a new rule to their community’s rules set, as stored in the community_platform_community_rules table. Only the user who owns the target community may invoke this operation; enforcement of ownership is critical per business logic. Upon execution, the rule text is validated (up to 100 characters) and the rule_index is determined based on the existing sequence (max 10 rules allowed).\n\nThe new rule is stored with references to the community and its insertion index, ensuring correct presentation order for UI and enforcement. Attempts to add a rule when already at maximum count, or by a non-owner, will result in an error. This endpoint integrates with safeguards ensuring that deletion of a community cascades to all associated rules. Success returns the created rule, including its unique ID, text, order, and metadata for proper list display.\n\nRelevant for admins or owners managing community guidelines and transparency, and for UI features showing live-updated rules lists after ownership actions.","summary":"Create a new rule for a community (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"ID of the community that will receive the new rule.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for the new rule to insert (rule_text, automatic rule_index).","typeName":"ICommunityPlatformCommunityRule.ICreate"},"responseBody":{"description":"The created community rule, including rule index and full context.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["memberUser","adminUser"],"name":"create","path":"/communityPlatform/adminUser/communities/{communityId}/rules","method":"post","authorizationRole":"adminUser","authorizationType":null},{"specification":"Updates an existing community rule specified by ruleId within the rules set of a designated community. This operation modifies the rule_text of the row within the community_platform_community_rules table, enforcing a max length of 100 characters and retaining correct rule_index ordering. Only community owners or admin users can invoke this operation. All changes are fully auditable.","description":"This operation allows the owner of a community—or an adminUser—to update a specific community rule’s contents, as represented by the community_platform_community_rules table. Only the owning member or an admin user may edit rules; other users are denied access per business requirements.\n\nInput validation ensures the rule text does not exceed 100 characters, with all changes audit-logged and respecting ordering (rule_index cannot be changed through this endpoint). Business constraints prohibit editing rules for non-existent communities or rules not belonging to the specified community. If the community has been deleted (soft delete), or if maximum rules are already present, these must be validated in logic.\n\nAfter successful update, the endpoint returns the updated rule, confirming all persisted changes for UI and compliance. Only non-deleted, valid rules may be updated.","summary":"Update a specific community rule (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"ID of the community containing the rule to update.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"ID of the rule to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated rule data—rule_text only.","typeName":"ICommunityPlatformCommunityRule.IUpdate"},"responseBody":{"description":"The updated community rule with latest text and unchanged index.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["memberUser","adminUser"],"name":"update","path":"/communityPlatform/memberUser/communities/{communityId}/rules/{ruleId}","method":"put","authorizationRole":"memberUser","authorizationType":null},{"specification":"Updates an existing community rule specified by ruleId within the rules set of a designated community. This operation modifies the rule_text of the row within the community_platform_community_rules table, enforcing a max length of 100 characters and retaining correct rule_index ordering. Only community owners or admin users can invoke this operation. All changes are fully auditable.","description":"This operation allows the owner of a community—or an adminUser—to update a specific community rule’s contents, as represented by the community_platform_community_rules table. Only the owning member or an admin user may edit rules; other users are denied access per business requirements.\n\nInput validation ensures the rule text does not exceed 100 characters, with all changes audit-logged and respecting ordering (rule_index cannot be changed through this endpoint). Business constraints prohibit editing rules for non-existent communities or rules not belonging to the specified community. If the community has been deleted (soft delete), or if maximum rules are already present, these must be validated in logic.\n\nAfter successful update, the endpoint returns the updated rule, confirming all persisted changes for UI and compliance. Only non-deleted, valid rules may be updated.","summary":"Update a specific community rule (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"ID of the community containing the rule to update.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"ID of the rule to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated rule data—rule_text only.","typeName":"ICommunityPlatformCommunityRule.IUpdate"},"responseBody":{"description":"The updated community rule with latest text and unchanged index.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["memberUser","adminUser"],"name":"update","path":"/communityPlatform/adminUser/communities/{communityId}/rules/{ruleId}","method":"put","authorizationRole":"adminUser","authorizationType":null},{"specification":"Deletes a specific rule within the rules set of a community. This operation permanently removes the record from the community_platform_community_rules table, ensuring only the community owner or admin users can perform deletion. Rule indices are re-ordered after deletion if necessary for display correctness. This is a hard delete operation, not soft deletion.","description":"This endpoint allows the owner of a community or an adminUser to remove a particular rule from a community’s rules, as per the community_platform_community_rules table. Deletion is restricted to validated owners or platform admins; unauthorized attempts are denied.\n\nUpon successful deletion, the rule is permanently removed from the database, and any UI or rules display must update accordingly. Remaining rules are renumbered (order/index) in the application logic if necessary to preserve presentation sequence. No information remains in the database regarding the deleted rule. Attempts to delete a rule from a non-existent community or on a rule not belonging to the specified community will fail with proper error messaging.\n\nThis operation does not implement a soft-delete mechanism, as the schema does not provide for a deleted_at column on rules. All deletions are permanent and cannot be recovered by end users.","summary":"Delete a specific community rule (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"ID of the community containing the rule to delete.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"ID of the rule to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["memberUser","adminUser"],"name":"erase","path":"/communityPlatform/memberUser/communities/{communityId}/rules/{ruleId}","method":"delete","authorizationRole":"memberUser","authorizationType":null},{"specification":"Deletes a specific rule within the rules set of a community. This operation permanently removes the record from the community_platform_community_rules table, ensuring only the community owner or admin users can perform deletion. Rule indices are re-ordered after deletion if necessary for display correctness. This is a hard delete operation, not soft deletion.","description":"This endpoint allows the owner of a community or an adminUser to remove a particular rule from a community’s rules, as per the community_platform_community_rules table. Deletion is restricted to validated owners or platform admins; unauthorized attempts are denied.\n\nUpon successful deletion, the rule is permanently removed from the database, and any UI or rules display must update accordingly. Remaining rules are renumbered (order/index) in the application logic if necessary to preserve presentation sequence. No information remains in the database regarding the deleted rule. Attempts to delete a rule from a non-existent community or on a rule not belonging to the specified community will fail with proper error messaging.\n\nThis operation does not implement a soft-delete mechanism, as the schema does not provide for a deleted_at column on rules. All deletions are permanent and cannot be recovered by end users.","summary":"Delete a specific community rule (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"ID of the community containing the rule to delete.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"ID of the rule to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["memberUser","adminUser"],"name":"erase","path":"/communityPlatform/adminUser/communities/{communityId}/rules/{ruleId}","method":"delete","authorizationRole":"adminUser","authorizationType":null},{"specification":"Retrieves the list of recent communities visited or interacted with by the authenticated member user, with support for filtering, sorting, and pagination. This operation queries the community_platform_recent_communities table, returning up to five of the most recent communities per user, showing their navigation order and the last activity timestamp.","description":"This endpoint allows an authenticated member user to view their recent community navigation history, as represented in the community_platform_recent_communities table. The system supports advanced search, filtering, and pagination if extended, but by business rule returns up to 5 entries ordered by recency (recent_rank/last_activity_at).\n\nThe operation gathers necessary community data for personalized sidebars, quick navigation, and context menus. Returned results respect memberuser_id scoping—users can see only their own recent community list. Each entry includes community reference, recency order, and last activity time. Security and privacy are strictly enforced so users cannot view or access other users’ recent communities.\n\nKey for supporting seamless UI context, home feed personalization, and role-based navigation experiences. Attempts to access without authentication are denied; only authenticated member users can use this operation per validation rules.","summary":"Retrieve recent community navigation list for current member (community_platform_recent_communities table).","parameters":[],"requestBody":{"description":"Optional search/pagination parameters for recent community retrieval.","typeName":"ICommunityPlatformRecentCommunity.IRequest"},"responseBody":{"description":"Paginated list of recent communities visited by the member user.","typeName":"IPageICommunityPlatformRecentCommunity"},"authorizationRoles":["memberUser"],"name":"index","path":"/communityPlatform/memberUser/recentCommunities","method":"patch","authorizationRole":"memberUser","authorizationType":null},{"specification":"Retrieves the details and metadata of a single recent community navigation entry for the authenticated member user. This operation fetches an entry from the community_platform_recent_communities table by primary key, ensuring it belongs to the user making the request. Used for personalized context or detail views.","description":"This endpoint lets an authenticated member user retrieve a specific record from their recent communities navigation, leveraging the community_platform_recent_communities table. The parameter recentCommunityId references the unique entry. Logic ensures users can only view their own records; cross-user access is denied by enforcement of memberuser_id ownership per business and privacy rules.\n\nReturned data includes the linked community, the recency order, and the timestamp for last activity, supporting robust UI personalization. Used for context menu details, navigation previews, and background fetches for context-aware features. Unauthorized or out-of-scope access attempts are rejected with standard error responses.","summary":"Get a specific recent community entry for the member (community_platform_recent_communities table).","parameters":[{"name":"recentCommunityId","description":"ID of the recent community record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed recent community entry for the current user.","typeName":"ICommunityPlatformRecentCommunity"},"authorizationRoles":["memberUser"],"name":"at","path":"/communityPlatform/memberUser/recentCommunities/{recentCommunityId}","method":"get","authorizationRole":"memberUser","authorizationType":null},{"specification":"Creates a new recent community navigation entry when a member user visits or interacts with a previously unlisted community. This operation inserts a row into the community_platform_recent_communities table, ensuring only one entry per memberuser and community, with at most 5 entries total per user. Oldest entries are overwritten if necessary. Only the authenticated user may manipulate their own list.","description":"This endpoint allows an authenticated member user to add a new recent community record to their navigation list, as captured in the community_platform_recent_communities table. When a user visits a community not currently in their top 5, this operation inserts a record linking the user to the community with the updated recency rank and timestamp.\n\nSystem logic ensures only one record per (memberuser, community) combination and limits total entries to 5 per user—oldest records are replaced as needed. Only the user themselves can create (synchronize) their own recent communities; no cross-user creation is permitted. The returned response includes the new or updated entry, enabling immediate sidebar/recency context updates in the frontend.","summary":"Add a recent community visit to the member's recency list (community_platform_recent_communities table).","parameters":[],"requestBody":{"description":"Information needed to create or update a recent community record.","typeName":"ICommunityPlatformRecentCommunity.ICreate"},"responseBody":{"description":"The created/updated recent community record entry.","typeName":"ICommunityPlatformRecentCommunity"},"authorizationRoles":["memberUser"],"name":"create","path":"/communityPlatform/memberUser/recentCommunities","method":"post","authorizationRole":"memberUser","authorizationType":null},{"specification":"Updates an existing recent community navigation entry for the authenticated member user, such as to adjust rank or activity timestamp. This modifies a row in the community_platform_recent_communities table by recentCommunityId, while enforcing ownership. Only member users may update their own entries.","description":"This operation lets an authenticated member user update a specific recent community record in their navigation history—managed in the community_platform_recent_communities table. It allows changing fields such as recent_rank or last_activity_at in order to maintain the correct recency ordering and time context for personalized sidebars.\n\nUpdates are only permitted for entries owned by the current member user; attempts to update other users’ records are prohibited. Logic also enforces maximum of 5 entries per user and recalculates ranks if changes are made that affect recency. Business rules ensure that the update cannot create duplicate records or cross-user data leaks.\n\nSuccess returns the updated recent community record for immediate navigation/UI update.","summary":"Update a recent community navigation entry (community_platform_recent_communities table).","parameters":[{"name":"recentCommunityId","description":"ID of the recent community record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated recency or activity data for the record.","typeName":"ICommunityPlatformRecentCommunity.IUpdate"},"responseBody":{"description":"The updated recent community navigation entry.","typeName":"ICommunityPlatformRecentCommunity"},"authorizationRoles":["memberUser"],"name":"update","path":"/communityPlatform/memberUser/recentCommunities/{recentCommunityId}","method":"put","authorizationRole":"memberUser","authorizationType":null},{"specification":"This operation deletes a recent community record from the community_platform_recent_communities table. The endpoint enables a user to remove a community from their own list of recently visited or accessed communities. The deletion is performed by specifying the unique recentCommunityId, and only the owner of the recent list or an admin user may remove this association. Business rules enforce a maximum of 5 recent communities per user, updating recency ordering accordingly. This operation does not remove the community itself or any membership; it only affects the navigation/recent status for the user.","description":"This API operation allows a member user to remove a community from their personal list of recent communities for navigation and sidebar display. The operation targets the community_platform_recent_communities table, which links member users to communities based on recent activity.\n\nA user may have up to five recent communities; when one is deleted, the system reorders the remaining entries and updates their recent_rank. Only the user who owns the recent list (or an adminUser) may delete a recent community link. If the recentCommunityId does not belong to the requesting user or the user is not an admin, the operation fails with a permission error.\n\nDeletion of a recent community in this context is a hard delete – the association is permanently removed from the user's list but does not affect membership or the underlying community entity. Error handling includes checks for valid ownership and non-existent records.","summary":"Remove a single recent community link by recentCommunityId from community_platform_recent_communities.","parameters":[{"name":"recentCommunityId","description":"The unique identifier (UUID) of the recent community record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"memberUser","name":"erase","path":"/communityPlatform/memberUser/recentCommunities/{recentCommunityId}","method":"delete"},{"specification":"This operation deletes a recent community record from the community_platform_recent_communities table. The endpoint enables a user to remove a community from their own list of recently visited or accessed communities. The deletion is performed by specifying the unique recentCommunityId, and only the owner of the recent list or an admin user may remove this association. Business rules enforce a maximum of 5 recent communities per user, updating recency ordering accordingly. This operation does not remove the community itself or any membership; it only affects the navigation/recent status for the user.","description":"This API operation allows a member user to remove a community from their personal list of recent communities for navigation and sidebar display. The operation targets the community_platform_recent_communities table, which links member users to communities based on recent activity.\n\nA user may have up to five recent communities; when one is deleted, the system reorders the remaining entries and updates their recent_rank. Only the user who owns the recent list (or an adminUser) may delete a recent community link. If the recentCommunityId does not belong to the requesting user or the user is not an admin, the operation fails with a permission error.\n\nDeletion of a recent community in this context is a hard delete – the association is permanently removed from the user's list but does not affect membership or the underlying community entity. Error handling includes checks for valid ownership and non-existent records.","summary":"Remove a single recent community link by recentCommunityId from community_platform_recent_communities.","parameters":[{"name":"recentCommunityId","description":"The unique identifier (UUID) of the recent community record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","name":"erase","path":"/communityPlatform/adminUser/recentCommunities/{recentCommunityId}","method":"delete"},{"specification":"This operation retrieves a paginated and filtered list of posts from the community_platform_posts table, supporting advanced search by community, author, keywords, and sort order. The endpoint processes complex requests for querying post content across multiple communities, integrating business rules for sorting (newest, top), keyword search, and pagination (20 items per page, with 'load more' capability). Only active, non-deleted posts are returned. Posts may be filtered by joined communities for authenticated users.","description":"Advanced post searching is provided via this PATCH request, allowing clients to submit structured criteria for retrieving posts from the community_platform_posts table. Search parameters include communityId(s), authorUserId(s), title/body text match, and sort order (newest or top). Result data is paginated (20 results per page by default), with sorting business logic reflecting platform rules: newest sorts by creation time and id, top sorts by score, then latest, then id.\n\nThis operation adheres to business constraints such as minimum query length (2+ characters for keyword searches), filtering of soft-deleted posts, and member-specific restrictions when searching posts across joined communities. Unauthenticated (guest) users may freely search published posts system-wide, but results will exclude private or restricted content as per platform rules.\n\nError handling includes short query rejection and limits excessive page requests. The response returns an IPageICommunityPlatformPost.ISummary for efficient feed rendering.","summary":"Search, filter, and retrieve a paginated list of posts from community_platform_posts with advanced query options.","parameters":[],"requestBody":{"description":"Search and pagination parameters for post filtering (communityIds, authorUserIds, keyword, sortOrder, page).","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated post summaries matching the search or feed request, with total count and pagination metadata.","typeName":"IPageICommunityPlatformPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/posts","method":"patch"},{"specification":"This operation retrieves detailed information about a single post, specified by postId, from the community_platform_posts table. It returns all main fields: title, body, author, community reference, creation/update timestamps, and optional display name. The endpoint supports both member and admin authors and enforces presentation of active (non-deleted) posts only. This is a read-only operation, available to all clients including unauthenticated guests, per business rules for public content access.","description":"Use this GET endpoint to fetch a single post by its unique postId identifier from the community_platform_posts table. This operation returns all post fields including title, body, community identity, author user id (member or admin), author display name, creation and update time, and relationships to the community and owner. Deleted or soft-deleted posts are filtered from results.\n\nSecurity logic ensures that even guests can view public posts, but only non-private, non-removed items are returned. Ownership and edit permissions are not handled here but reflected in other business endpoints. Edge cases, such as non-existent or deleted posts, return appropriate error statuses, and fields are structured for detail screens with related entities (community, comments, etc.).","summary":"Retrieve detailed information for a specific post from community_platform_posts by postId.","parameters":[{"name":"postId","description":"The UUID of the post to fetch details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete post details with all fields for display and further actions.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/posts/{postId}","method":"get"},{"specification":"This operation creates a new post record in the community_platform_posts table on behalf of an authenticated memberUser or adminUser. The client submits the required post details: communityId, title (5–120 chars), body (10–10,000 chars), and optional display name. The operation enforces all business validation rules, including content lengths, plain text requirements, and that a valid community and author reference is specified. Created posts are immediately available in personalized feeds for joined users.","description":"POST /posts creates a new post entry in the system by inserting a record into the community_platform_posts table. Required inputs are verified for compliance: a valid, existing communityId must be specified, title and body conform to business length/value rules, and the author must be an authenticated memberUser or adminUser. If a display name is omitted or empty, 'Anonymous' is automatically assigned.\n\nSecurity logic ensures posts can be created only when authenticated; otherwise, the operation is rejected. On successful creation, the post is associated with the authenticated user's id, the specified community, and an appropriate author display name. Immediate error feedback is provided for missing fields, invalid lengths, or community not found. The resulting object includes all post fields for client-side confirmation and feed refresh.","summary":"Create a new post in community_platform_posts by providing the post details and community association.","parameters":[],"requestBody":{"description":"Data for the new post: communityId, title, body, optional display name.","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"The newly created post object with all persisted fields.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"memberUser","name":"create","path":"/communityPlatform/memberUser/posts","method":"post"},{"specification":"This operation creates a new post record in the community_platform_posts table on behalf of an authenticated memberUser or adminUser. The client submits the required post details: communityId, title (5–120 chars), body (10–10,000 chars), and optional display name. The operation enforces all business validation rules, including content lengths, plain text requirements, and that a valid community and author reference is specified. Created posts are immediately available in personalized feeds for joined users.","description":"POST /posts creates a new post entry in the system by inserting a record into the community_platform_posts table. Required inputs are verified for compliance: a valid, existing communityId must be specified, title and body conform to business length/value rules, and the author must be an authenticated memberUser or adminUser. If a display name is omitted or empty, 'Anonymous' is automatically assigned.\n\nSecurity logic ensures posts can be created only when authenticated; otherwise, the operation is rejected. On successful creation, the post is associated with the authenticated user's id, the specified community, and an appropriate author display name. Immediate error feedback is provided for missing fields, invalid lengths, or community not found. The resulting object includes all post fields for client-side confirmation and feed refresh.","summary":"Create a new post in community_platform_posts by providing the post details and community association.","parameters":[],"requestBody":{"description":"Data for the new post: communityId, title, body, optional display name.","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"The newly created post object with all persisted fields.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"adminUser","name":"create","path":"/communityPlatform/adminUser/posts","method":"post"},{"specification":"This operation updates an existing post in the community_platform_posts table, referenced by postId. Authorship is verified: only the original author (memberUser or adminUser) or adminUser can submit updates. Updatable fields are title, body, and display name (all business validation rules apply). Attempted updates to deleted or non-owned posts are rejected. On success, the post record is updated and the new details are returned for confirmation.","description":"PUT /posts/{postId} allows an authenticated user to edit their own post or for adminUser to update any post. The operation locates the target record by postId and ensures the requester is authorized to modify the post according to business ownership and moderation rules. Clients may update the title (5–120 chars), body (10–10,000 chars), and display name (0–32 chars, optional—defaults to 'Anonymous' if empty).\n\nValidation constraints are enforced: posts must not be deleted, inputs must match content rules, and community or author associations cannot be changed via this operation. If requested by a non-author (non-admin), the operation returns a permission error. The response contains the updated post details. Error handling covers not found, deleted, or unauthorized modification attempts.","summary":"Update a post's title, body, or display name in community_platform_posts by postId.","parameters":[{"name":"postId","description":"The unique identifier (UUID) of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for update: title, body, optional display name (business rule checks enforced).","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"The updated post object with all persisted fields.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"memberUser","name":"update","path":"/communityPlatform/memberUser/posts/{postId}","method":"put"},{"specification":"This operation updates an existing post in the community_platform_posts table, referenced by postId. Authorship is verified: only the original author (memberUser or adminUser) or adminUser can submit updates. Updatable fields are title, body, and display name (all business validation rules apply). Attempted updates to deleted or non-owned posts are rejected. On success, the post record is updated and the new details are returned for confirmation.","description":"PUT /posts/{postId} allows an authenticated user to edit their own post or for adminUser to update any post. The operation locates the target record by postId and ensures the requester is authorized to modify the post according to business ownership and moderation rules. Clients may update the title (5–120 chars), body (10–10,000 chars), and display name (0–32 chars, optional—defaults to 'Anonymous' if empty).\n\nValidation constraints are enforced: posts must not be deleted, inputs must match content rules, and community or author associations cannot be changed via this operation. If requested by a non-author (non-admin), the operation returns a permission error. The response contains the updated post details. Error handling covers not found, deleted, or unauthorized modification attempts.","summary":"Update a post's title, body, or display name in community_platform_posts by postId.","parameters":[{"name":"postId","description":"The unique identifier (UUID) of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for update: title, body, optional display name (business rule checks enforced).","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"The updated post object with all persisted fields.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"adminUser","name":"update","path":"/communityPlatform/adminUser/posts/{postId}","method":"put"},{"specification":"This operation permanently deletes a post record from the community_platform_posts table. The target is identified by postId. Only the post's author (memberUser or adminUser) or any adminUser may perform the delete. Soft deletion is implemented: deleted_at is set instead of removing the record from the database, supporting business rules for recovery and compliance. Associated comments, votes, and other related data are handled by cascading logic at the application layer.","description":"DELETE /posts/{postId} removes a post from user feeds and search by marking the record as deleted (soft delete—sets deleted_at field) in community_platform_posts. Only the author (memberUser/adminUser) or an adminUser can delete. All underlying business checks for ownership, existence, and non-previously-deleted status are enforced.\n\nCascading application logic removes or marks as deleted dependent entities such as comments or votes as per compliance rules. Attempted deletion of non-owned posts by non-admins returns a permission error. Once deleted, the post becomes inaccessible via normal queries, ensuring user privacy and platform integrity. The operation does not return a body on success.","summary":"Soft-delete an existing post in community_platform_posts by postId; only allowed by author or adminUser.","parameters":[{"name":"postId","description":"The UUID of the post to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"memberUser","name":"erase","path":"/communityPlatform/memberUser/posts/{postId}","method":"delete"},{"specification":"This operation permanently deletes a post record from the community_platform_posts table. The target is identified by postId. Only the post's author (memberUser or adminUser) or any adminUser may perform the delete. Soft deletion is implemented: deleted_at is set instead of removing the record from the database, supporting business rules for recovery and compliance. Associated comments, votes, and other related data are handled by cascading logic at the application layer.","description":"DELETE /posts/{postId} removes a post from user feeds and search by marking the record as deleted (soft delete—sets deleted_at field) in community_platform_posts. Only the author (memberUser/adminUser) or an adminUser can delete. All underlying business checks for ownership, existence, and non-previously-deleted status are enforced.\n\nCascading application logic removes or marks as deleted dependent entities such as comments or votes as per compliance rules. Attempted deletion of non-owned posts by non-admins returns a permission error. Once deleted, the post becomes inaccessible via normal queries, ensuring user privacy and platform integrity. The operation does not return a body on success.","summary":"Soft-delete an existing post in community_platform_posts by postId; only allowed by author or adminUser.","parameters":[{"name":"postId","description":"The UUID of the post to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","name":"erase","path":"/communityPlatform/adminUser/posts/{postId}","method":"delete"},{"specification":"This operation allows an authenticated user (member or admin) to create or update their own vote (upvote, downvote, or removal) on a specific post. It operates on the community_platform_post_votes table. The business logic enforces that each user may have exactly one vote per post, vote state is toggled (upvote, downvote, or none), and users cannot vote on their own posts. Only authenticated users (memberUser or adminUser) can access this operation.","description":"Allows an authenticated member or admin user to submit a vote for a post, capturing states: upvote, downvote, or removal (reset to none).\n\nThe operation first verifies that the target post exists and that the user is not the author (self-voting is prohibited by business rules and enforced by application logic). If the user already has a vote on this post, the submission either toggles or updates the vote state accordingly, maintaining a one-vote-per-user-per-post policy.\n\nVoting events are tracked for analytics and score calculation. Immediate feedback is provided to the frontend for optimistic UI; back-end persistence confirms final state.\n\nAuthentication is required. Authorization allows both memberUser and adminUser types. Attempting to vote as a guest triggers a login prompt. Errors are returned if self-vote, post not found, or if the user has no permission.","summary":"Create or update a user's vote for a specific post (upvote, downvote, or removal).","parameters":[{"name":"postId","description":"Unique identifier of the target post to be voted on (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Voting state information (e.g., upvote, downvote, or removal) for the post.","typeName":"ICommunityPlatformPostVote.ICreate"},"responseBody":{"description":"The resulting post vote record confirming the user's voting state for the target post.","typeName":"ICommunityPlatformPostVote"},"authorizationType":null,"authorizationRole":"memberUser","name":"create","path":"/communityPlatform/memberUser/posts/{postId}/votes","method":"post"},{"specification":"This operation allows an authenticated user (member or admin) to create or update their own vote (upvote, downvote, or removal) on a specific post. It operates on the community_platform_post_votes table. The business logic enforces that each user may have exactly one vote per post, vote state is toggled (upvote, downvote, or none), and users cannot vote on their own posts. Only authenticated users (memberUser or adminUser) can access this operation.","description":"Allows an authenticated member or admin user to submit a vote for a post, capturing states: upvote, downvote, or removal (reset to none).\n\nThe operation first verifies that the target post exists and that the user is not the author (self-voting is prohibited by business rules and enforced by application logic). If the user already has a vote on this post, the submission either toggles or updates the vote state accordingly, maintaining a one-vote-per-user-per-post policy.\n\nVoting events are tracked for analytics and score calculation. Immediate feedback is provided to the frontend for optimistic UI; back-end persistence confirms final state.\n\nAuthentication is required. Authorization allows both memberUser and adminUser types. Attempting to vote as a guest triggers a login prompt. Errors are returned if self-vote, post not found, or if the user has no permission.","summary":"Create or update a user's vote for a specific post (upvote, downvote, or removal).","parameters":[{"name":"postId","description":"Unique identifier of the target post to be voted on (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Voting state information (e.g., upvote, downvote, or removal) for the post.","typeName":"ICommunityPlatformPostVote.ICreate"},"responseBody":{"description":"The resulting post vote record confirming the user's voting state for the target post.","typeName":"ICommunityPlatformPostVote"},"authorizationType":null,"authorizationRole":"adminUser","name":"create","path":"/communityPlatform/adminUser/posts/{postId}/votes","method":"post"},{"specification":"This operation updates an existing vote by an authenticated user (member or admin) on a post, changing its state to upvote, downvote, or none. It operates on the community_platform_post_votes table and must ensure that the vote belongs to the requesting user. Business rules enforce only a single vote per user per post, and users cannot vote on their own posts.","description":"Allows an authenticated user to change or remove their existing vote for a given post. The operation first verifies that the vote exists, belongs to the current user, and that the user is not attempting to vote on their own post (self-voting is prohibited).\n\nVote state is updated to either upvote, downvote, or explicitly removed (none). Ownership and authorization checks are enforced. Backend confirms changes for accurate score calculation and frontend updates. Invalid voteId, self-vote attempts, or unauthorized access are properly handled with clear error messages.","summary":"Update the current user's existing vote on a specific post (upvote, downvote, or removal).","parameters":[{"name":"postId","description":"Unique identifier of the post being voted on (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the user's vote record for the post (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated voting state for the post vote (upvote, downvote, or none).","typeName":"ICommunityPlatformPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record, reflecting the user's new vote state.","typeName":"ICommunityPlatformPostVote"},"authorizationType":null,"authorizationRole":"memberUser","name":"update","path":"/communityPlatform/memberUser/posts/{postId}/votes/{voteId}","method":"put"},{"specification":"This operation updates an existing vote by an authenticated user (member or admin) on a post, changing its state to upvote, downvote, or none. It operates on the community_platform_post_votes table and must ensure that the vote belongs to the requesting user. Business rules enforce only a single vote per user per post, and users cannot vote on their own posts.","description":"Allows an authenticated user to change or remove their existing vote for a given post. The operation first verifies that the vote exists, belongs to the current user, and that the user is not attempting to vote on their own post (self-voting is prohibited).\n\nVote state is updated to either upvote, downvote, or explicitly removed (none). Ownership and authorization checks are enforced. Backend confirms changes for accurate score calculation and frontend updates. Invalid voteId, self-vote attempts, or unauthorized access are properly handled with clear error messages.","summary":"Update the current user's existing vote on a specific post (upvote, downvote, or removal).","parameters":[{"name":"postId","description":"Unique identifier of the post being voted on (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the user's vote record for the post (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated voting state for the post vote (upvote, downvote, or none).","typeName":"ICommunityPlatformPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record, reflecting the user's new vote state.","typeName":"ICommunityPlatformPostVote"},"authorizationType":null,"authorizationRole":"adminUser","name":"update","path":"/communityPlatform/adminUser/posts/{postId}/votes/{voteId}","method":"put"},{"specification":"This operation deletes the current user's own vote on a specific post. It operates on the community_platform_post_votes table and ensures users can only delete their own votes. The business rule is that removing a vote is only possible by the vote owner. Self-voting is prohibited.","description":"Allows an authenticated member or admin user to remove their own vote from a post. This sets the user's vote state to none and updates the post score accordingly.\n\nOperation verifies voteId belongs to the current user for the target post and does not allow users to remove votes on their own posts. If the vote does not exist, or does not belong to the current user, an error is returned. The system confirms successful removal, ensuring only the owner may perform this action.","summary":"Delete the current user's own vote on a specific post.","parameters":[{"name":"postId","description":"Unique identifier of the post from which the vote is removed (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the user's vote record to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"memberUser","name":"erase","path":"/communityPlatform/memberUser/posts/{postId}/votes/{voteId}","method":"delete"},{"specification":"This operation deletes the current user's own vote on a specific post. It operates on the community_platform_post_votes table and ensures users can only delete their own votes. The business rule is that removing a vote is only possible by the vote owner. Self-voting is prohibited.","description":"Allows an authenticated member or admin user to remove their own vote from a post. This sets the user's vote state to none and updates the post score accordingly.\n\nOperation verifies voteId belongs to the current user for the target post and does not allow users to remove votes on their own posts. If the vote does not exist, or does not belong to the current user, an error is returned. The system confirms successful removal, ensuring only the owner may perform this action.","summary":"Delete the current user's own vote on a specific post.","parameters":[{"name":"postId","description":"Unique identifier of the post from which the vote is removed (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the user's vote record to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","name":"erase","path":"/communityPlatform/adminUser/posts/{postId}/votes/{voteId}","method":"delete"},{"specification":"This operation provides authorized admin users with an auditable, paginated listing of moderation actions taken on a specific post. It operates on the community_platform_post_moderation_logs table, supporting search, filtering, pagination, and sorting per business requirements.","description":"Retrieves a filtered, paginated list of moderation logs for a post, detailing every moderation action (edit, delete, restore, etc.) taken by admin users on the specific post.\n\nThe operation supports advanced filtering (mod type, date range), comprehensive sorting by date or action type, and full pagination for review purposes. Only admin users are permitted, as these logs may contain sensitive information for compliance and accountability. The operation integrates full detail fields (action type, reason, timestamp, performing admin, etc.) as described in the Prisma schema, allowing audit trails and monitoring.\n\nProper error handling is provided for permission errors or malformed filters. Usage is restricted to platform admins due to the nature of the data.","summary":"Retrieve paginated moderation logs for a specific post, searchable and filterable.","parameters":[{"name":"postId","description":"Unique identifier of the target post whose moderation logs are queried (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, sort, and pagination parameters for fetching post moderation logs.","typeName":"ICommunityPlatformPostModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation logs for the specified post, with full action details.","typeName":"IPageICommunityPlatformPostModerationLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"index","path":"/communityPlatform/adminUser/posts/{postId}/moderationLogs","method":"patch"},{"specification":"This operation retrieves a single moderation log entry for a post by its unique identifier, restricted to admin users. It operates on the community_platform_post_moderation_logs table and provides full detail about the moderation action for audit and compliance transparency.","description":"Fetches detailed information about a single moderation log entry for a specific post. The operation reveals action type, reason, timestamp, performing admin, and associated post, as described in the Prisma schema.\n\nAuthorization is restricted to admin users due to the sensitivity of moderation logs. The operation handles errors when the log entry or post does not exist, or if unauthorized access is attempted.","summary":"Retrieve detailed information for a specific post moderation log entry by ID.","parameters":[{"name":"postId","description":"Unique identifier of the post the moderation log belongs to (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"moderationLogId","description":"Unique identifier of the moderation log entry to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed moderation log entry for the given ID.","typeName":"ICommunityPlatformPostModerationLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"at","path":"/communityPlatform/adminUser/posts/{postId}/moderationLogs/{moderationLogId}","method":"get"},{"specification":"This operation provides searchable, filterable, and paginated retrieval of comments across the platform. It operates on the community_platform_comments table and supports searching by post, author, content, and nesting. It includes comment details, threading information, and summary fields suitable for list display. Public operation for reading comments.","description":"Retrieves a paginated, filtered list of comments system-wide or for a particular context (e.g., specific post or parent comment). Supports rich filtering (e.g., by post, author, nesting), advanced full-text search on content, and paging for performance. Sorting is offered by newest or top score.\n\nEach comment entry exposes summary fields per the Prisma schema: content (body), display name, creation date, parent linkage, etc. Publicly readable by any role, including unauthenticated users, but only non-private fields are returned if accessed as a guest.\n\nOperation is accessible to all users; sensitive fields are omitted for guests as per privacy rules. Standard error handling is enforced for malformed queries or unauthorized field access.","summary":"Paginated and searchable list of comments with core summary data.","parameters":[],"requestBody":{"description":"Search/filter criteria and pagination options for querying comments.","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated list of comment summary data matching the search criteria.","typeName":"IPageICommunityPlatformComment.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/comments","method":"patch"},{"specification":"This operation retrieves detailed information about a specific comment by its ID for display or further action. It operates on the community_platform_comments table and provides all comment fields, including thread context and author info.","description":"Fetches a single comment with full detail: plain-text body, author/member/guest/admin, display name (with 'Anonymous' fallback), parent/child (reply) relationships, timestamps, and status (deleted/active).\n\nComment detail retrieval is allowed for any user (including guests), but only public-safe fields (per privacy requirements) are shown to non-authenticated users. The operation handles missing or deleted comments with appropriate errors.","summary":"Retrieve detailed information about a specific comment by its unique ID.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full detail representation of the requested comment.","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/comments/{commentId}","method":"get"},{"specification":"This operation allows an authenticated member or admin user to create a new comment on a post or as a reply to another comment. It operates on the community_platform_comments table. Replies are supported via an optional parent_comment_id. Comment business rules enforce plain-text only, length 2–2,000 chars, and ownership/authorization constraints.","description":"Allows an authenticated member or admin user to create a comment for a post or as a nested reply. Enforces all business logic for validation, including minimum and maximum lengths, plain-text only input, and one-to-one ownership (authenticated user only).\n\nSupports both top-level comments and arbitrary threading via parent_comment_id. Parent relationships and post linkage are verified for existence and permissions. Only the comment author or platform admin may later edit or delete the comment (via respective APIs).\n\nUnauthenticated users are rejected with a login-required message. Validation errors on content length or parent linkage result in clear feedback, per platform standards.","summary":"Create a new top-level comment or a reply on a post, for authenticated users.","parameters":[],"requestBody":{"description":"Information required to create a new comment (post_id, optional parent_comment_id, body, display name) following comment business rules.","typeName":"ICommunityPlatformComment.ICreate"},"responseBody":{"description":"The detailed created comment object upon successful creation.","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":"memberUser","name":"create","path":"/communityPlatform/memberUser/comments","method":"post"},{"specification":"This operation allows an authenticated member or admin user to create a new comment on a post or as a reply to another comment. It operates on the community_platform_comments table. Replies are supported via an optional parent_comment_id. Comment business rules enforce plain-text only, length 2–2,000 chars, and ownership/authorization constraints.","description":"Allows an authenticated member or admin user to create a comment for a post or as a nested reply. Enforces all business logic for validation, including minimum and maximum lengths, plain-text only input, and one-to-one ownership (authenticated user only).\n\nSupports both top-level comments and arbitrary threading via parent_comment_id. Parent relationships and post linkage are verified for existence and permissions. Only the comment author or platform admin may later edit or delete the comment (via respective APIs).\n\nUnauthenticated users are rejected with a login-required message. Validation errors on content length or parent linkage result in clear feedback, per platform standards.","summary":"Create a new top-level comment or a reply on a post, for authenticated users.","parameters":[],"requestBody":{"description":"Information required to create a new comment (post_id, optional parent_comment_id, body, display name) following comment business rules.","typeName":"ICommunityPlatformComment.ICreate"},"responseBody":{"description":"The detailed created comment object upon successful creation.","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":"adminUser","name":"create","path":"/communityPlatform/adminUser/comments","method":"post"},{"specification":"This operation updates an existing comment by its unique identifier. It allows authenticated users (either the original comment author or an admin user) to modify the content of the comment, specifically the body text and display name. Business rules enforce that only the comment's author or an admin may perform updates. The operation references the community_platform_comments table, and validation is enforced according to the schema: body must be 2–2,000 characters, display_name up to 32 characters, plain text only. This operation does not allow updating of parent, post, or author fields, and only updates fields modifiable after creation. Comment modifications are timestamped.","description":"This API endpoint enables the editing of an existing comment on a post. Only the original author of the comment or a platform admin user can perform this action, ensuring ownership and moderation rules are enforced. The underlying database table is community_platform_comments.\n\nThe comment body must remain between 2 and 2,000 characters as plain text and may not include executable code. The display_name is optional and limited to 32 characters. If the field is left empty, the comment will default to showing 'Anonymous' as the author. Attempts to modify the comment by users who are not the original author or an admin will be rejected with a permission error message.\n\nSecurity is ensured by verifying the user role and ownership before allowing updates. Edits are reflected in the updated_at column to provide an audit trail of modifications. This operation integrates with frontend flows for comment editing and supports error handling for validation and permission failures.","summary":"Update a comment's body or display name (community_platform_comments table)","parameters":[{"name":"commentId","description":"Unique identifier of the target comment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment: body (2–2,000 chars), display_name (0–32 chars, optional)","typeName":"ICommunityPlatformComment.IUpdate"},"responseBody":{"description":"Detailed information on the updated comment","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":"memberUser","name":"update","path":"/communityPlatform/memberUser/comments/{commentId}","method":"put"},{"specification":"This operation updates an existing comment by its unique identifier. It allows authenticated users (either the original comment author or an admin user) to modify the content of the comment, specifically the body text and display name. Business rules enforce that only the comment's author or an admin may perform updates. The operation references the community_platform_comments table, and validation is enforced according to the schema: body must be 2–2,000 characters, display_name up to 32 characters, plain text only. This operation does not allow updating of parent, post, or author fields, and only updates fields modifiable after creation. Comment modifications are timestamped.","description":"This API endpoint enables the editing of an existing comment on a post. Only the original author of the comment or a platform admin user can perform this action, ensuring ownership and moderation rules are enforced. The underlying database table is community_platform_comments.\n\nThe comment body must remain between 2 and 2,000 characters as plain text and may not include executable code. The display_name is optional and limited to 32 characters. If the field is left empty, the comment will default to showing 'Anonymous' as the author. Attempts to modify the comment by users who are not the original author or an admin will be rejected with a permission error message.\n\nSecurity is ensured by verifying the user role and ownership before allowing updates. Edits are reflected in the updated_at column to provide an audit trail of modifications. This operation integrates with frontend flows for comment editing and supports error handling for validation and permission failures.","summary":"Update a comment's body or display name (community_platform_comments table)","parameters":[{"name":"commentId","description":"Unique identifier of the target comment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment: body (2–2,000 chars), display_name (0–32 chars, optional)","typeName":"ICommunityPlatformComment.IUpdate"},"responseBody":{"description":"Detailed information on the updated comment","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":"adminUser","name":"update","path":"/communityPlatform/adminUser/comments/{commentId}","method":"put"},{"specification":"This operation deletes (soft-deletes) a comment given its unique identifier. Only the comment's original author (member user) or an admin user can perform this deletion. The deleted_at timestamp is set to mark the comment as removed, but the actual record remains in the database for audit and compliance purposes. All direct child replies (recursive) are also soft-deleted by cascade. This operation is built on the community_platform_comments table and enforces business, security, and data retention requirements by checking for ownership or admin status.","description":"This endpoint allows the deletion (soft-deletion) of a comment identified by its commentId. The operation can be performed only by the original author of the comment or by an admin user. Upon execution, the deleted_at column of the comment (and all its direct and nested replies) is set to the current timestamp, effectively hiding them from public view while maintaining data integrity for compliance and recovery as required by business rules.\n\nThe database table community_platform_comments provides soft-delete capability via the deleted_at field. Other users attempting to delete comments they do not own will receive an error message. If the comment hierarchy contains replies, all descendants are processed recursively. Admin users may perform this on any comment for moderation, while regular users are restricted to their own content.","summary":"Soft-delete a comment by ID (community_platform_comments table)","parameters":[{"name":"commentId","description":"Unique identifier of the comment to soft-delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"memberUser","name":"erase","path":"/communityPlatform/memberUser/comments/{commentId}","method":"delete"},{"specification":"This operation deletes (soft-deletes) a comment given its unique identifier. Only the comment's original author (member user) or an admin user can perform this deletion. The deleted_at timestamp is set to mark the comment as removed, but the actual record remains in the database for audit and compliance purposes. All direct child replies (recursive) are also soft-deleted by cascade. This operation is built on the community_platform_comments table and enforces business, security, and data retention requirements by checking for ownership or admin status.","description":"This endpoint allows the deletion (soft-deletion) of a comment identified by its commentId. The operation can be performed only by the original author of the comment or by an admin user. Upon execution, the deleted_at column of the comment (and all its direct and nested replies) is set to the current timestamp, effectively hiding them from public view while maintaining data integrity for compliance and recovery as required by business rules.\n\nThe database table community_platform_comments provides soft-delete capability via the deleted_at field. Other users attempting to delete comments they do not own will receive an error message. If the comment hierarchy contains replies, all descendants are processed recursively. Admin users may perform this on any comment for moderation, while regular users are restricted to their own content.","summary":"Soft-delete a comment by ID (community_platform_comments table)","parameters":[{"name":"commentId","description":"Unique identifier of the comment to soft-delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","name":"erase","path":"/communityPlatform/adminUser/comments/{commentId}","method":"delete"},{"specification":"This operation retrieves a paginated list of votes (upvotes, downvotes) on a specific comment, supporting advanced filtering, sorting (by created_at, vote_type), and searching by voter. It operates on the community_platform_comment_votes table, allowing query by commentId, with optional filters on vote type or voter identity. It is intended for moderation dashboards, analytics, and transparency on comment engagement. Standard role-based restrictions apply to visibility. Pagination allows large vote sets to be efficiently browsed or analyzed.","description":"This endpoint returns a filtered, sorted, and paginated list of votes on a particular comment, identified by its commentId parameter. The votes originate from the community_platform_comment_votes table, with each vote associated with a comment, a user (member or admin), and a vote_type field ('upvote', 'downvote', 'none').\n\nAdvanced request filtering allows for slicing by vote_type, voter identity, or time range. The results are paginated and sortable by the created_at timestamp or vote_type for audits or engagement metrics.\n\nSecurity policies may limit access to full voter identity to admin users, while general engagement metrics are available to all. Pagination ensures performance and scalability for comments with high engagement. Business logic ensures only existing votes for the specified commentId are returned. Error handling covers invalid IDs, query parameters, and unauthorized requests.","summary":"Paginated list of votes for a comment (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose votes should be listed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filtering options for comment votes (pagination, sorting, voter, vote_type)","typeName":"ICommunityPlatformCommentVote.IRequest"},"responseBody":{"description":"Paginated vote records for the comment matching the search criteria","typeName":"IPageICommunityPlatformCommentVote"},"authorizationType":null,"authorizationRole":"adminUser","name":"index","path":"/communityPlatform/adminUser/comments/{commentId}/votes","method":"patch"},{"specification":"This operation retrieves the detailed information for a specific vote by its ID belonging to a comment. It operates on the community_platform_comment_votes table, returning the current vote state, voter type, and associated audit fields. Intended for admin moderation and audit dashboards, it allows privileged users to view the voter, type (upvote, downvote, none), and all metadata for a particular comment vote. Business rules ensure that only authorized users may access full vote details.","description":"This endpoint returns the details of a specific comment vote as identified by voteId and associated with the given commentId. The underlying data source is the community_platform_comment_votes table, which includes one entry per user per comment capturing vote_type (upvote, downvote, none), voter identity, and audit metadata.\n\nPrimarily intended for administrative views and audit dashboards, this operation exposes detailed vote information, including which user (memberUser or adminUser) cast the vote. Security rules ensure that only users with appropriate admin privileges may view full voter details.\n\nProper validation occurs to ensure the voteId matches a vote on the specified commentId before retrieval. If no match exists, the operation returns an error. Data can be used for analytic and moderation purposes.","summary":"Get a specific vote on a comment (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the comment vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specific comment vote","typeName":"ICommunityPlatformCommentVote"},"authorizationType":null,"authorizationRole":"adminUser","name":"at","path":"/communityPlatform/adminUser/comments/{commentId}/votes/{voteId}","method":"get"},{"specification":"This operation creates a new vote (upvote or downvote) on a comment for an authenticated user. It supports only valid vote states (upvote, downvote, none) and ensures that each user has at most one vote per comment. Vote creation is restricted by business rules so that a user cannot vote on their own comment. The operation works with the community_platform_comment_votes table to maintain or update voting state accordingly.","description":"This endpoint allows an authenticated user to cast an upvote or downvote on a specific comment. Only valid vote types are accepted ('upvote', 'downvote', or clearing vote with 'none'). The system ensures one record per user per comment, creating or updating the user's vote as appropriate.\n\nBusiness logic enforces that users cannot vote on their own comments; attempts to do so result in a permission error. On casting or updating a vote, the vote_type, voter identity (memberUser or adminUser), timestamps, and target comment are stored in the community_platform_comment_votes table.\n\nSecurity is enforced so only the voting user (memberUser or adminUser) may create their own votes. This operation is essential for the platform's reputation and scoring system for comment engagement. Vote score calculation is handled elsewhere.","summary":"Create a new vote (upvote/downvote) on a comment (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the comment to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote object to be created with commentId, voter, and vote_type (upvote, downvote, none)","typeName":"ICommunityPlatformCommentVote.ICreate"},"responseBody":{"description":"Details of the vote created for the comment (vote_type, voter, timestamps)","typeName":"ICommunityPlatformCommentVote"},"authorizationType":null,"authorizationRole":"memberUser","name":"create","path":"/communityPlatform/memberUser/comments/{commentId}/votes","method":"post"},{"specification":"This operation creates a new vote (upvote or downvote) on a comment for an authenticated user. It supports only valid vote states (upvote, downvote, none) and ensures that each user has at most one vote per comment. Vote creation is restricted by business rules so that a user cannot vote on their own comment. The operation works with the community_platform_comment_votes table to maintain or update voting state accordingly.","description":"This endpoint allows an authenticated user to cast an upvote or downvote on a specific comment. Only valid vote types are accepted ('upvote', 'downvote', or clearing vote with 'none'). The system ensures one record per user per comment, creating or updating the user's vote as appropriate.\n\nBusiness logic enforces that users cannot vote on their own comments; attempts to do so result in a permission error. On casting or updating a vote, the vote_type, voter identity (memberUser or adminUser), timestamps, and target comment are stored in the community_platform_comment_votes table.\n\nSecurity is enforced so only the voting user (memberUser or adminUser) may create their own votes. This operation is essential for the platform's reputation and scoring system for comment engagement. Vote score calculation is handled elsewhere.","summary":"Create a new vote (upvote/downvote) on a comment (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the comment to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote object to be created with commentId, voter, and vote_type (upvote, downvote, none)","typeName":"ICommunityPlatformCommentVote.ICreate"},"responseBody":{"description":"Details of the vote created for the comment (vote_type, voter, timestamps)","typeName":"ICommunityPlatformCommentVote"},"authorizationType":null,"authorizationRole":"adminUser","name":"create","path":"/communityPlatform/adminUser/comments/{commentId}/votes","method":"post"},{"specification":"This operation updates the state of an existing comment vote as identified by voteId and its parent commentId. Authenticated users may toggle their upvote/downvote/none state for a comment. Only the original voter or a platform admin may perform this update. The operation updates the vote_type field based on platform logic (toggle upvote/downvote/none) and adjusts timestamps accordingly. Works on the community_platform_comment_votes table.","description":"This endpoint allows the original voter (memberUser or adminUser) or an admin to change the state of a vote on a comment, such as toggling upvote/downvote or clearing to none. The operation validates that the voteId is associated with the specified commentId, and that the user has permission (voter = self or admin privilege).\n\nValidation ensures that users cannot vote on their own comments. State transitions follow platform voting business logic: toggling between upvote, downvote, and none. Updated_at is changed to reflect the most recent action, with full support for audit/compliance. Errors are returned for invalid vote states, permission failures, or mismatched IDs.","summary":"Update the vote state for a comment vote (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the comment vote to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment vote (vote_type: upvote, downvote, none)","typeName":"ICommunityPlatformCommentVote.IUpdate"},"responseBody":{"description":"Updated vote record for the specified comment and vote ID","typeName":"ICommunityPlatformCommentVote"},"authorizationType":null,"authorizationRole":"memberUser","name":"update","path":"/communityPlatform/memberUser/comments/{commentId}/votes/{voteId}","method":"put"},{"specification":"This operation updates the state of an existing comment vote as identified by voteId and its parent commentId. Authenticated users may toggle their upvote/downvote/none state for a comment. Only the original voter or a platform admin may perform this update. The operation updates the vote_type field based on platform logic (toggle upvote/downvote/none) and adjusts timestamps accordingly. Works on the community_platform_comment_votes table.","description":"This endpoint allows the original voter (memberUser or adminUser) or an admin to change the state of a vote on a comment, such as toggling upvote/downvote or clearing to none. The operation validates that the voteId is associated with the specified commentId, and that the user has permission (voter = self or admin privilege).\n\nValidation ensures that users cannot vote on their own comments. State transitions follow platform voting business logic: toggling between upvote, downvote, and none. Updated_at is changed to reflect the most recent action, with full support for audit/compliance. Errors are returned for invalid vote states, permission failures, or mismatched IDs.","summary":"Update the vote state for a comment vote (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the comment vote to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment vote (vote_type: upvote, downvote, none)","typeName":"ICommunityPlatformCommentVote.IUpdate"},"responseBody":{"description":"Updated vote record for the specified comment and vote ID","typeName":"ICommunityPlatformCommentVote"},"authorizationType":null,"authorizationRole":"adminUser","name":"update","path":"/communityPlatform/adminUser/comments/{commentId}/votes/{voteId}","method":"put"},{"specification":"This operation deletes a vote on a comment as identified by voteId, removing the record from the community_platform_comment_votes table. Only the original voter or an admin may perform this action. Used when a user retracts their vote or for moderation purposes. Removes the user's voting state for that comment completely. No response body is provided. Errors are raised for permission violations or invalid IDs.","description":"This endpoint allows the original voter (memberUser or adminUser) or a platform admin to remove a vote they have cast on a comment. By deleting the vote record (hard delete), the platform forgets the user's vote state for the targeted comment. The database table is community_platform_comment_votes.\n\nThe operation validates that the provided voteId is linked to the specified commentId, and ensures that only the original voter or admin has permission to delete. This operation is commonly used to allow users to retract their upvote/downvote, and also serves as a moderation tool for platform administrators. No content is returned in the response upon successful deletion.","summary":"Delete a comment vote (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the comment vote to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"memberUser","name":"erase","path":"/communityPlatform/memberUser/comments/{commentId}/votes/{voteId}","method":"delete"},{"specification":"This operation deletes a vote on a comment as identified by voteId, removing the record from the community_platform_comment_votes table. Only the original voter or an admin may perform this action. Used when a user retracts their vote or for moderation purposes. Removes the user's voting state for that comment completely. No response body is provided. Errors are raised for permission violations or invalid IDs.","description":"This endpoint allows the original voter (memberUser or adminUser) or a platform admin to remove a vote they have cast on a comment. By deleting the vote record (hard delete), the platform forgets the user's vote state for the targeted comment. The database table is community_platform_comment_votes.\n\nThe operation validates that the provided voteId is linked to the specified commentId, and ensures that only the original voter or admin has permission to delete. This operation is commonly used to allow users to retract their upvote/downvote, and also serves as a moderation tool for platform administrators. No content is returned in the response upon successful deletion.","summary":"Delete a comment vote (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the comment vote to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"adminUser","name":"erase","path":"/communityPlatform/adminUser/comments/{commentId}/votes/{voteId}","method":"delete"},{"specification":"This operation provides a paginated and filtered list of search analytics logs for auditing and compliance reporting. Operates on community_platform_search_logs, supporting filtering by search_query, member/admin, IP, time period, and scope (posts, comments, communities). Accessible only to admin users, it provides insight into search patterns and may fulfill legal audit requirements. The operation supports pagination, flexible query, and full field search.","description":"This API endpoint lists search analytics logs stored in the community_platform_search_logs table. It offers advanced filtering by search_query (minimum 2 characters), performed user (member/admin), date range, scope, and IP address. Designed to support platform analytics, audit logging, and compliance requirements such as GDPR data export.\n\nThe endpoint is available only to admin users, ensuring privacy over individual search histories. Returns results in pages with support for sorting (by created_at, scope). Filtering parameters allow fine-grained access to trends or event-level audit. Error responses are provided for malformed queries or permission violations.","summary":"Paginated search and analytics logs (community_platform_search_logs)","parameters":[],"requestBody":{"description":"Filter, search, and pagination options for search logs listing","typeName":"ICommunityPlatformSearchLog.IRequest"},"responseBody":{"description":"Paginated search log entries matching the query and filter criteria","typeName":"IPageICommunityPlatformSearchLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"index","path":"/communityPlatform/adminUser/searchLogs","method":"patch"},{"specification":"This operation retrieves the details of a specific search log entry in the community platform. Each search log captures a user's or admin's search queries, including scope, IP address, timestamps, and other audit-relevant metadata. The operation directly maps to the 'community_platform_search_logs' table in the Prisma schema. It is used to review or investigate individual search actions, support compliance audits, or provide admins with access to analytics information for one search action. The primary use case is administrative access for system inspection or legal data requests. Only adminUser roles are permitted to retrieve individual search log details.","description":"This API endpoint allows an authorized adminUser to retrieve detailed information about a particular search event logged by the system. The community_platform_search_logs table records each search performed by a memberUser or adminUser, including relevant metadata (query string, scope, IP address, timestamp, and user IDs).\n\nSecurity is enforced such that only adminUser roles can access this endpoint due to the sensitive nature of audit and analytics logs. The endpoint's main purpose is for system monitoring, compliance reviews (privacy requests), and detailed investigation of user or admin activity. The operation includes contextual fields and ensures that only non-soft-deleted records are retrievable.\n\nThe searchLogId parameter must match an existing search log's primary key (UUID format). If the log does not exist or has been soft-deleted, the API returns a not found error. The result includes all available logged fields for the entry as per the schema, but may omit certain sensitive information depending on the adminUser's access level and business logic. This operation is typically used in conjunction with list/search endpoints for broader analytics review.\n\nRelated endpoints may include bulk search log listing for compliance, or access to data export logs for tracking broader data workflows.","summary":"Retrieve detailed information for a specific search log entry (community_platform_search_logs).","parameters":[{"name":"searchLogId","description":"Unique identifier of the search log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed log information for the specific search event recorded in the system, matched by the searchLogId path parameter.","typeName":"ICommunityPlatformSearchLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"at","path":"/communityPlatform/adminUser/searchLogs/{searchLogId}","method":"get"},{"specification":"This operation returns a paginated, filterable list of all data export log records within the platform. It is based on the 'community_platform_data_export_logs' table in the Prisma schema and supports advanced search/filter criteria such as export type, status, requesting user/admin, and date/time ranges. The endpoint is used by adminUsers to audit platform data exports, fulfill compliance requirements, or review export activity. Access is strictly limited to adminUser roles due to the sensitive nature of export audit trails.","description":"This API endpoint enables adminUsers to perform advanced search, filtering, and pagination across all data export logs in the system. Each data export log records a member or admin's request for exportable data, tracking the export type (user data, community data, posts, etc.), format, requesting user, status, and timestamps as defined in the community_platform_data_export_logs table.\n\nSecurity is prioritized: only adminUser roles may invoke this operation, protecting sensitive compliance and audit information. The endpoint supports optional search parameters for filtering by user, admin, export type, status, and date range, as defined in the request body DTO. Complex queries are supported for in-depth compliance reviews, operational oversight, and legal investigation flows.\n\nThe list is paginated and sorted according to supplied criteria in the request. Results exclude records that have been soft-deleted per compliance policy. Related operations include retrieval of individual export log records or search log analytics for broader platform oversight.","summary":"Search, filter, and paginate data export logs (community_platform_data_export_logs) for compliance and audit purposes.","parameters":[],"requestBody":{"description":"Advanced search and pagination criteria for data export log listing, including user/admin, export type, status, and time range filters.","typeName":"ICommunityPlatformDataExportLog.IRequest"},"responseBody":{"description":"Paginated and filtered list of data export logs matching search and filter criteria.","typeName":"IPageICommunityPlatformDataExportLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"index","path":"/communityPlatform/adminUser/dataExportLogs","method":"patch"},{"specification":"This operation retrieves the full details for a specific data export log record, as stored in the 'community_platform_data_export_logs' table. Individual export logs track the export of data (personal data, community data, posts, etc.) by members or admins, including relevant metadata for compliance and operational auditing. The endpoint is used by adminUsers to inspect the details of a single export request, typically as part of compliance audits or legal data subject requests. Only adminUser roles are permitted to access this operation due to the high sensitivity of data exports.","description":"This API endpoint enables an authorized adminUser to fetch all recorded details for a single data export log, using the dataExportLogId path parameter. As defined in the community_platform_data_export_logs table, each export log includes information about the type of export (user data, community data, etc.), export format, user/admin requestor, status, timestamps, and associated metadata crucial for regulatory compliance and security audit trails.\n\nAccess is strictly limited to adminUser roles because data export activities may include sensitive user/member/admin data. The endpoint checks for the existence and non-soft-deleted status of the referenced export log record. If it is missing or soft-deleted, a not found error is returned.\n\nThis operation is generally used for compliance verification, security investigations, or legal reporting, and may be paired with list/search operations for complete audit coverage. Returned data includes all fields of the export log, with certain fields (e.g., status, request IP) redacted if required by business policy.","summary":"Retrieve detailed information for a specific data export log entry (community_platform_data_export_logs).","parameters":[{"name":"dataExportLogId","description":"Unique identifier of the data export log to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full export log record matched by the dataExportLogId path parameter, including all relevant compliance and audit metadata.","typeName":"ICommunityPlatformDataExportLog"},"authorizationType":null,"authorizationRole":"adminUser","name":"at","path":"/communityPlatform/adminUser/dataExportLogs/{dataExportLogId}","method":"get"}],"components":{"authorization":[{"name":"guestUser","description":"Unauthenticated visitors who can browse and search for posts, communities, and comments, but cannot post, comment, vote, join communities, or create sub-communities. Can register or sign in to gain further access.","kind":"guest"},{"name":"memberUser","description":"Authenticated users who can create posts and comments, vote, join or leave sub-communities, and create new sub-communities. Can edit or delete only their own posts or comments. Can browse, search, and participate fully except for system administration.","kind":"member"},{"name":"adminUser","description":"Administrators who can manage all users, sub-communities, and content on the platform. Capable of deleting any sub-community (and all associated posts), moderating all content, and performing system-level tasks such as user bans and site configuration. Also has all memberUser capabilities.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageICommunityPlatformCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformConfiguration.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformConfiguration.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSession"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformExternalIntegration.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformExternalIntegration.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformGuestUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformGuestUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformMemberUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformMemberUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformAdminUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformAdminUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformUserCredential.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformUserCredential.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityMembership.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityMembership.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityRule":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRule"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformRecentCommunity":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformRecentCommunity"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPostModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPostModerationLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommentVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommentVote"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSearchLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSearchLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformDataExportLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformDataExportLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ICommunityPlatformGuestUser.IJoin":{"type":"object","properties":{"session_signature":{"oneOf":[{"type":"string","description":"Optional opaque string for linking guest records to session tracking or analytics. Not a user identifier or PII. Used for metrics continuity across guest browsing sessions, if provided; may be null."},{"type":"null"}],"description":"Optional opaque string for linking guest records to session tracking or analytics. Not a user identifier or PII. Used for metrics continuity across guest browsing sessions, if provided; may be null."}},"required":[],"description":"Body schema for guest session registration. No personal data collected; only an optional opaque session_signature can be provided for anonymous relinking. This request enables analytics and session tracking for guest flows."},"ICommunityPlatformGuestUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Assigned guest user UUID. Anonymous, non-personal identity value for tracking a single browser or device in platform analytics. Matches id in the guestusers table."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this guest session was first recorded (ISO 8601). Required by business logic for analytics tracing and performance."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last activity on this guest session. Used for session expiration, re-linking, or analytics reviews."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp indicating when the guest session was (soft) deleted for analytics removal or GDPR compliance. Nullable; present only for deleted records."},{"type":"null"}],"description":"Timestamp indicating when the guest session was (soft) deleted for analytics removal or GDPR compliance. Nullable; present only for deleted records."},"session_signature":{"oneOf":[{"type":"string","description":"Opaque analytics or traceability signature. Used to reconcile guest sessions or trace unique device/browser identity for business logic/analytics. Never PII, may be null."},{"type":"null"}],"description":"Opaque analytics or traceability signature. Used to reconcile guest sessions or trace unique device/browser identity for business logic/analytics. Never PII, may be null."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","updated_at","token"],"description":"Response DTO for successful guest registration or token refresh. Contains assigned guest UUID and JWT token for temporary authorized guest session."},"ICommunityPlatformGuestUser.IRefresh":{"type":"object","properties":{"token":{"type":"string","description":"Current guest token (JWT string) to be refreshed. Must be a valid, non-revoked, and non-expired token issued for a guest user (not member/admin)."}},"required":["token"],"description":"Payload for requesting a guest token refresh. Only the existing, valid token must be supplied to obtain a new temporary session token."},"ICommunityPlatformMemberUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for account registration/login. Must be unique system-wide. Subject to format validation and business logic."},"password":{"type":"string","minLength":8,"maxLength":72,"description":"Password chosen by the user (plaintext over the wire; will be hashed backend). Must meet platform security policy for minimum length/complexity."},"display_name":{"oneOf":[{"type":"string","maxLength":32,"description":"Optional display name to be shown for user actions (posts/comments). If not provided or empty, will default to \"Anonymous\" as per business rules."},{"type":"null"}],"description":"Optional display name to be shown for user actions (posts/comments). If not provided or empty, will default to \"Anonymous\" as per business rules."}},"required":["email","password"],"description":"Payload for registration of a new member user. Collects minimal PII: required email and secure password, with optional display name. Email must be unique; password is never stored/returned as sent."},"ICommunityPlatformMemberUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Member user's UUID assigned at registration or authentication. Used as identity in all business operations and references."},"user_credential_id":{"type":"string","format":"uuid","description":"References credentials in community_platform_user_credentials.id. Immutable after creation."},"display_name":{"oneOf":[{"type":"string","maxLength":32,"description":"Display name for user, used for all posts/comments. May be null if unset, in which case frontend displays 'Anonymous'."},{"type":"null"}],"description":"Display name for user, used for all posts/comments. May be null if unset, in which case frontend displays 'Anonymous'."},"status":{"type":"string","description":"Account status value (e.g., 'active', 'suspended', etc.) as per business/platform rules. Represents whether the account is operable by user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this user account was created. ISO 8601 format; immutable."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated. ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if the account is active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","user_credential_id","status","created_at","updated_at","token"],"description":"Response data for authorized session after join, login, or token refresh. Includes member user identity, issued auth token set, and account status. Used for session management and UI personalization."},"ICommunityPlatformMemberUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email for login. Must match an existing registered user credential. Used for authentication as memberUser."},"password":{"type":"string","description":"Password for login. Plain text should only be sent client-side; backend expects hashed or securely transmitted password."}},"required":["email","password"],"description":"Request object for memberUser login. Used to authenticate an existing registered user. Email must match platform credentials, and password is required."},"ICommunityPlatformMemberUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token issued at previous authentication. Used to request new access/refresh token pair. Must be valid and not expired/revoked."}},"required":["refresh_token"],"description":"Request object for memberUser session refresh. Requires a valid refresh token to obtain new JWT tokens."},"ICommunityPlatformAdminUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for admin registration. Must be unique in the system and will be used for future admin logins."},"password":{"type":"string","description":"Password for admin authentication. Should be securely hashed; plain text is only used for client-side input."},"display_name":{"type":"string","maxLength":32,"description":"Optional display name for the admin user for UI identification. Maximum 32 characters."}},"required":["email","password"],"description":"Request object for adminUser registration (join). Requires email and password. Display name is optional, must be <=32 chars if provided."},"ICommunityPlatformAdminUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Admin user ID (UUID) returned upon successful authentication or registration."},"user_credential_id":{"type":"string","format":"uuid","description":"References admin credentials in community_platform_user_credentials.id. Immutable after creation."},"display_name":{"type":"string","maxLength":32,"description":"Optional admin display name for display in the UI, if set."},"status":{"type":"string","description":"Admin account status string, e.g., 'active', 'suspended', 'retired'. Used by permission systems."},"created_at":{"type":"string","format":"date-time","description":"Admin user creation timestamp in ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this admin user. ISO 8601."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp if the account is deleted, or null if still valid."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","user_credential_id","status","created_at","updated_at","token"],"description":"Response object for successful adminUser authentication (login/join/refresh). Includes user ID, issued token(s), and optionally display name."},"ICommunityPlatformAdminUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin login email address, must be registered to an adminUser."},"password":{"type":"string","description":"Password for admin login. Security policy determines transmission (hash/plaintext) and required format."}},"required":["email","password"],"description":"Request object for adminUser login. Authenticates an admin via email and password. Email must correspond to a registered admin credential."},"ICommunityPlatformAdminUser.IRefresh":{"type":"object","properties":{"token":{"type":"string","description":"The refresh token string issued as part of a previous session for token renewal.\n\nMust match a non-revoked, non-expired session in the system."}},"required":["token"],"description":"Input object for refreshing admin user session tokens.\n\nThis contains the refresh token required by the admin for JWT renewal. Token must match an active session record. Used for authentication flows."},"ICommunityPlatformCategory.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Optional name filter for category listing.\n\nThis is a case-insensitive string filter. Minimum 2 characters are required when using for keyword search; longer allowed for direct matches. Used in UI search and filter behaviors."},"description":{"type":"string","description":"Optional filter on description (tooltip/context), supports search with trigram acceleration.\n\nUsed to search for categories with certain description fragments."},"sortBy":{"type":"string","description":"Field used to determine sorting order (e.g., display_order, name, etc)."},"sortDir":{"oneOf":[{"const":"asc","description":"Sort order direction for results.\n\nCan be \"asc\" or \"desc\"; controls list sort logic in admin/user UIs."},{"const":"desc","description":"Sort order direction for results.\n\nCan be \"asc\" or \"desc\"; controls list sort logic in admin/user UIs."}],"description":"Sort order direction for results.\n\nCan be \"asc\" or \"desc\"; controls list sort logic in admin/user UIs."},"page":{"type":"integer","description":"Page number for paginated results. Minimum value is 1.","minimum":1},"limit":{"type":"integer","description":"Maximum records per returned page. Should follow platform-wide standards."}},"required":[],"description":"Request object for searching, sorting, and paginating category listings in admin/member UIs.\n\nAllows advanced filtering by name and description as well as paging controls and sort criteria."},"ICommunityPlatformCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the category (UUID, primary key).\n\nUsed as reference for lookup and assignment."},"name":{"type":"string","description":"Unique, case-insensitive name for the category.\n\nBusiness rule: must be 5–32 characters, a-zA-Z0-9-_ only. This field is immutable after creation. Used in UI selectors and community creation flows."},"display_order":{"type":"integer","description":"Display order for list sorting.\n\nInteger for ordering categories in menus and lists; must be unique/platform-ordered. Used for ranked display."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description/tooltip for UI and context (up to 200 characters).\n\nGives extra info to users in selectors, helps with search/findability; null allowed if not set."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of category creation (ISO8601 format).\n\nUsed for audit and backend diagnostics."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update (ISO8601 format).\n\nUpdates whenever category description or display_order is changed."}},"required":["id","name","display_order","created_at","updated_at"],"description":"Represents a single platform category for sub-community classification.\n\nCategories define the classification for all communities, including display order, name, and tooltip. Follows strict naming/ordering business rules as specified in schema and requirements. Used system-wide for category selection, search, and display."},"ICommunityPlatformCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique platform category name for the new record.\n\nBusiness rule: must be 5–32 characters using a-zA-Z0-9-_.\nThis field is system-unique, case-insensitive, and required for valid category insertion. Immutable after creation."},"display_order":{"type":"integer","description":"Display sort order value (integer > 0 recommended).\n\nDetermines ranked position of the category in UI selectors and business logic sorting. Must be unique among categories for predictable display."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description/tooltip, up to 200 characters, for UI and business context. Null allowed if empty."}},"required":["name","display_order"],"description":"Input for creating a new platform category via admin management interface.\n\nRequires valid name (unique, formatted), initial display order, and optional description for category context/tooltip."},"ICommunityPlatformCategory.IUpdate":{"type":"object","properties":{"display_order":{"type":"integer","description":"Updated display sort order for the category.\n\nMay be changed to re-rank category visibility in selectors—no effect on name."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"New description (up to 200 chars) for category tooltip/context. Null allowed if not provided."}},"required":[],"description":"Input object for updating an existing platform category's editable properties.\n\nAllows modification of display_order or description. Category name is immutable."},"ICommunityPlatformConfiguration.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"The requested page number for pagination. Optional; default is 1."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of records to return per page. Optional; defaults to system standard."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"updated_at"},{"const":"key"},{"const":"value"},{"type":"null"}],"description":"Field by which to sort results. Must be one of 'created_at', 'updated_at', 'key', or 'value'."},"sort_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting order direction, either 'asc' or 'desc'."},"key_query":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Substring or trigram search string to match within the key."},"description_query":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Substring search for description field."},"value_query":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Substring search for configuration values."},"date_from":{"oneOf":[{"type":"string","format":"date"},{"type":"null"}],"description":"Starting date for filtering configurations (inclusive). Format: YYYY-MM-DD."},"date_to":{"oneOf":[{"type":"string","format":"date"},{"type":"null"}],"description":"Ending date for filtering configurations (inclusive). Format: YYYY-MM-DD."}},"required":[],"description":"Query and paging criteria for searching platform configurations. Used for admin search panel—filters on key, description, value, and sortable fields."},"ICommunityPlatformConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key as UUID for the configuration record."},"key":{"type":"string","description":"Unique configuration parameter's key (e.g., 'max_post_length'). Required and indexed."},"value":{"type":"string","description":"Arbitrary configuration value. Can be JSON, string, or number as string."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human/machine description of this configuration parameter. Optional, max 200 characters."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration entry was created (ISO 8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last value or description update (ISO 8601, UTC)."}},"required":["id","key","value","created_at","updated_at"],"description":"Describes a configuration parameter for the community platform. Each configuration is a key/value pair controlling system behavior. Includes display, validation, and timestamp fields. Key must be unique. Tracks creation and update for audit purposes."},"ICommunityPlatformConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Key for the configuration parameter. Required, unique."},"value":{"type":"string","description":"Parameter value, as required by application business logic. May be arbitrarily structured (JSON, string, number as string, etc)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable description, max 200 chars."}},"required":["key","value"],"description":"Input for creation of a new configuration parameter. Must provide key (unique) and value (string/JSON/number as string). Description is optional."},"ICommunityPlatformConfiguration.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"Updated configuration value, format determined by config logic."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated description, up to 200 chars."}},"required":[],"description":"Update payload for configuration parameter; only value and description may be edited. Key and ID are immutable for updates."},"ICommunityPlatformAuditLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"The requested page number for pagination. Optional."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of audit log entries to return per page."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"event_type"},{"type":"null"}],"description":"Sorting field: 'created_at' or 'event_type'."},"sort_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting direction: ascending ('asc') or descending ('desc')."},"event_type_query":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search for event type (e.g., 'config_change', 'session_login', etc.)."},"actor_memberuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by acting memberUser ID (UUID, optional)."},"actor_adminuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Search for specific adminUser as event actor (UUID)."},"date_from":{"oneOf":[{"type":"string","format":"date"},{"type":"null"}],"description":"Start date for filtering audit logs (YYYY-MM-DD)."},"date_to":{"oneOf":[{"type":"string","format":"date"},{"type":"null"}],"description":"End date for filtering audit logs (YYYY-MM-DD)."},"ip_address_query":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter logs matching a given IP address substring (IPv4 or IPv6)."},"event_detail_query":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text or substring search for event detail content."}},"required":[],"description":"Search criteria for community platform audit logs. Allows filtering by event type, actor, timestamps, IP, and event detail string with pagination and sorting."},"ICommunityPlatformAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the audit log entry. Auto-generated UUID corresponding to the primary key in the audit log table."},"actor_memberuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional ID of the member user who initiated the action, if applicable. Nullable."},"actor_adminuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional ID of the admin user who initiated the action, if applicable. Nullable."},"event_type":{"type":"string","description":"Type of the audit event (e.g., 'config_change', 'session_login', 'community_delete'). Represents the logical action audited for compliance review and business logic tracking."},"event_detail":{"type":"string","description":"A detailed string (or JSON) describing the event context, including any relevant data or parameters changed. Intended for audit review and security analysis. Maximum length is 1000 characters."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Original IP address from which the event occurred. May be null (e.g., for system events). Used for tracing and auditing source of sensitive actions or logins."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the log entry was created. Automatically recorded by the system when the event happened. Immutable after creation."}},"required":["id","event_type","event_detail","created_at"],"description":"Platform-wide audit log entry representing sensitive actions, administrative operations, configuration or permission changes, login events, or other system-critical activities. Used for compliance review, incident investigation, and overall security monitoring as required by business logic and regulatory policies."},"ICommunityPlatformSession.IRequest":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Optional user identifier for filtering sessions by owner. Allows querying sessions created for a specific user account."},"token":{"type":"string","description":"Optional session token for direct lookup or filtering. Used for searching by session reference for audit or traceability."},"status":{"type":"string","description":"Optional session status for filtering (e.g., 'active', 'revoked', etc.). Enables querying by state or business logic status label."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number to retrieve. Defaults to 1 if omitted."},"limit":{"type":"integer","minimum":1,"description":"Pagination: number of results per page. Defaults to system or application standard if omitted."}},"required":[],"description":"Request type for searching and filtering platform sessions. Includes filters for user, token, status, and standard pagination/query params. Used by admin flows and analytics dashboards for session management and security reviews."},"ICommunityPlatformSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this session (primary key in the sessions table)."},"user_id":{"type":"string","format":"uuid","description":"Reference to the user who owns this session. Represents a member/admin user account with an active or expired session."},"token":{"type":"string","description":"The secure (hashed or opaque) session token. Used for session validation and server-side authentication. Unique per session, never sent as plain text in plain responses."},"issued_at":{"type":"string","format":"date-time","description":"Timestamp at which this session was issued. Used for session lifespan/tracking."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the session is scheduled to expire. Used to manage user login persistence."},"device_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional device/browser information for device recognition, user agent analytics, and suspicious activity detection. May contain a user agent string, structured JSON, or be null."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional login/session creation IP address. Used for security audit, fraud detection, or account compromise investigation."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session was revoked (manually or by admin), if applicable. Null if still valid, set if forcibly ended before expiration."},"created_at":{"type":"string","format":"date-time","description":"Timestamp session database row was created. Typically matches issued_at but may differ for retroactive session imports or audit corrections."}},"required":["id","user_id","token","issued_at","expires_at","created_at"],"description":"Describes a user authentication session and its tracking metadata. Each session token provides access persistence and auditing for a single device or browser context. Used for login, security auditing, device analytics, and session validation."},"ICommunityPlatformSession.IUpdate":{"type":"object","properties":{"device_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"If supplied, device/browser information to update for this session. Used for correcting/annotating analytics or security tracking."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If provided, timestamp to set the session as revoked (manual logout or forced session end). Null resets to valid; a timestamp marks the session as ended."}},"required":[],"description":"Editable fields for a session record. Allows updating of device info and revocation time. Does not allow modifying immutable fields (token, user_id, issued_at, expires_at, created_at). Used in administrative session management flows."},"ICommunityPlatformExternalIntegration.IRequest":{"type":"object","properties":{"integration_name":{"type":"string","description":"Filter for integration records by name (case-insensitive). Used for searching or partial match operations."},"provider_url":{"type":"string","description":"Query parameter for searching by provider URL or domain, supports substring filtering for integration attribution."},"status":{"type":"string","description":"Filter by the current operational status ('enabled', 'disabled', 'pending', etc.). Returns only integrations in the specified state."},"created_at_from":{"type":"string","format":"date-time","description":"Inclusive lower bound for filtering records created at or after this timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Inclusive upper bound for filtering records created before or at this timestamp."},"updated_at_from":{"type":"string","format":"date-time","description":"Lower bound for filtering integrations updated on or after this timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Upper bound for filtering integrations updated before or at this timestamp."},"page":{"type":"integer","minimum":1,"description":"Page number for result pagination. Defaults to 1 if omitted."},"limit":{"type":"integer","minimum":1,"description":"Number of results per page for pagination. Defaults to standard page size if not supplied."}},"required":[],"description":"Request type for searching and paginating platform external integrations. Supports filters by name, provider, status, creation/update timestamps, and pagination controls. Used by administrative management tools to audit, create, or maintain integrations."},"ICommunityPlatformExternalIntegration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the external integration. This value is generated by the system and is used for referencing the integration in all API operations and audit logs.\n\nRead-only property, never required for creation but always present in results. Sourced from the Prisma model's primary key."},"integration_name":{"type":"string","description":"Unique name for the external integration (e.g., 'GoogleOAuth', 'SendGrid', 'Webhook-Analytics'). Must remain unique per system constraints and is case-insensitive. Once set, considered immutable for business/audit integrity.\n\nBusiness rule: uniqueness is enforced at the database/index layer; duplicate names are not permitted."},"provider_url":{"oneOf":[{"type":"string","description":"The base URL for the third-party integration provider, such as the OAuth token endpoint or webhook receiver. Optional; may be null if not required for a system-internal service. Up to 80000 chars allowed per Prisma column constraints."},{"type":"null"}],"description":"The base URL for the third-party integration provider, such as the OAuth token endpoint or webhook receiver. Optional; may be null if not required for a system-internal service. Up to 80000 chars allowed per Prisma column constraints."},"status":{"type":"string","description":"Operational status of the integration. Possible values typically include: enabled, disabled, error, and pending_setup.\n\nThe application logic and admin interfaces should restrict changes to this field according to business rules."},"config_json":{"type":"string","description":"Arbitrary JSON string holding configuration data/secrets for the integration. Only accessible to admin users due to sensitivity. The schema does not enforce data structure—conforms to the external system's requirements. Example: '{\"client_id\":\"abc\",\"secret\":\"xyz\"}'"},"last_successful_sync_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of the last successful event or synchronization with the third-party integration (ISO 8601 format). Optional; null if syncs have never succeeded."},{"type":"null"}],"description":"Timestamp of the last successful event or synchronization with the third-party integration (ISO 8601 format). Optional; null if syncs have never succeeded."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this integration record was created (ISO 8601). Always set by the system at creation time. Used for audit and admin dashboard purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this integration (ISO 8601). Updated with every change for tracking/audit compliance."}},"required":["id","integration_name","status","config_json","created_at","updated_at"],"description":"Represents a registered external integration (such as an OAuth provider, webhook, analytics endpoint, or other third-party service).\n\nThis entity contains all configuration and audit data required to integrate the platform with external/partner services. It is managed only by admin users and includes fields for operational status, connectivity, custom config JSON, and audit metadata. All fields correspond directly to the Prisma model with the same name. Sensitive data—such as credentials or secret keys—should only be surfaced in the config_json to authorized admin users, and never exposed via public or member-level APIs.\n\nFor full business/technical context, see the system's Prisma model and documented integration business logic."},"ICommunityPlatformExternalIntegration.ICreate":{"type":"object","properties":{"integration_name":{"type":"string","description":"Unique name (string) for the new integration. Must be provided at creation time and is subject to uniqueness constraints across all integrations. Example: 'GoogleOAuth', 'Webhook-Analytics'."},"provider_url":{"oneOf":[{"type":"string","description":"Provider endpoints (URLs) as required by integration business logic. Nullable for integrations that do not call out to external URLs."},{"type":"null"}],"description":"Provider endpoints (URLs) as required by integration business logic. Nullable for integrations that do not call out to external URLs."},"status":{"type":"string","description":"Initial operational status. Common values: enabled, disabled, error, pending_setup. This determines whether the integration is active in backend workflows."},"config_json":{"type":"string","description":"JSON string storing integration configuration details, credentials, or secrets. Sensitive—must follow admin/security guidelines for storage."},"last_successful_sync_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for the last successful handshake or event with the provider (nullable). Leave null if never synced."},{"type":"null"}],"description":"Timestamp for the last successful handshake or event with the provider (nullable). Leave null if never synced."}},"required":["integration_name","status","config_json"],"description":"Request DTO for creating a new external integration. Follows server-side validation rules for unique naming, security of configuration JSON, and business status requirements. All fields align with the Prisma external integrations model. Used exclusively by admin users to onboard new providers or services."},"ICommunityPlatformExternalIntegration.IUpdate":{"type":"object","properties":{"provider_url":{"oneOf":[{"type":"string","description":"Mutable field for changing provider endpoint/URL. Can be null for integrations that do not use a specific URL."},{"type":"null"}],"description":"Mutable field for changing provider endpoint/URL. Can be null for integrations that do not use a specific URL."},"status":{"type":"string","description":"Mutable operational status of the integration (enabled, disabled, error, etc.). Must match business logic constraints."},"config_json":{"type":"string","description":"Mutable JSON string representing reconfiguration of credentials, endpoints, or integration state."},"last_successful_sync_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for the most recent provider sync, used for admin audit and health checks (optional/null)."},{"type":"null"}],"description":"Timestamp for the most recent provider sync, used for admin audit and health checks (optional/null)."}},"required":[],"description":"Request DTO for updating mutable fields of an external integration. Admin-only access; supports changes to operational status, configuration data, and sync metadata. All changes are tracked via audit logs and updated_at field at the entity level."},"ICommunityPlatformGuestUser.IRequest":{"type":"object","properties":{"session_signature":{"oneOf":[{"type":"string","description":"Opaque session signature for analytic correlation, traceability, or guest re-linking. Used in business logic for non-identifying analytics ."},{"type":"null"}],"description":"Opaque session signature for analytic correlation, traceability, or guest re-linking. Used in business logic for non-identifying analytics ."},"page":{"type":"integer","format":"int32","description":"Pagination: page number for guest user search/listing analytics."},"limit":{"type":"integer","format":"int32","description":"Pagination: maximum number of records to return in guest user analytics search."},"sort":{"type":"string","description":"Sort key for guest user listing queries (created_at, updated_at, etc.)."},"order":{"oneOf":[{"const":"asc","description":"Sort direction ('asc' or 'desc') for sorting guest user sessions."},{"const":"desc","description":"Sort direction ('asc' or 'desc') for sorting guest user sessions."}],"description":"Sort direction ('asc' or 'desc') for sorting guest user sessions."},"created_from":{"type":"string","format":"date-time","description":"Start of created_at date range for filtering guest users (ISO 8601). Optional filter."},"created_to":{"type":"string","format":"date-time","description":"End of created_at date range for filtering guest users (ISO 8601). Optional filter."},"updated_from":{"type":"string","format":"date-time","description":"Start of updated_at date range for searching guest sessions (ISO 8601)."},"updated_to":{"type":"string","format":"date-time","description":"End of updated_at date range for searching guest sessions (ISO 8601)."}},"required":[],"description":"Request body for searching, filtering, and paginating guest user sessions (for analytics or audit). Used by admin dashboard or analytics pipelines. All fields are optional filters/pagination cues corresponding to the Prisma guest user model."},"ICommunityPlatformGuestUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the guest user session (UUID). Used for identification in analytics tables and system traceability. Not linked to any PII. Read-only."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this guest session was first recorded (ISO 8601). Required by business logic for analytics tracing and performance."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last activity on this guest session. Used for session expiration, re-linking, or analytics reviews."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp indicating when the guest session was (soft) deleted for analytics removal or GDPR compliance. Nullable; present only for deleted records."},{"type":"null"}],"description":"Timestamp indicating when the guest session was (soft) deleted for analytics removal or GDPR compliance. Nullable; present only for deleted records."},"session_signature":{"oneOf":[{"type":"string","description":"Opaque analytics or traceability signature. Used to reconcile guest sessions or trace unique device/browser identity for business logic/analytics. Never PII, may be null."},{"type":"null"}],"description":"Opaque analytics or traceability signature. Used to reconcile guest sessions or trace unique device/browser identity for business logic/analytics. Never PII, may be null."}},"required":["id","created_at","updated_at"],"description":"Represents an unauthenticated guest user session, as tracked by the platform. Used for analytics, system business logic, and session-based feature flows. There is no PII in this model—only non-identifying keys and standard audit fields. Mapped directly to the Prisma guest users model; only system actors (admin, analytics pipeline) interact with this entity."},"ICommunityPlatformMemberUser.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination. Optional; must be >= 1 if provided."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page. Optional; must be >= 1 if provided."},"display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Display name of the member user to filter by. Optional; partial matches allowed. Maximum 32 characters."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status string to filter member users by account status (e.g., 'active', 'suspended'). Optional."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting string, e.g., 'created_at desc', 'display_name asc'. Optional."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter to users created after this ISO 8601 timestamp (inclusive). Optional."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter to users created before this ISO 8601 timestamp (inclusive). Optional."}},"required":[],"description":"Filter, search, pagination, and sorting criteria for searching and listing member users as supported by admin interfaces and personal management flows. All fields are optional."},"ICommunityPlatformMemberUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this member user, as per community_platform_memberusers.id. Immutable primary key."},"user_credential_id":{"type":"string","format":"uuid","description":"References credentials in community_platform_user_credentials.id. Immutable after creation."},"display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Display name of the user (0–32 characters, optional). If null or empty, display as 'Anonymous' in frontend."},"status":{"type":"string","description":"Status of the user account, e.g., 'active', 'suspended', 'pending_deletion'. Used for business logic enforcement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this user account was created. ISO 8601 format; immutable."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated. ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if the account is active."}},"required":["id","user_credential_id","status","created_at","updated_at"],"description":"Member user entity for platform. Represents all registered users able to create posts, comment, vote, join/leave communities. All fields reflect the current status as persisted in the DB (community_platform_memberusers). Sensitive internal references (e.g. credential links) are present but business logic ensures privacy in web interfaces. See field-level descriptions for precision."},"ICommunityPlatformAdminUser.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination. Optional; must be >=1 if set."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records to return per page. Optional; must be >=1 if set."},"display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Display name of the admin user to filter on. Optional, maximum 32 chars."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status string to filter admin users by (e.g., 'active', 'suspended'). Optional."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting order string, e.g., 'created_at desc', 'display_name asc'. Optional."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter admin users created after this ISO 8601 timestamp. Optional."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter admin users created before this ISO 8601 timestamp. Optional."}},"required":[],"description":"Search, filter, pagination, and ordering request DTO for admin user records as available in privileged admin management UIs and audit tools. All fields are optional."},"ICommunityPlatformAdminUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this admin user, as per community_platform_adminusers.id. Primary key, immutable."},"user_credential_id":{"type":"string","format":"uuid","description":"References admin credentials in community_platform_user_credentials.id. Immutable after creation."},"display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Admin display name (optional, 0-32 chars). Null or empty means no display name."},"status":{"type":"string","description":"Admin account status string, e.g., 'active', 'suspended', 'retired'. Used by permission systems."},"created_at":{"type":"string","format":"date-time","description":"Admin user creation timestamp in ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this admin user. ISO 8601."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp if the account is deleted, or null if still valid."}},"required":["id","user_credential_id","status","created_at","updated_at"],"description":"Admin user entity for platform. Accounts with site moderation and configuration power. Linked to credentials record. All fields are directly mapped to community_platform_adminusers. Internal/immutable references present for full business logic. See field-level comments for details."},"ICommunityPlatformUserCredential.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination. Optional; must be >=1 if provided."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page. Optional; must be >=1 if provided."},"email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Email address to filter credentials by. Optional, must match unique business rule if set."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting string, e.g., 'created_at desc'. Optional."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter credentials created after this ISO 8601 timestamp (inclusive). Optional."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter credentials created before this ISO 8601 timestamp (inclusive). Optional."}},"required":[],"description":"Advanced finding, pagination, and sorting request type for platform user credentials. Used by admin interfaces and audit."},"ICommunityPlatformUserCredential":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the user credential record in the system. Referenced as a foreign key in both member and admin user tables."},"email":{"type":"string","format":"email","description":"Unique email address for authentication. Used for login and password resets. Case-insensitive match is enforced by business logic and schema constraints."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when credential was created (ISO 8601). Used for audit trail."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the credentials were last changed (including resets). ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when credentials were deleted/invalidated. Null if still valid. Used for soft deletion and business retention rules."}},"required":["id","email","created_at","updated_at"],"description":"Represents an authentication credential for both member and admin users. Stores unique email for login correspondence, handles lifecycle audit via creation, update, and soft delete timestamps. Does NOT expose password_hash or any sensitive hash field. Linked to one member or admin user by 1:1 relation. Referenced in all authentication and account management APIs.\n\nBusiness logic: Creds are never returned directly to non-admin or outside API consumers. Email is the primary lookup key and subject to uniqueness and case-insensitivity requirements. Password hashes and security fields are excluded for platform security."},"ICommunityPlatformCommunity.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Optional filter by (case-insensitive) sub-community name. Business logic requires name to conform to unique, 5–32 alphanumeric, hyphen/underscore constraints."},"category_id":{"type":"string","format":"uuid","description":"Optional filter by platform category. Must correspond to 'community_platform_categories.id', guarantees search by classification."},"owner_id":{"type":"string","format":"uuid","description":"Optional filter by immutable owner user (creator). References member user id."},"sort_by":{"oneOf":[{"const":"newest","description":"Order of results. 'newest' = most recently created first; 'top' = by highest score/engagement. Ties are resolved by created_at, then id."},{"const":"top","description":"Order of results. 'newest' = most recently created first; 'top' = by highest score/engagement. Ties are resolved by created_at, then id."}],"description":"Order of results. 'newest' = most recently created first; 'top' = by highest score/engagement. Ties are resolved by created_at, then id."},"page":{"type":"integer","description":"Page index for paginated results. Usually 1-based. Enforces pagination standardization for requests."},"limit":{"type":"integer","description":"Max number of sub-communities per page. Capped at platform maximum (typically 20)."}},"required":[],"description":"Request/search body for listing community_platform_communities. Allows filtering by name, category, owner, sorting order, pagination control, and is suitable for both public and admin/member access. Does NOT accept system-generated or sensitive fields. Used for Explore, home feed construction, or backend admin grids."},"ICommunityPlatformCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the community instance. Unique, immutable identifier across platform tables. Used in all community API operations."},"owner_id":{"type":"string","format":"uuid","description":"ID of the member user who created (owns) the community. Immutable after creation. Used for auditing ownership and enforcing update/delete restrictions. References 'community_platform_memberusers.id'."},"category_id":{"type":"string","format":"uuid","description":"ID of the platform-wide community category. Must correspond to 'community_platform_categories.id' and is enforced for classification/search logic."},"name":{"type":"string","description":"Unique, immutable, case-insensitive name of the community. 5–32 characters, a-z, A-Z, 0-9, hyphen, underscore. Used as public handle and identifier. Not editable after creation."},"description":{"type":"string","description":"Optional plain-text community description. Up to 200 characters. Used for sidebar/info box display and search index. Editable by owner."},"logo_uri":{"type":"string","description":"Optional URI for community logo/image asset. Usually a full URL or CDN-ref path. Not required, editable by owner."},"banner_uri":{"type":"string","description":"Optional URI for community banner image asset. Usually displayed in community header. Editable by owner, not required."},"created_at":{"type":"string","format":"date-time","description":"Timestamp this community was created. ISO 8601 format. Used in sorting (newest)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last community metadata update. Used for auditing and UI logic."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, or null if active. When set, indicates community is removed from public feeds/lists but retained for compliance or admin restoration."}},"required":["id","owner_id","category_id","name","created_at","updated_at"],"description":"Represents a sub-community within the platform. Each community has an immutable unique id and name, categorization reference, ownership (member user id), and optional metadata such as description, logo/banner URIs. Provides all business context necessary for navigation, post association, and home/community feeds. Soft deletion is supported for compliance and legal requirements; deleted communities are hidden from feeds/UI but may be retained by platform admin.\n\nBusiness logic: Only owners may modify description, logo, or banner URI. Name and category are not mutable after creation. Relation to rules, recent communities, memberships is handled by subordinate endpoints and not included directly in this type."},"ICommunityPlatformCommunity.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique, immutable case-insensitive public name for the community. Must be 5–32 characters; only alphanumeric, hyphen/underscore allowed. Uniqueness and formatting enforced by the business logic on creation. Not editable after creation."},"category_id":{"type":"string","format":"uuid","description":"Target category for this community. Must correspond to an existing 'community_platform_categories.id'. Required at creation, immutable after. Key for classification and search UI options."},"description":{"type":"string","description":"Optional plain-text description for the community (up to 200 chars). Editable by owner after creation."},"logo_uri":{"type":"string","description":"Optional logo/image URI (CDN or absolute URL). Used for sidebar/index card display."},"banner_uri":{"type":"string","description":"Optional banner/image URI for community header visual."}},"required":["name","category_id"],"description":"Payload for creating a new sub-community. Requires unique name and valid existing category reference. Description, logo, and banner URIs are optional fields. Community creation API enforces all formatting, uniqueness, and business constraints. Ownership is assigned from authentication and never specified client-side. Rules and member count are managed in other tables."},"ICommunityPlatformCommunity.IUpdate":{"type":"object","properties":{"description":{"type":"string","description":"(Optional) Editable description for the community. Plain-text only; up to 200 chars."},"logo_uri":{"type":"string","description":"(Optional) New logo/image URI for the community. If omitted, previous value is retained."},"banner_uri":{"type":"string","description":"(Optional) Banner URI for the community header. Editable by owner."}},"required":[],"description":"Update DTO for community metadata. Editable fields include description, logo_uri, and banner_uri. Ownership, name, and category_id cannot be changed after creation. API logic enforces ownership and business rules for mutability of each field. Used in memberUser and adminUser update operations for communities."},"ICommunityPlatformCommunityMembership.IRequest":{"type":"object","properties":{"memberuser_id":{"type":"string","format":"uuid","description":"Optional filter: Member user's UUID. When provided, restricts the search to memberships belonging only to this user. Used for personal membership queries and admin dashboards."},"joined_at_from":{"type":"string","format":"date-time","description":"Optional filter: Include only memberships with 'joined_at' greater than or equal to this timestamp. Used for time range filtering in queries."},"joined_at_to":{"type":"string","format":"date-time","description":"Optional filter: Include only memberships with 'joined_at' less than or equal to this timestamp."},"page":{"type":"integer","description":"Optional pagination: 1-based page number for result pagination."},"limit":{"type":"integer","description":"Optional maximum number of records to return in a single page of results. Typical defaults are 20 or as defined by platform standards."}},"required":[],"description":"Search/filter request for paginating or filtering community memberships. Each property provides criteria for finding memberships matching specific users or time intervals. Used in admin panels, user profile history, or analytics views."},"ICommunityPlatformCommunityMembership":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this membership record. Generated by the system when a user joins a community."},"community_id":{"type":"string","format":"uuid","description":"ID of the community this membership belongs to. References 'community_platform_communities.id'. Determines which community the user has joined."},"memberuser_id":{"type":"string","format":"uuid","description":"ID of the member user associated with this membership. References 'community_platform_memberusers.id'. Identifies the user who is a member of the community."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp reflecting when the user joined the community. Used for recency ranking, analytics, and business logic."}},"required":["id","community_id","memberuser_id","joined_at"],"description":"Membership record representing a user's participation in a specific community. Relates to join/leave flows, analytics, and feed personalization."},"ICommunityPlatformCommunityMembership.ICreate":{"type":"object","properties":{},"required":[],"description":"Request to create a membership record (join a community). No fields are accepted in the request body because the authenticated user is determined from the session context, not provided by the client. Creation will fail if the user is already a member."},"ICommunityPlatformCommunityMembership.IUpdate":{"type":"object","properties":{"joined_at":{"type":"string","format":"date-time","description":"The new timestamp to update the 'joined_at' value for this membership. Used to correct or reassign join time for audit/analytics purposes. Business rules restrict updating only to admins or the owner."}},"required":[],"description":"Update request for a membership record. Only the 'joined_at' field is mutable for audit- or correction-related updates. Membership and community IDs are immutable."},"ICommunityPlatformCommunityRule.IRequest":{"type":"object","properties":{"rule_text":{"type":"string","description":"Optional search filter for matching rule content. Returns only rules whose rule_text includes or matches this value."},"rule_index":{"type":"integer","description":"Optional search filter for matching the exact rule order/index within a community's rule set."},"page":{"type":"integer","description":"Optional 1-based page number for pagination of rule results."},"limit":{"type":"integer","description":"Optional maximum page size (number of rules per page)."}},"required":[],"description":"Request type for searching or paginating rules in a community, supporting filters by text, index, or paging. Used by owners for managing community guidelines and by UI for rules search features."},"ICommunityPlatformCommunityRule":{"type":"object","description":"A single community rule entity, representing one numbered rule within a sub-community.\n\nCorresponds to a row in the community_platform_community_rules table. Each rule includes its UUID, associated community, sequential index (rule_index), the rule's text (business constraint: max 100 characters), and creation timestamp.\n\nRules are always attached to a specific community and used for display, moderation, and business logic. The rule_index determines presentation order (enforced per-community). The rule_text field is application-validated for plain text and length enforcement. All fields match the original Prisma schema and its index/consistency constraints.","properties":{"id":{"type":"string","format":"uuid","description":"UUID that serves as the primary key for the rule, matching the `id` column in the schema. Uniquely identifies the rule for updates/deletion. Format: RFC4122 UUID."},"community_id":{"type":"string","format":"uuid","description":"UUID of the parent community that owns this rule, as in the `community_id` column. Business rule: required for attachment, not user-editable post-creation."},"rule_index":{"type":"integer","description":"Order of the rule in the community (starting at 1). Business logic enforces a maximum of 10 rules per community. Used for display numbering."},"rule_text":{"type":"string","maxLength":100,"description":"Text content of the community rule, plain-text only, maximum 100 characters per business rule. Used in info boxes and moderation logic."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 UTC timestamp for when the rule record was created, as per the `created_at` column in the schema. Used for audit and ordering."}},"required":["id","community_id","rule_index","rule_text","created_at"]},"ICommunityPlatformCommunityRule.ICreate":{"type":"object","description":"DTO for creating a new community rule associated with a community. Requires only the rule's text content.\n\nCorresponds to the `rule_text` input when inserting into community_platform_community_rules. Index/order and association are handled automatically. Business validation restricts rule_text to plain text (max 100 characters), with length enforced by platform logic.\n\nAdditional logic prevents exceeding per-community rule limits (max 10).","properties":{"rule_text":{"type":"string","maxLength":100,"description":"Plain-text content for the new rule (max 100 chars). Cannot be empty; length is validated on creation."}},"required":["rule_text"]},"ICommunityPlatformCommunityRule.IUpdate":{"type":"object","description":"DTO for updating the content of an existing community rule. Allows only the rule_text field (cannot edit index or association).\n\nPartial update: business logic and schema allow only the text to be modified. Length constraint (max 100 chars, plain text) enforced. Used by PATCH/PUT endpoints for changing rule content after creation. Index and ownership remain unchanged.","properties":{"rule_text":{"type":"string","maxLength":100,"description":"Textual content for the rule after update (max 100 characters per business rule). Optional for PATCH/PUT semantics."}},"required":[]},"ICommunityPlatformRecentCommunity.IRequest":{"type":"object","description":"Request DTO for retrieving or searching recent community navigation history for the authenticated member user. Used to support feed personalization, sidebar navigation, and context menus.\n\nSupports pagination (page, limit), and optionally filter or sort parameters for future UX expansion. Only the authenticated user can access or modify their own recent community navigation list. Maps directly to retrieval flows on the community_platform_recent_communities table.","properties":{"page":{"oneOf":[{"type":"integer","description":"Optional 1-based page number for pagination, as per standard API conventions."},{"type":"null"}],"description":"Optional 1-based page number for pagination, as per standard API conventions."},"limit":{"oneOf":[{"type":"integer","description":"Maximum records to return per page (default or forced 5)."},{"type":"null"}],"description":"Maximum records to return per page (default or forced 5)."},"sort":{"type":"string","description":"Optional sort field (e.g., 'recent_rank', 'last_activity_at'). May be ignored in platform business logic for now."},"filter":{"type":"string","description":"Optional filter string for searching within recent communities (future extensibility; may be ignored)."}},"required":[]},"ICommunityPlatformRecentCommunity":{"type":"object","description":"Comprehensive representation of a single recent community navigation entry for a member user.\n\nReflects a row in community_platform_recent_communities table, mapping a user's last navigation to a particular community. Includes the navigation's unique id, IDs for both the member user and the community, rank/order (recent_rank: max 5 per user, smaller = more recent), and the timestamp for last navigation (last_activity_at).\n\nUsed to power sidebars, home context personalization, and historical/back navigation. Business logic ensures only one entry per (memberuser, community), 5 max per user, ordered by recent_rank.","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID for the recent community navigation entry (row id). Used for updates and deletion. Primary key from the schema."},"memberuser_id":{"type":"string","format":"uuid","description":"UUID of the member user who owns this recent navigation record. Maps to memberuser_id in the schema. Used for access control: only the owner can access/update/delete."},"community_id":{"type":"string","format":"uuid","description":"UUID of the community visited (recently navigated to). Maps to community_id in the schema. Powers feed/context behaviors."},"recent_rank":{"type":"integer","description":"Order/rank of this entry for the user (1 is most recent, max 5 per user, re-ordered after insertions/deletions)."},"last_activity_at":{"type":"string","format":"date-time","description":"ISO8601 UTC timestamp when this community was last navigated to by the user. Directly drives context menus and home personalization."}},"required":["id","memberuser_id","community_id","recent_rank","last_activity_at"]},"ICommunityPlatformRecentCommunity.ICreate":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the community to be marked as recently visited by the current member user. This value must reference an existing community_platform_communities.id. Set by the client. Member user ID is inferred from authentication context, never supplied directly in the request. Recency ordering and last activity timestamps are managed by the server."}},"required":["community_id"],"description":"Parameters required for creating a recent community navigation record for a member user.\n\nMaps directly to recent community addition, linking the authenticated user and the selected community. Only the community_id is provided by the client; all other fields (user, recency rank, timestamps) are determined by the backend. Used by UI to add communities to the recent list upon user activity without exposing ownership fields in requests.\n"},"ICommunityPlatformRecentCommunity.IUpdate":{"type":"object","properties":{"recent_rank":{"type":"integer","description":"Recency order for this community navigation entry, lower numbers are more recently visited (1-5). Optional, as system manages rank in most flows."},"last_activity_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, e.g., 2025-09-09T18:10:41.767Z) of the last interaction the user had with the community. If omitted, defaults to current time. Usually managed by the system, but modifiable for analytic or corrective scenarios."}},"required":[],"description":"Payload for updating a recent community navigation record. Only mutable fields—recency rank and last activity time—may be set. Ownership and basic linking fields cannot be edited. Typically used by system logic or analytics flows to maintain navigation order and context."},"ICommunityPlatformPost.IRequest":{"type":"object","properties":{"community_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Optional filter: List of community UUIDs. Only posts from these communities are returned when specified. Empty or omitted means no filter."},"author_user_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Optional filter: List of author user UUIDs (member or admin). Limits search to those authors. Omitted or empty = any author."},"keyword":{"type":"string","description":"Optional search term for matching post titles or bodies. Must be at least 2 characters if present. Used for feed search."},"sort_order":{"oneOf":[{"const":"newest","description":"Sorting mode for results. 'newest' = most recent first, 'top' = highest score (upvotes - downvotes). Default is 'newest'."},{"const":"top","description":"Sorting mode for results. 'newest' = most recent first, 'top' = highest score (upvotes - downvotes). Default is 'newest'."}],"description":"Sorting mode for results. 'newest' = most recent first, 'top' = highest score (upvotes - downvotes). Default is 'newest'."},"page":{"type":"integer","description":"The page number of results to fetch. Default behavior is 1 if omitted. Used for feed pagination."},"limit":{"type":"integer","description":"Maximum number of posts to return per page. Standard is 20 by business logic. Should not exceed 100."}},"required":[],"description":"Search and filter criteria for retrieving a paginated list of posts based on a combination of community, author, keyword, and sort order. Used throughout UI for main feed, search, and exploration flows. All fields are optional; omitting a field removes that filter. Pagination is handled by page/limit."},"ICommunityPlatformPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post (UUID). Assigned by the database."},"community_platform_community_id":{"type":"string","format":"uuid","description":"The UUID of the community containing this post. References community_platform_communities.id. Immutable for each post."},"author_memberuser_id":{"type":"string","format":"uuid","description":"ID of the member user who wrote the post, if authored by a regular user. Only one of author_memberuser_id or author_adminuser_id will be set for any post."},"author_adminuser_id":{"type":"string","format":"uuid","description":"ID of the admin user who wrote the post, if applicable. Only one of author_memberuser_id or author_adminuser_id is set per post."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Title of the post. Required on creation. Must be 5-120 characters, plain text. Used in main feed, search, and detail views."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Content body of the post. Plain text with line breaks. Required, must be 10-10,000 characters. Executable scripts/code not allowed."},"author_display_name":{"type":"string","maxLength":32,"description":"Optional display name for the author, up to 32 characters. If omitted or empty, 'Anonymous' is displayed according to platform rules."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp for when the post was created. Managed by backend only."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp for last update to post. Always set on creation, modified on edits."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp for soft deletion if applicable. Null or omitted means active. If set, post is not shown in feeds/search results."}},"required":["id","community_platform_community_id","title","body","created_at","updated_at"],"description":"Represents the main data structure for a post (thread, topic, etc.) in the community platform. All core fields are present including author (member or admin), immutable community reference, title, body, and audit timestamps. Soft deletion controlled by deleted_at field. When author is a member or admin, the appropriate ID is set; if both are null, post is invalid (invariant enforced by business logic). Display name is optional and resolves to 'Anonymous' if empty. Used in detail pages, post edit/update flows, and search/list results. Never exposes sensitive fields or internal-only audit information."},"ICommunityPlatformPost.ICreate":{"type":"object","properties":{"community_platform_community_id":{"type":"string","format":"uuid","description":"The UUID of the target community in which to create this post. Must reference an existing community_platform_communities.id. Required. Chosen by the user via UI selectors."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Title for the new post. Must be 5-120 characters, plain text only. Required. Enforced by length constraint."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Main text content of the post. Required. Between 10 and 10,000 characters. Only plain text allowed. Line breaks permitted; no scripts or code."},"author_display_name":{"type":"string","maxLength":32,"description":"Optional display name for the post author. Up to 32 characters. If omitted or empty, platform displays 'Anonymous' as the author."}},"required":["community_platform_community_id","title","body"],"description":"Payload for creating a new post in the platform. Fields include community reference (required), post title and body (with length limits enforced), and optionally an author display name. Author, created, and audit fields are filled in by the server based on authentication context and platform business rules; never supplied by client directly. Must not include any unauthorized system or audit fields (e.g., post id, author user ids, timestamps). Security: author fields always excluded from create requests."},"ICommunityPlatformPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":5,"maxLength":120,"description":"Title of the post. The title must be plain text between 5 and 120 characters. Scripts or code are forbidden. This field is updatable on edit operations but required only for creation. Referenced in business constraints for validation and UI rendering."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Body content of the post. Must be plain text (no scripts/code), allows line breaks. Business validation enforces length between 10 and 10,000 characters. Can be updated by owners/admins. This field is essential for post detail display and full-text search."},"author_display_name":{"type":"string","maxLength":32,"description":"Optional display name to show for the post's author. If empty, the platform displays 'Anonymous' to other users as fallback. Maximum of 32 characters. Owned and editable by the post author only; always sanitized for platform consistency."}},"required":[],"description":"Update fields for a post. Allows modification of title (5–120 chars), body (10–10,000 chars), and display name (0–32 chars, optional, fallback 'Anonymous'). Fields are individually optional for PATCH semantics. All changes tracked by updated_at timestamp."},"ICommunityPlatformPostVote.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"The unique identifier of the post being voted on. Must be a valid UUID corresponding to a post in the system. Used for establishing the per-user-per-post vote relation."},"vote_state":{"oneOf":[{"const":"upvote","description":"Vote state for this post: 'upvote', 'downvote', or 'none' (toggle/removal; none removes the vote for this user on the post). Only allowed values. Enforced by business logic; required in all create/toggle actions."},{"const":"downvote","description":"Vote state for this post: 'upvote', 'downvote', or 'none' (toggle/removal; none removes the vote for this user on the post). Only allowed values. Enforced by business logic; required in all create/toggle actions."},{"const":"none","description":"Vote state for this post: 'upvote', 'downvote', or 'none' (toggle/removal; none removes the vote for this user on the post). Only allowed values. Enforced by business logic; required in all create/toggle actions."}],"description":"Vote state for this post: 'upvote', 'downvote', or 'none' (toggle/removal; none removes the vote for this user on the post). Only allowed values. Enforced by business logic; required in all create/toggle actions."}},"required":["post_id","vote_state"],"description":"Create or toggle a user's vote for a specific post. Must provide target post_id and vote state (chosen from 'upvote', 'downvote', or 'none'). Used by PATCH/POST vote endpoints. Ownership and one-vote-per-user enforced at API/business logic layer."},"ICommunityPlatformPostVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this post vote (UUID). Used for reference, updating, or deletion. Generated upon vote creation."},"community_platform_post_id":{"type":"string","format":"uuid","description":"Target post ID being voted on (UUID). Relates to the post entity."},"voter_memberuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the member user who voted; null if not a member user. Set for authenticated user votes only."},"voter_adminuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the admin user who voted; null if not an admin user. Set for admin voting actions only."},"vote_state":{"oneOf":[{"const":"upvote","description":"Current vote state of the user on the post: exactly one of 'upvote', 'downvote', or 'none'. Used for toggling, analytics, and per-user-per-post voting business rules."},{"const":"downvote","description":"Current vote state of the user on the post: exactly one of 'upvote', 'downvote', or 'none'. Used for toggling, analytics, and per-user-per-post voting business rules."},{"const":"none","description":"Current vote state of the user on the post: exactly one of 'upvote', 'downvote', or 'none'. Used for toggling, analytics, and per-user-per-post voting business rules."}],"description":"Current vote state of the user on the post: exactly one of 'upvote', 'downvote', or 'none'. Used for toggling, analytics, and per-user-per-post voting business rules."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this vote record was first created (ISO 8601, UTC). Used for audit and sorting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this vote record was last updated (ISO 8601, UTC). Updated whenever the vote is toggled."}},"required":["id","community_platform_post_id","vote_state","created_at","updated_at"],"description":"A platform user's vote on a post. Each vote record represents a unique user-to-post voting state, used for analytics and per-user score calculation. Voter may be member user or admin user. Update and delete require ownership validation. Used in voting, feed score display, and audit views."},"ICommunityPlatformPostVote.IUpdate":{"type":"object","properties":{"vote_state":{"oneOf":[{"const":"upvote","description":"Vote state to apply to this post-vote entry: one of 'upvote', 'downvote', or 'none' to remove vote. Only allowed values; used for toggling/updating vote state."},{"const":"downvote","description":"Vote state to apply to this post-vote entry: one of 'upvote', 'downvote', or 'none' to remove vote. Only allowed values; used for toggling/updating vote state."},{"const":"none","description":"Vote state to apply to this post-vote entry: one of 'upvote', 'downvote', or 'none' to remove vote. Only allowed values; used for toggling/updating vote state."}],"description":"Vote state to apply to this post-vote entry: one of 'upvote', 'downvote', or 'none' to remove vote. Only allowed values; used for toggling/updating vote state."}},"required":["vote_state"],"description":"Update a post vote entry—only allows changing the vote_state ('upvote', 'downvote', 'none'). Used for toggling/removal in vote update endpoints by vote owners."},"ICommunityPlatformPostModerationLog.IRequest":{"type":"object","properties":{"action_type":{"type":"string","description":"Filter moderation logs by action type (e.g., 'edit', 'delete', 'restore'). Partial or exact match; if unspecified, all actions are included."},"action_reason":{"type":"string","description":"Search moderation actions by provided reason; allows partial or substring matches. Optional for filtering logs; if omitted, all reasons included."},"from_date":{"type":"string","format":"date-time","description":"Start date/time (inclusive, ISO 8601 UTC) for filtering moderation logs. Events before this are excluded. Used for time window queries."},"to_date":{"type":"string","format":"date-time","description":"End date/time (inclusive, ISO 8601 UTC) for filtering moderation logs. Events after this are excluded. Used for time window queries."},"sort":{"oneOf":[{"const":"asc","description":"Sort order for returned moderation logs. 'asc' for oldest first; 'desc' for newest first (defaults to 'desc'). Applies to creation timestamp."},{"const":"desc","description":"Sort order for returned moderation logs. 'asc' for oldest first; 'desc' for newest first (defaults to 'desc'). Applies to creation timestamp."}],"description":"Sort order for returned moderation logs. 'asc' for oldest first; 'desc' for newest first (defaults to 'desc'). Applies to creation timestamp."},"page":{"type":"integer","minimum":1,"description":"Pagination: which page to return in result set. Starts from 1. Required for paginated queries; defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: maximum number of records per page. Defaults or maximums as set by business rules; 100 is typical system max."}},"required":[],"description":"Request payload for searching, filtering, sorting, and paginating post moderation logs (admin endpoints). Supports query by type, reason, date range, sort order, and pagination controls. Used for admin review/audit of post moderation operations."},"ICommunityPlatformPostModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. A unique UUID for this post moderation log entry, generated at creation time. Reference to community_platform_post_moderation_logs.id in the Prisma schema."},"community_platform_post_id":{"type":"string","format":"uuid","description":"The ID of the post that this moderation action was taken against. Links to community_platform_posts.id."},"performed_adminuser_id":{"type":"string","format":"uuid","description":"ID of the admin user account who executed this moderation action. References community_platform_adminusers.id."},"action_type":{"type":"string","description":"The type of moderation action performed (for example: 'edit', 'delete', 'restore'). String value as per post_moderation_logs.action_type in the Prisma schema. For audit and compliance tracking."},"action_reason":{"oneOf":[{"type":"string","description":"Optional explanation for the moderation action. Free-form text (up to 255 chars). Null when no explanation is given."},{"type":"null"}],"description":"Optional explanation for the moderation action. Free-form text (up to 255 chars). Null when no explanation is given."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the moderation log was created. Value from community_platform_post_moderation_logs.created_at. ISO 8601 format."}},"required":["id","community_platform_post_id","performed_adminuser_id","action_type","created_at"],"description":"A log entry recording a moderation action on a post. See community_platform_post_moderation_logs table. Contains references to the post, performing admin user, action type, reason, and audit timestamp. Audit trail for compliance/business rules. See Prisma table and ERD for fields."},"ICommunityPlatformComment.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to comments belonging to this post. Maps to community_platform_comments.post_id. UUID as string."},"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter to get replies to a specific comment (nested comments). Matches community_platform_comments.parent_comment_id. Null for top-level. UUID as string."},{"type":"null"}],"description":"Optional filter to get replies to a specific comment (nested comments). Matches community_platform_comments.parent_comment_id. Null for top-level. UUID as string."},"author_memberuser_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to comments authored by a given member user. References community_platform_memberusers.id. UUID as string."},"author_guestuser_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to guest-authored comments. References community_platform_guestusers.id. UUID as string."},"author_adminuser_id":{"type":"string","format":"uuid","description":"Optional filter for comments from admin authors. References community_platform_adminusers.id. UUID as string."},"body_query":{"type":"string","description":"Optional search keyword for plain-text comment body. Trigram/full-text search on body column in community_platform_comments. Minimum 2 characters is recommended."},"sort_by":{"oneOf":[{"const":"newest","description":"Sort order. 'newest' for most recent creation date, 'top' for highest vote score. Default is 'newest'."},{"const":"top","description":"Sort order. 'newest' for most recent creation date, 'top' for highest vote score. Default is 'newest'."}],"description":"Sort order. 'newest' for most recent creation date, 'top' for highest vote score. Default is 'newest'."},"page":{"type":"integer","format":"int32","description":"Results page number for pagination. 1-based."},"limit":{"type":"integer","format":"int32","description":"Page size—the number of results per page. Default is 20, max typically enforced by application."}},"required":[],"description":"Request payload used for searching or querying comments. Optional filters on post, author, parent (for nesting), keyword, and pagination/sorting. For comment search APIs."},"ICommunityPlatformComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this comment record. UUID generated at creation. community_platform_comments.id"},"post_id":{"type":"string","format":"uuid","description":"ID of the post to which this comment belongs. Foreign key to community_platform_posts.id."},"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"For replies, the ID of the parent comment this is replying to. Null for top-level comments. community_platform_comments.parent_comment_id"},{"type":"null"}],"description":"For replies, the ID of the parent comment this is replying to. Null for top-level comments. community_platform_comments.parent_comment_id"},"author_memberuser_id":{"oneOf":[{"type":"string","format":"uuid","description":"Member user ID if authored by a registered user. Null otherwise. community_platform_comments.author_memberuser_id"},{"type":"null"}],"description":"Member user ID if authored by a registered user. Null otherwise. community_platform_comments.author_memberuser_id"},"author_guestuser_id":{"oneOf":[{"type":"string","format":"uuid","description":"Guest user ID if comment was created by an unauthenticated visitor. Null otherwise. community_platform_comments.author_guestuser_id"},{"type":"null"}],"description":"Guest user ID if comment was created by an unauthenticated visitor. Null otherwise. community_platform_comments.author_guestuser_id"},"author_adminuser_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin user ID if authored by a platform admin. Null otherwise. community_platform_comments.author_adminuser_id"},{"type":"null"}],"description":"Admin user ID if authored by a platform admin. Null otherwise. community_platform_comments.author_adminuser_id"},"body":{"type":"string","description":"Content of the comment. Plain text. 2–2,000 characters. No markup or scripts allowed. community_platform_comments.body."},"display_name":{"oneOf":[{"type":"string","description":"Optional display name to show as author identity. If null, display as 'Anonymous'. Max 32 characters. community_platform_comments.display_name"},{"type":"null"}],"description":"Optional display name to show as author identity. If null, display as 'Anonymous'. Max 32 characters. community_platform_comments.display_name"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last modification of the comment in ISO8601."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when soft-deleted. Null if comment is active. Used for compliance/audit. community_platform_comments.deleted_at"},{"type":"null"}],"description":"Timestamp when soft-deleted. Null if comment is active. Used for compliance/audit. community_platform_comments.deleted_at"}},"required":["id","post_id","body","created_at","updated_at"],"description":"A comment entity as stored in the community_platform_comments table. Contains post association, author (member/guest/admin), body, display_name, timestamps, and optional deletion info. Used for comment detailed view, thread rendering, and audit."},"ICommunityPlatformComment.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"UUID of the post to which the comment will be attached. community_platform_comments.post_id"},"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this is a reply, the ID of the parent comment being replied to. Null or omitted for top-level comments. community_platform_comments.parent_comment_id"},{"type":"null"}],"description":"If this is a reply, the ID of the parent comment being replied to. Null or omitted for top-level comments. community_platform_comments.parent_comment_id"},"body":{"type":"string","description":"Main text content of the comment. Must be 2–2,000 characters, plain text only. Escaped as per business rules. community_platform_comments.body"},"display_name":{"oneOf":[{"type":"string","description":"(Optional) Display name shown as the comment author. If empty or null, will display as 'Anonymous'. Max 32 chars. community_platform_comments.display_name"},{"type":"null"}],"description":"(Optional) Display name shown as the comment author. If empty or null, will display as 'Anonymous'. Max 32 chars. community_platform_comments.display_name"}},"required":["post_id","body"],"description":"Request body for creating a comment. Specifies the target post, optionally the parent comment (for replies), the plain-text body, and optional display_name. Follows content and business validation rules."},"ICommunityPlatformComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Plain-text body to update for this comment. Must remain 2–2,000 characters."},"display_name":{"oneOf":[{"type":"string","description":"(Optional) Display name to update for this comment. Null or empty for 'Anonymous'. Max 32 chars. community_platform_comments.display_name."},{"type":"null"}],"description":"(Optional) Display name to update for this comment. Null or empty for 'Anonymous'. Max 32 chars. community_platform_comments.display_name."}},"required":[],"description":"Request body for updating a comment's text and display name. Only these fields are patchable; all others are immutable. Updates are audit-logged via updated_at field."},"ICommunityPlatformCommentVote.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"The unique identifier for the comment being voted on. This must reference a valid comment in the system. Used to associate the vote record with the specific comment target. UUID format as per Prisma schema."},"vote_type":{"oneOf":[{"const":"upvote","description":"Defines the state of the vote for this comment. Acceptable values are 'upvote', 'downvote', or 'none' (to clear a previous vote/remove vote state). Follows business rules against self-voting and enforces only one vote per user per comment."},{"const":"downvote","description":"Defines the state of the vote for this comment. Acceptable values are 'upvote', 'downvote', or 'none' (to clear a previous vote/remove vote state). Follows business rules against self-voting and enforces only one vote per user per comment."},{"const":"none","description":"Defines the state of the vote for this comment. Acceptable values are 'upvote', 'downvote', or 'none' (to clear a previous vote/remove vote state). Follows business rules against self-voting and enforces only one vote per user per comment."}],"description":"Defines the state of the vote for this comment. Acceptable values are 'upvote', 'downvote', or 'none' (to clear a previous vote/remove vote state). Follows business rules against self-voting and enforces only one vote per user per comment."}},"required":["comment_id","vote_type"],"description":"Request object for creating a new comment vote. Used to cast or update a user's vote for a specific comment. Users may upvote, downvote, or clear their vote (none). This record ties the user and the comment vote state, with validation to prevent self-voting. References community_platform_comment_votes Prisma model."},"ICommunityPlatformCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the vote record as stored in community_platform_comment_votes."},"comment_id":{"type":"string","format":"uuid","description":"Unique identifier for the target comment that the vote record belongs to (community_platform_comment_votes.comment_id)."},"voter_memberuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the member user who cast the vote. Null unless the vote comes from a member user. Provided to support business logic for user-level audits and analytics."},"voter_adminuser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the admin user who cast the vote. Null unless this vote comes from an admin user. Used for audit flows and analytics."},"vote_type":{"oneOf":[{"const":"upvote","description":"The state/type of the vote (upvote, downvote, or none). Only these values are allowed per business logic. Used both for user-facing UI display and backend score aggregation."},{"const":"downvote","description":"The state/type of the vote (upvote, downvote, or none). Only these values are allowed per business logic. Used both for user-facing UI display and backend score aggregation."},{"const":"none","description":"The state/type of the vote (upvote, downvote, or none). Only these values are allowed per business logic. Used both for user-facing UI display and backend score aggregation."}],"description":"The state/type of the vote (upvote, downvote, or none). Only these values are allowed per business logic. Used both for user-facing UI display and backend score aggregation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of vote creation (ISO 8601 format). Used in sorting, analytics, and audits. Prisma type DateTime."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent update to vote state or audit. Reflects toggling action or timestamp of clearing the vote. ISO 8601 date string as specified by Prisma."}},"required":["id","comment_id","vote_type","created_at","updated_at"],"description":"Schema for a per-user per-comment vote record, as defined in community_platform_comment_votes. This represents a user's (member or admin) latest vote state for a comment, including voter references, vote type, and audit timestamps. Required for vote score calculation, moderation, and voting state UX. Each (user, comment) pair may have at most one record at a time."},"ICommunityPlatformCommentVote.IUpdate":{"type":"object","properties":{"vote_type":{"oneOf":[{"const":"upvote","description":"The new voting state to apply to the vote record (either upvote, downvote, or none to clear/remove the vote). Only this field may be changed; ownership and associations are immutable."},{"const":"downvote","description":"The new voting state to apply to the vote record (either upvote, downvote, or none to clear/remove the vote). Only this field may be changed; ownership and associations are immutable."},{"const":"none","description":"The new voting state to apply to the vote record (either upvote, downvote, or none to clear/remove the vote). Only this field may be changed; ownership and associations are immutable."}],"description":"The new voting state to apply to the vote record (either upvote, downvote, or none to clear/remove the vote). Only this field may be changed; ownership and associations are immutable."}},"required":["vote_type"],"description":"Object for updating an existing comment vote state. Used to change the user's vote for a comment (upvote, downvote, or none) but never transfer vote between users or comments. Updates updated_at timestamp as per business rules."},"ICommunityPlatformCommentVote.IRequest":{"type":"object","properties":{"voter_memberuser_id":{"type":"string","format":"uuid","description":"Filter for votes cast by a particular member user. Optional; if omitted, search not restricted by member user."},"voter_adminuser_id":{"type":"string","format":"uuid","description":"Filter for votes cast by a specific admin user. Optional; if omitted, search not restricted by admin user."},"vote_type":{"oneOf":[{"const":"upvote","description":"Optional search filter to restrict votes to a specific state: upvote, downvote, or none. Useful for moderation or analytics queries."},{"const":"downvote","description":"Optional search filter to restrict votes to a specific state: upvote, downvote, or none. Useful for moderation or analytics queries."},{"const":"none","description":"Optional search filter to restrict votes to a specific state: upvote, downvote, or none. Useful for moderation or analytics queries."}],"description":"Optional search filter to restrict votes to a specific state: upvote, downvote, or none. Useful for moderation or analytics queries."},"page":{"type":"integer","minimum":1,"description":"Pagination parameter specifying which result page to return (1-based). Optional; defaults to first page."},"limit":{"type":"integer","minimum":1,"description":"Maximum number of records per page for search results. Optional; system default applies if omitted."},"sort":{"oneOf":[{"const":"created_at","description":"Sort order for the result set. May sort by created_at (default) or vote_type for analytics/filtering screens."},{"const":"vote_type","description":"Sort order for the result set. May sort by created_at (default) or vote_type for analytics/filtering screens."}],"description":"Sort order for the result set. May sort by created_at (default) or vote_type for analytics/filtering screens."}},"description":"Search/filter/paginate request object for listing votes on comments. Allows filtering by voter (member/admin), vote type, paging, and output sort order. Used for moderation, analytics, and vote review tools.","required":[]},"ICommunityPlatformSearchLog.IRequest":{"type":"object","properties":{"search_query":{"type":"string","minLength":2,"description":"Optional partial (substring) match search query (minimum 2 characters required for non-trivial search). Used for analytics monitoring, admin investigations, and auditing platform search patterns."},"target_scope":{"oneOf":[{"const":"posts","description":"Specifies which business entity scope to restrict the search logs to—posts, comments, or communities. Used for compliance or admin analytics."},{"const":"comments","description":"Specifies which business entity scope to restrict the search logs to—posts, comments, or communities. Used for compliance or admin analytics."},{"const":"communities","description":"Specifies which business entity scope to restrict the search logs to—posts, comments, or communities. Used for compliance or admin analytics."}],"description":"Specifies which business entity scope to restrict the search logs to—posts, comments, or communities. Used for compliance or admin analytics."},"member_user_id":{"type":"string","format":"uuid","description":"Filter for search logs performed by a particular member user. Used for compliance, audit, and analytics uses."},"admin_user_id":{"type":"string","format":"uuid","description":"Filter for search logs performed by an admin user. Used for compliance and audit flows."},"created_from":{"type":"string","format":"date-time","description":"Optional ISO 8601 start datetime to restrict logs to those created after the specified point. Used for date range filtering in auditing."},"created_to":{"type":"string","format":"date-time","description":"Optional ISO 8601 end datetime to restrict logs to those created before the specified point. For closed date range analytics."},"page":{"type":"integer","minimum":1,"description":"Which page of results should be returned. Optional; default is the first page."},"limit":{"type":"integer","minimum":1,"description":"Maximum records to return in paginated response. Optional; system defaults apply if omitted."},"sort":{"oneOf":[{"const":"created_at_desc","description":"Sort direction for log creation time. Valid values are 'created_at_desc' for newest first or 'created_at_asc' for oldest first."},{"const":"created_at_asc","description":"Sort direction for log creation time. Valid values are 'created_at_desc' for newest first or 'created_at_asc' for oldest first."}],"description":"Sort direction for log creation time. Valid values are 'created_at_desc' for newest first or 'created_at_asc' for oldest first."}},"required":[],"description":"SearchLog analytics request object for fetching/filtering logs from community_platform_search_logs. Allows full-featured search for admins/audits, supporting compliance review and analytic queries by scope, user, time, and substring match."},"ICommunityPlatformSearchLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this search log event. Corresponds to the primary key in the community_platform_search_logs table. Always a generated UUID as per business logic.\n\n@see Prisma: community_platform_search_logs.id"},"member_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member user who performed the search, or null if none. References community_platform_memberusers.id. May be null when the event is performed by an admin or as a system event."},{"type":"null"}],"description":"ID of the member user who performed the search, or null if none. References community_platform_memberusers.id."},"admin_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the admin user who performed the search, or null if not applicable. References community_platform_adminusers.id."},{"type":"null"}],"description":"ID of the admin user who performed the search, or null if not applicable. References community_platform_adminusers.id."},"search_query":{"type":"string","description":"The text input used for the search query. Used for analytics, business improvements, and compliance. Required field."},"target_scope":{"type":"string","description":"The logical scope of the search (such as 'posts', 'comments', 'communities'). Used for analytic reporting and behavioral breakdowns. @see Prisma: community_platform_search_logs.target_scope"},"ip_address":{"type":"string","description":"The IP address from which this search event was performed. Captured for audit and geo-distribution analytics. @see Prisma: community_platform_search_logs.ip_address"},"user_agent":{"oneOf":[{"type":"string","description":"The HTTP user-agent string from the device or browser that triggered the search event. Used for analytics and device tracking."},{"type":"null"}],"description":"HTTP user-agent string for analytics/device tracking."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this search event was created (RFC 3339, ISO 8601 format). Immutable audit field. @see Prisma: community_platform_search_logs.created_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp for the search log record; null if not deleted. Used for compliance-driven data removal."},{"type":"null"}],"description":"Soft-delete timestamp or null if active. Included for compliance with data retention/deletion policies."}},"required":["id","search_query","target_scope","ip_address","created_at"],"description":"Represents a single search action log for the community platform. Each entry may be linked to a member or admin user, contains search query strings, scope, and device info for analytics and compliance. Mirrors the Prisma model community_platform_search_logs."},"ICommunityPlatformDataExportLog.IRequest":{"type":"object","properties":{"member_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter: Match member_user_id (who requested export)."},{"type":"null"}],"description":"Filter for export logs by requesting member user ID (UUID), or null if not filtering."},"admin_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter: Match admin_user_id (who requested export)."},{"type":"null"}],"description":"Filter for export logs by requesting admin user ID (UUID), or null if not filtering."},"export_type":{"type":"string","description":"Filter: Match the type of export requested, e.g., 'user_data', 'community_data', etc."},"export_format":{"type":"string","description":"Filter: Match the desired export file format (such as 'json', 'csv')."},"status":{"type":"string","description":"Filter: Match export request status (e.g., 'pending','completed','failed')."},"page":{"type":"integer","description":"Paging parameter: which result page to return (1-based)."},"limit":{"type":"integer","description":"Paging parameter: maximum number of results per page."},"sort":{"type":"string","description":"Sorting parameter, e.g., by created_at or status."},"date_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: Start of date range for search."},{"type":"null"}],"description":"Filter: Only include logs created after this datetime (inclusive), or null for no lower bound."},"date_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: End of date range for search."},{"type":"null"}],"description":"Filter: Only include logs created before this datetime (inclusive), or null for no upper bound."}},"required":[],"description":"Filter/search and pagination parameters for querying data export logs on the community platform for compliance, audit, or data lifecycle management purposes."},"ICommunityPlatformDataExportLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the data export log event; corresponds to primary key in community_platform_data_export_logs table."},"member_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member user who requested or received the export. References community_platform_memberusers.id, or null if the action was admin or system-driven."},{"type":"null"}],"description":"ID of the member user who requested the data export, or null (nullable field in schema)."},"admin_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the admin user who performed/managed/exported data, or null if not relevant (references community_platform_adminusers.id)."},{"type":"null"}],"description":"ID of the admin user managing/performing the export, or null if not applicable. Nullable in schema."},"export_type":{"type":"string","description":"Nature of the data exported, such as 'user_data', 'community_data', 'posts', etc. Used for compliance/business analytics."},"export_format":{"type":"string","description":"Export file format for the exported data (such as 'json', 'csv')."},"requested_ip":{"type":"string","description":"IP address from which the export request was made; audit and compliance."},"status":{"type":"string","description":"Workflow status for export, e.g., 'pending', 'completed', 'failed'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the export was requested/created. References community_platform_data_export_logs.created_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp for the export log event; or null if active (Prisma: community_platform_data_export_logs.deleted_at)."},{"type":"null"}],"description":"Soft-delete timestamp, or null if active (for compliance/data retention logic)."}},"required":["id","export_type","export_format","requested_ip","status","created_at"],"description":"Represents a single data export log for the community platform. Associates a member or admin user with the export event, includes export metadata and audit fields per compliance requirements."},"ICommunityPlatformCategory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the category. Primary key of community_platform_categories."},"name":{"type":"string","description":"Category name, unique and must match naming/business logic (case-insensitive, 5-32 characters, alphanumeric + hyphen/underscore)."},"display_order":{"type":"integer","description":"Order for display in UI or selectors. Business logic: sequential integer starting from 1."},"description":{"oneOf":[{"type":"string","description":"Optional description of category (max 200 characters)."},{"type":"null"}],"description":"Optional description (max 200 chars) for tooltips/context."},"created_at":{"type":"string","format":"date-time","description":"Time the category was created (RFC 3339/ISO 8601, immutable/audit)."},"updated_at":{"type":"string","format":"date-time","description":"Last updated time (RFC 3339/ISO 8601)."}},"required":["id","name","display_order","created_at","updated_at"],"description":"Summary information about a category used for community classification and UI selectors. Mirrors core fields of community_platform_categories for fast listing, filtering, and selection."},"ICommunityPlatformConfiguration.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the configuration parameter. Primary key of community_platform_configurations."},"key":{"type":"string","description":"Unique key name for this configuration parameter (e.g., 'max_post_length', 'enable_voting', etc.)."},"value":{"type":"string","description":"Value as interpreted by application (can be JSON, string, or number as string)."},"description":{"oneOf":[{"type":"string","description":"Optional description for admin/logging context (max 200 chars)."},{"type":"null"}],"description":"Optional description (max 200 chars) for what this config controls, for admin/logging context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when configuration entry was created (RFC 3339/ISO 8601, immutable/audit)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to value/description (RFC 3339/ISO 8601)."}},"required":["id","key","value","created_at","updated_at"],"description":"Summary view of system/platform configuration. Used for fast UI listing, editing, and search. Mirrors core business fields from community_platform_configurations."},"ICommunityPlatformExternalIntegration.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the external integration record.\n\nReferences the `community_platform_external_integrations.id` primary key in the Prisma schema. Used in API calls and business logic involving external system configuration."},"integration_name":{"type":"string","description":"Unique, descriptive name for the external integration.\n\nAs defined in `integration_name` column, this value is required to be unique, for example: 'GoogleOAuth', 'StripeWebhook', or 'Analytics-Partner'. Used as a primary display and logical identifier."},"provider_url":{"oneOf":[{"type":"string","format":"uri","description":"Base URL or endpoint reference for the third-party provider.\n\nNullable and may not be present for some integrations. As mapped from the optional `provider_url` in the schema, should match a valid URI if provided."},{"type":"null"}],"description":"Base URL or endpoint reference for the third-party provider.\n\nNullable and may not be present for some integrations. As mapped from the optional `provider_url` in the schema, should match a valid URI if provided."},"status":{"type":"string","description":"Operational status for the integration: e.g. 'enabled', 'disabled', 'pending', 'error'.\n\nCorrelates with the `status` column in the Prisma schema, controls activation and monitoring state in business logic. Enum status values are enforced system-wide."},"last_successful_sync_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of last successful event or handshake from the external integration.\n\nSourced from `last_successful_sync_at`, nullable to indicate no events yet. Returned in ISO 8601 format if present."},{"type":"null"}],"description":"Timestamp of last successful event or handshake from the external integration.\n\nSourced from `last_successful_sync_at`, nullable to indicate no events yet. Returned in ISO 8601 format if present."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this integration entry was created.\n\nMaps to the `created_at` column and is always provided. Used for audit and configuration lifecycle tracking."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to integration details/configuration.\n\nCorresponds to the `updated_at` field used for auditing and change tracking."}},"required":["id","integration_name","status","created_at","updated_at"],"description":"Administrative summary describing a registered platform external integration (webhook, OAuth, API, etc.)\n\nThis schema provides a concise view of the key metadata for an external integration: unique id, display name, provider endpoint, status, and event timestamps. All properties correspond to columns in the Prisma `community_platform_external_integrations` table, and allow for system configuration, compliance auditing, and dashboard rendering. Sensitive configuration fields (such as credentials) are omitted in this summary."},"ICommunityPlatformGuestUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Opaque unique id for the guest user session, as assigned on creation.\n\nReferences the `community_platform_guestusers.id` column in the schema, not linked to any user-identifying information."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest session was first established.\n\nUsed in analytics and for tracking session lifespan (corresponds to `created_at` field)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update (access/heartbeat) for this guest user session.\n\nProvides recency context for session tracking (maps to `updated_at` column)."},"session_signature":{"oneOf":[{"type":"string","description":"Opaque signature string optionally used for session recovery, deduplication, or analytics.\n\nSourced from `session_signature` (nullable) in the schema; set when a browser/device is re-identified or for analytic linkage."},{"type":"null"}],"description":"Opaque signature string optionally used for session recovery, deduplication, or analytics.\n\nSourced from `session_signature` (nullable) in the schema; set when a browser/device is re-identified or for analytic linkage."}},"required":["id","created_at","updated_at"],"description":"Concise summary of a guest user session, as used for analytics, monitoring, and session recovery/re-link flows.\n\nMaps directly to key columns in `community_platform_guestusers`. Designed to be safe for analytics dashboards, audit trails, and anonymized guest flows. Does not expose any sensitive user information or PII; only session-identifying metadata."},"ICommunityPlatformMemberUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member user id, as in `community_platform_memberusers.id`.\n\nPrimary identifier for all core business/user-facing operations."},"display_name":{"oneOf":[{"type":"string","description":"Display name chosen by the member user, shown on posts/comments.\n\nOptional (`display_name` in schema, nullable). If not set, defaults to 'Anonymous' for business logic and UI."},{"type":"null"}],"description":"Display name chosen by the member user, shown on posts/comments.\n\nOptional (`display_name` in schema, nullable). If not set, defaults to 'Anonymous' for business logic and UI."},"status":{"type":"string","description":"Current status of the member user account (e.g. 'active', 'suspended', 'deleted').\n\nMapped from the `status` column; controls eligibility for platform actions in business logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member user account was created.\n\nReferences the `created_at` column. Used in audit, onboarding, and feed personalization."},"updated_at":{"type":"string","format":"date-time","description":"Latest update timestamp for member user profile or status.\n\nDerived from the `updated_at` column for audit and change monitoring."}},"required":["id","status","created_at","updated_at"],"description":"Summary details for a registered member user, reflecting essential user directory/profile fields only.\n\nThe schema exposes key business identifiers and display name, but omits sensitive or credential information for privacy. Used in search, membership lists, post attribution, and business logic involving users. All properties correlate to columns in `community_platform_memberusers`."},"ICommunityPlatformAdminUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique primary identifier for the admin user.\n\nBacked by `community_platform_adminusers.id` column. Used for role-based operations and admin/personnel directory listings."},"display_name":{"oneOf":[{"type":"string","description":"Display name or handle for the admin user, presented in system/moderator logs and dashboards.\n\nTaken from optional `display_name` (nullable). Used for improved identification in logs and UI."},{"type":"null"}],"description":"Display name or handle for the admin user, presented in system/moderator logs and dashboards.\n\nTaken from optional `display_name` (nullable). Used for improved identification in logs and UI."},"status":{"type":"string","description":"Admin user account status, such as 'active', 'suspended', or 'retired'.\n\nRetrieved from `status` in the schema; controls admin capabilities and login permission."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user account was created.\n\nDirect from `created_at` column; appears in personnel audit, tracing, and onboarding flows."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last admin profile or status update.\n\nBacked by `updated_at` column; used in personnel tracking and operational audit."}},"required":["id","status","created_at","updated_at"],"description":"Business summary of an admin user, containing the minimal required fields for directory, audit, and admin role resolution.\n\nAll returned properties are based on schema columns of `community_platform_adminusers`. Sensitive or credential data (user_credential_id, email, passwords) are excluded. Use for administrative/role lists, logs, or search."},"ICommunityPlatformUserCredential.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the user credential record, as in `community_platform_user_credentials.id`.\n\nReferences the account's credential in all authentication flows and administrative tracking."},"email":{"type":"string","format":"email","description":"The registered email address tied to this credential record.\n\nUsed for login, password reset, and audit. Sourced from the unique `email` column."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp for these credentials.\n\nPulled from `created_at` in the schema, for audit trails."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last credentials update/password change.\n\nBased on `updated_at`; indicators for password reset, security reviews, or system maintenance."}},"required":["id","email","created_at","updated_at"],"description":"Summary of a user's stored authentication credentials, primarily for administrative review and password reset workflows.\n\nDraws from `community_platform_user_credentials` and presents only safe, non-sensitive data (no hashes, passwords). Enables search, export, and management dashboard listings. Do not expose to general users or non-privileged roles."},"ICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the sub-community. Corresponds to the community_platform_communities.id field in the database. Used to uniquely identify a sub-community in business logic and API operations.\n\nUUID format per platform-wide convention. Required for all community operations that reference specific communities."},"name":{"type":"string","description":"Name of the community. Immutable and unique (case-insensitive, 5-32 chars, a-zA-Z0-9-_). This field serves as the public identifier and is subject to naming constraints defined by business logic. Present in all displays and summary cards.\n\nCorresponds to community_platform_communities.name in the schema."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description for the community. Maximum 200 characters. May be null or omitted if not provided by the owner.\n\nUsed in summary cards, tooltips, and auxiliary UI contexts. Maps to community_platform_communities.description."},"logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI for an optional community logo image asset. May be null if not set. Used for visual branding in UI cards, search listings, or sidebar components.\n\nMaps to community_platform_communities.logo_uri."},"banner_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI for an optional community banner image asset. May be null if not set. Intended for use in large headers or visually rich listings. Maps to community_platform_communities.banner_uri."}},"required":["id","name"],"description":"Summary representation of a sub-community. Includes key data for listing and quick-select UI operations. Exposes only safe display fields—never internal state or owner references.\n\nDerived from the community_platform_communities entity, providing a minimal, business-context summary for selection, feed inclusion, or search result display. Used throughout the application where full community detail is unnecessary."},"ICommunityPlatformCommunityMembership.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique membership record identifier. Maps to community_platform_community_memberships.id in the schema. Used as the primary key when referencing a specific membership entry."},"community_id":{"type":"string","format":"uuid","description":"The ID of the related community. Maps to community_platform_community_memberships.community_id. Required to know which community this membership is attached to."},"memberuser_id":{"type":"string","format":"uuid","description":"The ID of the user who is a member of the community. Maps to community_platform_community_memberships.memberuser_id. Serves as the join link between the member and the community. Required for join/leave workflows."},"joined_at":{"type":"string","format":"date-time","description":"The date and time the user became a member of the community. Maps to community_platform_community_memberships.joined_at. ISO8601 format."}},"required":["id","community_id","memberuser_id","joined_at"],"description":"Summary information of a user's membership to a community. Used mostly for member lists, recent activities, and UI context. Derived from the community_platform_community_memberships entity. Contains only non-sensitive identifiers and join timing."},"ICommunityPlatformPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique primary key for the post. Maps to community_platform_posts.id field. Used throughout the platform for direct post retrieval, list display, and as a parent for comments."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Identifier of the parent sub-community this post belongs to. Maps to community_platform_posts.community_platform_community_id."},"title":{"type":"string","description":"Post title. 5–120 characters. Subject to business validation and used as the main headline in cards and feeds. From community_platform_posts.title."},"author_display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional author display name (0–32 chars). If not set, UI should display 'Anonymous.' Used for privacy and display consistency, never for authentication or access control. Maps to community_platform_posts.author_display_name."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for post creation (ISO8601). From community_platform_posts.created_at. Essential for sorting and display."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for latest post modification (ISO8601). From community_platform_posts.updated_at. Tracked for change history and audit display."}},"required":["id","community_platform_community_id","title","created_at","updated_at"],"description":"Summary representation of a post entity, suitable for use in paginated feeds, card lists, and search results. Exposes only safe, display-appropriate properties—never raw body or internal metadata.\n\nDerived from community_platform_posts. Contains all fields necessary for headline display, author context, and navigation."},"ICommunityPlatformComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique comment identifier (UUID). Direct reference to community_platform_comments.id for detailed comment workflows, edit/delete, and reply/thread management."},"post_id":{"type":"string","format":"uuid","description":"The ID of the post to which this comment is attached. Links the comment summary to its discussion context. From community_platform_comments.post_id."},"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the parent comment for nested/threaded replies. Null or omitted if the comment is a top-level comment. From community_platform_comments.parent_comment_id."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display name (0–32 chars) shown for the comment author. If not set, UI falls back to 'Anonymous' per privacy rules. Never used for authentication. Maps to community_platform_comments.display_name."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the comment (ISO8601 format). From community_platform_comments.created_at. Used for sorting threads and time-based display."}},"required":["id","post_id","created_at"],"description":"Summary information for a comment, designed for use in comment lists, thread headers, or search results. Exposes safe, non-sensitive display fields only. Omits author/account references, providing only context, parent, and UI display guidance.\n\nDerived from community_platform_comments. All fields included are required for typical thread rendering and allow navigation in discussion overview."}}}}