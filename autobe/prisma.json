{"files":[{"filename":"schema-01-systematic.prisma","namespace":"Systematic","models":[{"name":"community_platform_categories","description":"Master table for community category definitions. This model stores the allowed set of categories that a sub-community can belong to, such as 'Tech & Programming', 'Science', etc. Each community must reference a valid category from this table. Enables system-wide normalization of category selection and allows for category auditing, restriction, and business reporting. Frequently referenced by {@link community_platform_communities}.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"code","type":"string","description":"Unique string code for the category (typically slug form, e.g., 'tech_programming'). Used for programmatic references and API lookups. Must be unique.","nullable":false},{"name":"name","type":"string","description":"Human-readable display name for the category (e.g., 'Tech & Programming'). Required for display in UI and selection lists.","nullable":false},{"name":"description","type":"string","description":"Optional long-form category description (up to 200 characters), for tooltips or additional UI context.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the category was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the category was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp marking soft deletion of the category. Null if active. Provides audit support for category lifecycle.","nullable":true}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true},{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_banned_words","description":"System-wide banned words list for content moderation. Each row represents a single word or phrase that is not permitted in posts, comments, community names, and other user-generated content. Enables robust moderation by providing a centrally managed, independently updatable dictionary outside of main content flows. List is referenced by moderation engines and can be maintained by trusted moderators/admins.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"phrase","type":"string","description":"Banned word or phrase. Used for case-insensitive content validation and moderation sweeps. Must be unique across list.","nullable":false},{"name":"category","type":"string","description":"Optional category or severity flag for this phrase (e.g., 'profanity','spam','hate'). Enables fine-grained filtering and reporting.","nullable":true},{"name":"enabled","type":"boolean","description":"Indicates whether the banned word/phrase is currently active and enforced. Allows for temporary deactivation without deletion.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this banned word/phrase was added to the list.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the phrase was last modified (e.g., edit or re-enabled).","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp marking soft deletion/removal from enforcement. Null if still active. Supports audit trails for moderation history.","nullable":true}],"uniqueIndexes":[{"fieldNames":["phrase"],"unique":true}],"plainIndexes":[{"fieldNames":["enabled"]},{"fieldNames":["category"]}],"ginIndexes":[]},{"name":"community_platform_configurations","description":"Centralized storage for system-level configuration parameters and business logic switches (e.g., toggling maintenance mode, updating UI settings, adjusting moderation thresholds). This table allows flexible addition of named configuration entries by administrators, supporting runtime system adjustments without code deploys. Accessible and independently managed by trusted admins. May be referenced throughout business logic for behavioral branching.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"key","type":"string","description":"Unique string key representing the configuration parameter (e.g., 'maintenance_mode', 'max_post_length'). All config lookups are based on this key. Must be unique.","nullable":false},{"name":"value","type":"string","description":"The raw configuration value (typically serialized as text, which may be JSON, number, string, or feature flag). Must be interpreted at the business logic layer per config key type.","nullable":false},{"name":"description","type":"string","description":"Description of the configuration setting for admin UI/reference.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when this configuration was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the configuration was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp marking soft deletion/lifecycle end of the configuration. Null if active. Enables auditability for config changes.","nullable":true}],"uniqueIndexes":[{"fieldNames":["key"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]}]},{"filename":"schema-02-identity.prisma","namespace":"Identity","models":[{"name":"community_platform_guests","description":"Guest/anonymous visitor audit entity. Stores analytics and audit trail data for non-authenticated users (guests) who browse the platform before sign-up or login. Used to track activity, unique identifiers (e.g., cookie or device), and optional metadata for analytics purposes. Not managed directly by any user. Not linked to business content entities such as posts or communities. Cascade deletion is not required. Only subsidiary, not intended for API endpoints beyond analytics/audit log queries.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"guest_identifier","type":"string","description":"Pseudonymous analytics identifier for the guest (e.g., cookie/session ID or device fingerprint).","nullable":false},{"name":"ip_address","type":"string","description":"IP address of the guest at session creation, for anonymized tracking and abuse mitigation.","nullable":true},{"name":"user_agent","type":"string","description":"User agent or browser/device fingerprint string for analytics.","nullable":true},{"name":"created_at","type":"datetime","description":"Entity creation timestamp (when first seen).","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp (nullable when active).","nullable":true}],"uniqueIndexes":[{"fieldNames":["guest_identifier"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_members","description":"Registered member identity table. Stores all account, authentication, and profile data for regular users who sign up, log in, and perform interactive actions on the platform. Directly managed by member-facing APIs (sign-up, update, password change, delete, etc.). Has strong unique email constraint and separate hashed password. May be linked to sessions, password resets, and community content through FKs from other tables. Members may be promoted to admin via a separate admin entity (not polymorphic).","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","description":"Login email address, unique and required for account. Used as the main authentication identifier.","nullable":false},{"name":"display_name","type":"string","description":"Optional display name (shown as post/comment author); if not set, defaults to 'Anonymous'. Max 32 chars.","nullable":true},{"name":"password_hash","type":"string","description":"Hashed password value (never raw password). Required for logins, must conform to secure algorithm (e.g., bcrypt, argon2).","nullable":false},{"name":"is_active","type":"boolean","description":"Whether the member account is currently active (not banned/deleted/locked for security).","nullable":false},{"name":"last_login_at","type":"datetime","description":"Timestamp of last successful login for this member. Allows multi-device logins to update independently.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp of account creation.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last account update. Must be updated on profile or credential change.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft-deletion timestamp. Null if active, set when deleted for business audit trail.","nullable":true}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["display_name"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_admins","description":"Administrative user entity. Stores privileged user accounts with full moderation rights and system-level access. Not polymorphic with members; admin accounts are managed separately for rigorous privilege control, auditability, and rollback of admin actions. Includes unique email, password hash (distinct from member), privilege metadata, and suspension state. Directly managed via dedicated admin APIs. All admin actions are fully audited in other tables. Cascade deletion/banning disables admin access, not member (and vice versa).","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","description":"Login email address for admin account. Uniquely identifies admin login; separate from member email uniqueness constraint.","nullable":false},{"name":"display_name","type":"string","description":"Formal name for admin, displayed in audit logs, notifications, and moderation actions.","nullable":true},{"name":"password_hash","type":"string","description":"Secure hash of admin password. Used only for admin role logins, separate from member hashes.","nullable":false},{"name":"is_active","type":"boolean","description":"Account active status; false disables all admin login/privilege. Admin status is not inherited from member.","nullable":false},{"name":"last_login_at","type":"datetime","description":"Date and time of last authenticated admin login.","nullable":true},{"name":"is_super_admin","type":"boolean","description":"Whether this admin account has super-admin privileges (can manage other admins, system policies, etc.).","nullable":false},{"name":"created_at","type":"datetime","description":"Account creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last admin account update.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft deletion timestamp for audit trail; null if active.","nullable":true}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["display_name"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_sessions","description":"Session token management entity. Stores all active and expired JWT sessions for both members and admins. Enables multi-device, multi-platform logins per user. Tracks refresh token, expiration, device/client fingerprint, and invalidation state. Holds references to either a member or admin (never both, always at least one). Soft deletion/invalidation removes session access without removing audit trail. Used for 'log out everywhere' and session review features. User-facing APIs allow reviewing and invalidating own sessions.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_member_id","type":"uuid","description":"Belonged member's {@link community_platform_members.id} if session is for a member. Nullable when session belongs to admin.","relation":{"name":"member","targetModel":"community_platform_members"},"unique":false,"nullable":true},{"name":"community_platform_admin_id","type":"uuid","description":"Belonged admin's {@link community_platform_admins.id} if session is for an admin. Nullable for member sessions.","relation":{"name":"admin","targetModel":"community_platform_admins"},"unique":false,"nullable":true}],"plainFields":[{"name":"jwt_token","type":"string","description":"Issued JWT token string (access or refresh). Used for session validation and revocation. Uniquely identifies the session on this device/browser.","nullable":false},{"name":"refresh_token","type":"string","description":"Refresh token (if issued). Required for session renewal logic, invalidated upon logout or expiry.","nullable":false},{"name":"device_fingerprint","type":"string","description":"Device/browser fingerprint for this session. Used to help identify physical device or client type.","nullable":true},{"name":"expires_at","type":"datetime","description":"When the session (token) will expire and become invalid.","nullable":false},{"name":"invalidated_at","type":"datetime","description":"If set, indicates time of forced session invalidation (logout everywhere, password reset, etc.).","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp of session creation/signup or fresh login.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft deletion timestamp for audit trail. Null if still valid/visible.","nullable":true}],"uniqueIndexes":[{"fieldNames":["jwt_token"],"unique":true},{"fieldNames":["refresh_token"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_member_id"]},{"fieldNames":["community_platform_admin_id"]},{"fieldNames":["device_fingerprint"]},{"fieldNames":["expires_at"]}],"ginIndexes":[]},{"name":"community_platform_password_resets","description":"Password reset request entity. Stores secure password reset tokens and request audit trails for both member and admin accounts. Controls reset workflow, expiration, and repeat/reset cooldown logic. References either a member or admin, with exclusive constraint that only one of the two is set for each row. Resets can be invalidated as part of security flow. Used by forgot password workflows and reset email handling. APIs do not allow direct row manipulation except via password reset flows.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_member_id","type":"uuid","description":"Targeted member's {@link community_platform_members.id} for whose password is being reset. Nullable if admin.","relation":{"name":"member","targetModel":"community_platform_members"},"unique":false,"nullable":true},{"name":"community_platform_admin_id","type":"uuid","description":"Targeted admin's {@link community_platform_admins.id} for whose password is being reset. Nullable if member.","relation":{"name":"admin","targetModel":"community_platform_admins"},"unique":false,"nullable":true}],"plainFields":[{"name":"reset_token","type":"string","description":"One-time use password reset token, emailed to user and valid for single use. Must be cryptographically random, unique, and securely generated. Used to identify/reset process.","nullable":false},{"name":"expires_at","type":"datetime","description":"Expiration timestamp for the reset token. After this, resets are rejected until a new request is made.","nullable":false},{"name":"used_at","type":"datetime","description":"Timestamp when token was used and password updated. Null if unused.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp of password reset request creation.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft deletion timestamp; for audit only, not for API use.","nullable":true}],"uniqueIndexes":[{"fieldNames":["reset_token"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_member_id"]},{"fieldNames":["community_platform_admin_id"]},{"fieldNames":["expires_at"]}],"ginIndexes":[]}]},{"filename":"schema-03-communities.prisma","namespace":"Communities","models":[{"name":"community_platform_communities","description":"Main sub-community entity. Represents each named, top-level discussion group (sub-community) on the platform. Contains immutable name (unique, alphanumeric, hyphen/underscore), category (FK), owner/creator (FK), description, logo/banner URIs, created_at/updated_at timestamps, and optional community-wide rules. Supports unique name constraint and category covariates. Directly managed (create/read/update/delete) by users and admins. Referenced by memberships, rules, and posts. {@link community_platform_community_memberships}, {@link community_platform_community_rules}.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"category_id","type":"uuid","description":"Category reference. {@link community_platform_categories.id}.","relation":{"name":"category","targetModel":"community_platform_categories"},"unique":false,"nullable":false},{"name":"owner_id","type":"uuid","description":"Owner/creator reference. {@link community_platform_members.id}.","relation":{"name":"owner","targetModel":"community_platform_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"name","type":"string","description":"Immutable, unique, human-readable community name. 3-32 characters, alphanumeric, hyphen, underscore. Uniqueness enforced case-insensitively. Not editable after creation.","nullable":false},{"name":"display_title","type":"string","description":"Optional display title of the community. Up to 64 characters. Editable by owner or admin.","nullable":true},{"name":"description","type":"string","description":"Optional summary description for the community, up to 200 characters.","nullable":true},{"name":"logo_uri","type":"uri","description":"Optional URI for the community's logo image. Max 5MB.","nullable":true},{"name":"banner_uri","type":"uri","description":"Optional URI for the community's banner image. Max 5MB.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp: when the community was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp: when the community was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp: when the community was soft-deleted, else null.","nullable":true}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["category_id"]},{"fieldNames":["owner_id"]}],"ginIndexes":[{"fieldName":"display_title"},{"fieldName":"description"}]},{"name":"community_platform_community_memberships","description":"Junction table tracking many-to-many membership between users and communities. Records each join event. Used to determine who has joined which community for personalized feeds, permissions, and UI state. Does not contain historic membership (no history retention on leave). Existence of a row means current active membership. Composite unique constraint ensures user can join a community only once. Members and communities are both referenced. {@link community_platform_members.id}, {@link community_platform_communities.id}.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","description":"Member reference (user who joins). {@link community_platform_members.id}.","relation":{"name":"member","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community being joined. {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"joined_at","type":"datetime","description":"Timestamp when member joined community. Joining is always explicit user action; no implicit or historic membership tracking.","nullable":false}],"uniqueIndexes":[{"fieldNames":["member_id","community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id"]},{"fieldNames":["member_id"]}],"ginIndexes":[]},{"name":"community_platform_recent_communities","description":"Tracks the recency of each member's interaction with communities (e.g., for sidebar 'recent communities' UI). Serves as a many-to-many support junction, records most recent visit or activity to a community by each member. Not a full audit trail, nor a membership log. Ensures for each (member, community) the most recent row is retained. Managed for UI purposes, not historical record. Composite member/community unique index. {@link community_platform_members.id}, {@link community_platform_communities.id}.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","description":"Member reference. {@link community_platform_members.id}.","relation":{"name":"member","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community reference. {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"touched_at","type":"datetime","description":"Timestamp when this member last visited/engaged with this community. Updated on every user interaction that should update recency UI state.","nullable":false}],"uniqueIndexes":[{"fieldNames":["member_id","community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["touched_at"]},{"fieldNames":["member_id"]},{"fieldNames":["community_id"]}],"ginIndexes":[]},{"name":"community_platform_community_rules","description":"Stores each community's optional multi-line rules (up to 10 lines, each up to 50 characters). Exists only in context of a parent community. Each row is a single rule line, foreign-keyed to community. Editable by community owner and admins only. Managed together with the parent community and not independently. Enforces 3NF and flexible rule management. {@link community_platform_communities.id}.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Community to which this rule belongs. {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"rule_index","type":"int","description":"Order of rule line (0-based, must be between 0–9; max 10 rules per community enforced at app level).","nullable":false},{"name":"rule_line","type":"string","description":"Single rule line (max 50 characters, no linebreaks).","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_id","rule_index"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id"]}],"ginIndexes":[{"fieldName":"rule_line"}]}]},{"filename":"schema-04-posts.prisma","namespace":"Posts","models":[{"name":"community_platform_posts","description":"Stores all posts (threads) created by authenticated members within communities. Each post belongs to a sub-community and has an author (member), supports edits (versioned via post_snapshots), and is referenced by comments, votes, and reports. Core entity enabling personalized feeds, search, and moderation. Snapshots preserve edit history. Deletion cascades to comments and votes. Foreign keys link to {@link community_platform_communities}, {@link community_platform_members}.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_community_id","type":"uuid","description":"Belonged community's {@link community_platform_communities.id}. Each post is always tied to a specific community.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false},{"name":"community_platform_member_id","type":"uuid","description":"Author member's {@link community_platform_members.id}. References the creator/author of the post.","relation":{"name":"author","targetModel":"community_platform_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","description":"Post title. Must be 5–120 chars, plain text. Used for search/discovery.","nullable":false},{"name":"body","type":"string","description":"Post content body. Plain text, 10–10,000 chars. No code or scripts allowed.","nullable":false},{"name":"author_display_name","type":"string","description":"Optional display name to override default. If null, use 'Anonymous' or profile default. Up to 32 chars.","nullable":true},{"name":"created_at","type":"datetime","description":"Post creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Post last edit/update timestamp.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft-deleted timestamp. Null if active. Used for soft delete.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_community_id","created_at"]},{"fieldNames":["community_platform_member_id","created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"}]},{"name":"community_platform_post_snapshots","description":"Point-in-time snapshots for each revision of a post for audit trail, rollback, and edit/version history. Every update to a post creates an append-only record here, preserving the full prior state. Supports moderation review and compliance audits. References the post, author/member at snapshot time. Not user-editable. Foreign keys to {@link community_platform_posts}, {@link community_platform_members}.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"Original post's {@link community_platform_posts.id}.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"community_platform_member_id","type":"uuid","description":"Author member's {@link community_platform_members.id}. The member associated with this snapshot (may match original author or modifier).","relation":{"name":"member","targetModel":"community_platform_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","description":"Snapshot of the post's title at this version.","nullable":false},{"name":"body","type":"string","description":"Snapshot of the post's body at this version.","nullable":false},{"name":"author_display_name","type":"string","description":"Snapshot of display name (may be null for anonymous/default in that version).","nullable":true},{"name":"created_at","type":"datetime","description":"Snapshot creation (edit) time. Immutable.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_post_id","created_at"]}],"ginIndexes":[]},{"name":"community_platform_post_reports","description":"Reports filed by members or admins for moderation actions against posts (spam, abuse, rules violation, etc). Enables workflow for review, escalation, and tracking. Each report references the target post, the reporting member, and optionally the admin handler. Includes type, reason, status, and resolution fields. Drives moderation/appeals lifecycle. Linked to {@link community_platform_posts}, {@link community_platform_members}, and {@link community_platform_admins}.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"Target post's {@link community_platform_posts.id}. The post that was reported.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"reported_by_member_id","type":"uuid","description":"Reporting member's {@link community_platform_members.id}. The user who created the report.","relation":{"name":"reporter","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"admin_id","type":"uuid","description":"Admin's {@link community_platform_admins.id} who handled or resolved this report. Nullable until assigned.","relation":{"name":"admin","targetModel":"community_platform_admins"},"unique":false,"nullable":true}],"plainFields":[{"name":"report_type","type":"string","description":"Type/category of report (e.g. spam, abuse, offtopic, moderation, other).","nullable":false},{"name":"reason","type":"string","description":"Detailed reason or user-entered explanation of report. Business rules: plain text, up to 1000 characters. Searchable field.","nullable":false},{"name":"status","type":"string","description":"Current report status (e.g. open, resolved, dismissed). Drives moderation queue/workflow.","nullable":false},{"name":"resolution_notes","type":"string","description":"Optional: notes or rationale by admin/moderator after handling. Null if unresolved or unannotated.","nullable":true},{"name":"created_at","type":"datetime","description":"Creation (filing) time of report.","nullable":false},{"name":"updated_at","type":"datetime","description":"Time of last update or admin action.","nullable":false},{"name":"resolved_at","type":"datetime","description":"When report was resolved or closed. Null for open cases.","nullable":true},{"name":"deleted_at","type":"datetime","description":"Soft-delete timestamp; record remains for audit/logs after logical deletion.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["report_type","status","created_at"]},{"fieldNames":["community_platform_post_id","status"]}],"ginIndexes":[{"fieldName":"reason"}]}]},{"filename":"schema-05-comments.prisma","namespace":"Comments","models":[{"name":"community_platform_comments","description":"Primary business entity representing user-authored comments on posts. Each comment may be a direct reply to a post (parent_id null) or a reply to another comment (parent_id set), enabling recursive threading. Comments are linked to posts (community_platform_posts), authored by a member (community_platform_members), and support independent search, edit, and moderation. Snapshots track version history (see {@link community_platform_comment_snapshots}). Reports reference this entity for abuse/moderation. Cascade deletion from posts and parent comments must be enforced on application side.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Belonged post's {@link community_platform_posts.id}.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"author_id","type":"uuid","description":"Comment author's {@link community_platform_members.id}.","relation":{"name":"author","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"parent_id","type":"uuid","description":"Parent comment's {@link community_platform_comments.id}. Nullable for top-level comments.","relation":{"name":"parent","targetModel":"community_platform_comments","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"content","type":"string","description":"Comment text content (plain text, 2-2000 chars, no code/scripts).","nullable":false},{"name":"edited","type":"boolean","description":"Whether the comment has been edited after initial creation.","nullable":false},{"name":"score","type":"int","description":"Net vote score (upvotes minus downvotes); live recalculated, not stored (for reference only). Business tables must not persist live scores.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp of comment creation (UTC).","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last modification (UTC).","nullable":false},{"name":"deleted_at","type":"datetime","description":"Null unless soft-deleted (when present, comment is considered deleted for user-facing UIs).","nullable":true}],"uniqueIndexes":[{"fieldNames":["post_id","id"],"unique":true},{"fieldNames":["parent_id","id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id","parent_id"]},{"fieldNames":["author_id","created_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"content"}]},{"name":"community_platform_comment_snapshots","description":"Snapshot entity for immutable, historical records of state changes to comments. Each snapshot preserves the full state of a comment at a moment in time for audit, rollback, version control, or moderation. Linked to original comment, capturing author, parent, post, content, edit state, and timestamps. Append-only; no updates or deletions permitted. Utilized for audit trails, abuse investigations, and trust/safety reporting. Related to {@link community_platform_comments}.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"comment_id","type":"uuid","description":"Original comment's {@link community_platform_comments.id}.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Referenced post's {@link community_platform_posts.id} (captured at the time of snapshot for historical linkage).","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"author_id","type":"uuid","description":"Comment author's {@link community_platform_members.id} (historical copy; author may change roles).","relation":{"name":"author","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"parent_id","type":"uuid","description":"Parent comment snapshot's {@link community_platform_comment_snapshots.id}. Nullable for top-level snapshot.","relation":{"name":"parent","targetModel":"community_platform_comment_snapshots","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"content","type":"string","description":"Full content of comment at snapshot time (plain text, up to 2000 chars).","nullable":false},{"name":"edited","type":"boolean","description":"Whether this version reflects an edit after original creation.","nullable":false},{"name":"snapshot_reason","type":"string","description":"Explanation/reason for this snapshot (e.g., initial, edit, moderation action, abuse report, etc.).","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this snapshot was saved (UTC).","nullable":false}],"uniqueIndexes":[{"fieldNames":["comment_id","created_at"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id"]}],"ginIndexes":[{"fieldName":"content"}]},{"name":"community_platform_comment_reports","description":"Primary business entity for user-initiated reports of inappropriate comments. Contains references to the reported comment, the reporting user (member), and includes reason, status, resolution, and timestamps for moderation workflows. Used for actionable moderation flows, supporting search across reports by status, reporter, and referenced comment. All reports are reviewed by admins.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"comment_id","type":"uuid","description":"Reported comment's {@link community_platform_comments.id}.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":false,"nullable":false},{"name":"reporter_id","type":"uuid","description":"Reporting member's {@link community_platform_members.id}.","relation":{"name":"reporter","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"admin_id","type":"uuid","description":"Assigned admin's {@link community_platform_admins.id} if report has been escalated/assigned. Nullable until assigned.","relation":{"name":"admin","targetModel":"community_platform_admins"},"unique":false,"nullable":true}],"plainFields":[{"name":"report_reason","type":"string","description":"Reporter-supplied reason/description for the report (plain text, 2-500 chars).","nullable":false},{"name":"status","type":"string","description":"Status of the report (e.g., pending, under_review, resolved, rejected).","nullable":false},{"name":"resolution","type":"string","description":"Resolution note or outcome determined by moderator/admin.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp report was created (UTC).","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last modification (UTC), e.g., status or resolution changed.","nullable":false},{"name":"resolved_at","type":"datetime","description":"Timestamp when report was resolved/closed. Nullable if still open.","nullable":true}],"uniqueIndexes":[{"fieldNames":["comment_id","reporter_id"],"unique":true}],"plainIndexes":[{"fieldNames":["status"]},{"fieldNames":["reporter_id","created_at"]},{"fieldNames":["admin_id"]}],"ginIndexes":[{"fieldName":"report_reason"}]}]},{"filename":"schema-06-votes.prisma","namespace":"Votes","models":[{"name":"community_platform_votes","description":"Records each user's vote (upvote, downvote, or neutral) on either a post or a comment. Each vote is uniquely defined per user and target (post or comment); a user cannot vote more than once on a single post or comment, and cannot vote on their own content (enforced in business logic, not in schema). Either post or comment foreign key must be set (mutually exclusive, never both). Deleting a target (post/comment) or voter (member) cascades to delete votes. This model enables independent creation, update, and removal of votes, supports audit and rollback via snapshots ({@link community_platform_vote_snapshots}).","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"voter_id","type":"uuid","description":"User (member) who cast the vote. {@link community_platform_members.id}.","relation":{"name":"voter","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Target post voted on (if this is a post vote). {@link community_platform_posts.id}. Only one of post_id or comment_id is set per vote. Null means not a post vote.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Target comment voted on (if this is a comment vote). {@link community_platform_comments.id}. Only one of post_id or comment_id is set per vote. Null means not a comment vote.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"value","type":"int","description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral (vote removal). Only these values are valid. Enforced in application logic.","nullable":false},{"name":"created_at","type":"datetime","description":"Vote creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Vote modification timestamp.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Vote soft-deletion timestamp. Null if not deleted; set if vote was removed/deleted (soft delete).","nullable":true}],"uniqueIndexes":[{"fieldNames":["voter_id","post_id"],"unique":true},{"fieldNames":["voter_id","comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id"]},{"fieldNames":["comment_id"]},{"fieldNames":["voter_id"]}],"ginIndexes":[]},{"name":"community_platform_vote_snapshots","description":"Captures point-in-time historical states of individual votes for audit, dispute, and rollback. Each record logs a single change event or version for a vote (including on creation, modification, or deletion). Used for compliance, recovery, and detailed audit trails. Each snapshot references the vote it records and includes all original vote fields for complete historical context.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"vote_id","type":"uuid","description":"Original vote tracked by this snapshot. {@link community_platform_votes.id}.","relation":{"name":"vote","targetModel":"community_platform_votes"},"unique":false,"nullable":false},{"name":"voter_id","type":"uuid","description":"User (member) who cast the original vote. Redundant from main votes table for audit integrity. {@link community_platform_members.id}.","relation":{"name":"voter","targetModel":"community_platform_members"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Target post (if the vote was for a post). Duplicates from vote; used for full snapshot context. {@link community_platform_posts.id}.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Target comment (if the vote was for a comment). Duplicates from vote; used for full snapshot context. {@link community_platform_comments.id}.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"value","type":"int","description":"Vote value at the time of the snapshot: 1 for upvote, -1 for downvote, 0 for neutral/removal.","nullable":false},{"name":"created_at","type":"datetime","description":"Snapshot creation timestamp.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["vote_id"]},{"fieldNames":["voter_id"]},{"fieldNames":["post_id"]},{"fieldNames":["comment_id"]}],"ginIndexes":[]}]},{"filename":"schema-07-moderation.prisma","namespace":"Moderation","models":[{"name":"community_platform_admin_actions","description":"Records all administrative actions performed by admins within the platform, including create, delete, suspend, restore operations across all major entities (communities, posts, comments, users). This provides a full audit trail for moderation, enables accountability, and supports moderation escalations and investigations. References both the admin performing the action and the affected entity type and ID.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"admin_id","type":"uuid","description":"Admin user's {@link community_platform_admins.id} who performed this action.","relation":{"name":"admin","targetModel":"community_platform_admins","targetField":"id"},"unique":false,"nullable":false}],"plainFields":[{"name":"action_type","type":"string","description":"The type of moderation action taken (e.g., delete_post, suspend_user, remove_comment, restore_community, ban_member). Always a single word or snake_case identifier.","nullable":false},{"name":"target_entity","type":"string","description":"Entity type affected by this admin action (e.g., community, post, comment, user, membership).","nullable":false},{"name":"target_entity_id","type":"uuid","description":"ID of the affected entity. Used for linking to the specific community, post, comment, or user involved in the action.","nullable":false},{"name":"reason","type":"string","description":"Reason or rationale for the admin action as provided by the admin (e.g., spam, abusive behavior, ToS violation, appeal approval, etc).","nullable":true},{"name":"result","type":"string","description":"Outcome/result of the admin action (e.g., success, error, restored, overridden).","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the admin action was performed.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["admin_id","created_at"]},{"fieldNames":["target_entity","target_entity_id"]}],"ginIndexes":[{"fieldName":"reason"}]},{"name":"community_platform_audit_logs","description":"Comprehensive append-only audit trail capturing all critical moderation, escalation, and administrative actions for compliance and traceability. Stores cross-entity context, responsible actors (admin/member), JSON payloads of action metadata, and outcome. This table provides immutable historical records for all business-sensitive moderation and admin events. Used for forensic and regulatory processes.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"admin_id","type":"uuid","description":"Reference to the admin involved in this audit event. Can be null for system-level or automated events. {@link community_platform_admins.id}","relation":{"name":"admin","targetModel":"community_platform_admins","targetField":"id"},"unique":false,"nullable":true},{"name":"member_id","type":"uuid","description":"Reference to the member user involved in this audit event, if applicable. Can be null if no member involved. {@link community_platform_members.id}","relation":{"name":"member","targetModel":"community_platform_members","targetField":"id"},"unique":false,"nullable":true}],"plainFields":[{"name":"event_type","type":"string","description":"Type of audit event (e.g., admin_action, system_appeal, policy_override, escalation, data_access).","nullable":false},{"name":"entity_type","type":"string","description":"Impacted business entity (community, post, comment, user, appeal, vote, etc).","nullable":false},{"name":"entity_id","type":"uuid","description":"ID of the entity involved in this audit event.","nullable":false},{"name":"metadata_json","type":"string","description":"Raw JSON string containing structured event metadata, parameters, and contextual payload for audit review.","nullable":true},{"name":"result","type":"string","description":"Final result or status of this event (e.g., success, error, reverted, escalated).","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp for when this audit log entry was recorded.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["admin_id","created_at"]},{"fieldNames":["entity_type","entity_id"]},{"fieldNames":["event_type","created_at"]}],"ginIndexes":[{"fieldName":"metadata_json"}]},{"name":"community_platform_appeals","description":"Stores user-initiated appeals and requests for review of moderation/admin actions. Connects to the specific action or audit log being appealed, tracks appeal status, decision, and communications between appellant (member) and reviewing admin. Used for dispute resolution, process accountability, and transparency.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","description":"The member who is appealing the moderation/admin event. {@link community_platform_members.id}","relation":{"name":"member","targetModel":"community_platform_members","targetField":"id"},"unique":false,"nullable":false},{"name":"admin_action_id","type":"uuid","description":"Reference to the admin action being appealed (may also be fulfilled from audit logs if more granular trace is needed). {@link community_platform_admin_actions.id}","relation":{"name":"adminAction","targetModel":"community_platform_admin_actions","targetField":"id"},"unique":false,"nullable":false}],"plainFields":[{"name":"appeal_status","type":"string","description":"Status of the appeal (e.g., submitted, under_review, resolved, rejected, reversed).","nullable":false},{"name":"decision_reason","type":"string","description":"Detailed decision rationale or explanation from the reviewing admin (or automated process).","nullable":true},{"name":"admin_id","type":"uuid","description":"Admin who reviewed the appeal and made the decision, if already processed. Null while pending. {@link community_platform_admins.id}","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the appeal was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of most recent status update or communication regarding the appeal.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["member_id","created_at"]},{"fieldNames":["admin_action_id"]},{"fieldNames":["appeal_status","updated_at"]}],"ginIndexes":[{"fieldName":"decision_reason"}]}]},{"filename":"schema-08-search.prisma","namespace":"Search","models":[{"name":"community_platform_search_queries","description":"Tracks every user search event, recording query string, performer (if authenticated), context, and search type. Used for analytics, abuse detection, personalization, and auditing. Linked to {@link community_platform_members.id} or {@link community_platform_admins.id} if performed by authenticated users; for guests, performer may be null. Critical for monitoring search trends and supporting account-linked query history.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","description":"Searcher’s {@link community_platform_members.id}. Nullable; present if search is performed by an authenticated member.","relation":{"name":"member","targetModel":"community_platform_members"},"unique":false,"nullable":true},{"name":"admin_id","type":"uuid","description":"Searcher’s {@link community_platform_admins.id}. Nullable; present if search is performed by an authenticated admin.","relation":{"name":"admin","targetModel":"community_platform_admins"},"unique":false,"nullable":true}],"plainFields":[{"name":"query_text","type":"string","description":"Original user-entered search string. Supports full-text analysis and personalization. Maximum length 2000 characters.","nullable":false},{"name":"search_type","type":"string","description":"Type of entity searched: 'post', 'community', or 'comment'. Used for analytics and segmentation. Enum constraint enforced at application.","nullable":false},{"name":"performed_at","type":"datetime","description":"Timestamp when the search was performed. Enables time-bounded reports and user context recreation.","nullable":false},{"name":"context","type":"string","description":"Search context or page (e.g. 'home', 'explore', 'sidebar'). Supports analytics on entrypoints. Up to 64 chars. Optional.","nullable":true},{"name":"ip","type":"string","description":"IP address or anonymized token for audit/abuse detection. Optional, usually recorded for guest or security analysis. Recommended max 128 chars.","nullable":true},{"name":"created_at","type":"datetime","description":"Record creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update timestamp for the search query record.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft-deletion timestamp for GDPR/compliance. Null if not deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["member_id","performed_at"]},{"fieldNames":["query_text","search_type"]},{"fieldNames":["performed_at"]}],"ginIndexes":[{"fieldName":"query_text"}]},{"name":"community_platform_search_views","description":"Materialized or denormalized search data to support fast search result lookup, ranking, and analytics. Can include precomputed or indexed content blobs for full-text search optimization, faceted filtering, and result scoring. Not user-managed; refreshed by system jobs or triggers. Aggregates and indexes content from other business tables for search speed.","material":true,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Referenced community's {@link community_platform_communities.id}. Relates aggregated search data to its community.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":true},{"name":"post_id","type":"uuid","description":"Referenced post's {@link community_platform_posts.id}. Null if this row aggregates a community or comment search index only.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Referenced comment's {@link community_platform_comments.id}. Populated only for comment search index rows.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"search_blob","type":"string","description":"Precomputed, denormalized, or concatenated (title/body/author) content for GIN/trigram search. Used for ultra-fast search matching.","nullable":false},{"name":"search_type","type":"string","description":"Indicates which entity this record indexes: 'post', 'community', or 'comment'. Used to distinguish aggregated index type.","nullable":false},{"name":"score","type":"double","description":"Optional, system-maintained search ranking/relevance score for result ordering. Can be null if not computed yet.","nullable":true},{"name":"created_at","type":"datetime","description":"Record creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update timestamp for this materialized view row.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft-deletion timestamp for row lifecycle management. Null if not deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_id","search_type"]},{"fieldNames":["post_id","search_type"]},{"fieldNames":["comment_id","search_type"]}],"ginIndexes":[{"fieldName":"search_blob"}]}]}]}