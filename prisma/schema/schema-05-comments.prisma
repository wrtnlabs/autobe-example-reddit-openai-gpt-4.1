/// Represents a comment on a post in the community platform. Supports
/// arbitrary nesting via self-reference for threaded replies
/// (parent_comment_id). Each comment is authored by a user, and may
/// reference either a member, guest, or admin user ID, and is always
/// associated to a specific post. Comments can be top-level (no
/// parent_comment_id) or replies (parent_comment_id set). Moderation and
/// access controls are enforced at the application. All standard text and
/// length validation is application-enforced. Deletion is soft (deleted_at).
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_comments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The post this comment belongs to. References {@link
  /// community_platform_posts.id}.
  post_id String
  
  /// The parent comment for nested replies. References {@link
  /// community_platform_comments.id}. Null for top-level comments.
  parent_comment_id String?
  
  /// The member user who authored this comment. References {@link
  /// community_platform_memberusers.id}. Null unless the comment was made by a
  /// member user.
  author_memberuser_id String?
  
  /// The guest user who authored this comment. References {@link
  /// community_platform_guestusers.id}. Null unless the comment was made by a
  /// guest user.
  author_guestuser_id String?
  
  /// The admin user who authored this comment. References {@link
  /// community_platform_adminusers.id}. Null unless the comment was made by an
  /// admin user.
  author_adminuser_id String?
  
  /// The body content of the comment, plain text, 2–2,000 characters.
  /// Validation is application-enforced.
  body String
  
  /// Optional author display name for this comment (0–32 characters). Uses
  /// "Anonymous" if empty per platform rules.
  display_name String?
  
  /// Timestamp when the comment was created.
  created_at DateTime
  
  /// Timestamp when the comment was last updated.
  updated_at DateTime
  
  /// Soft delete: Timestamp when the comment was deleted, null if not deleted.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  parentComment community_platform_comments? @relation("recursive", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  authorMember community_platform_memberusers? @relation(fields: [author_memberuser_id], references: [id], onDelete: Cascade)
  authorGuest community_platform_guestusers? @relation(fields: [author_guestuser_id], references: [id], onDelete: Cascade)
  authorAdmin community_platform_adminusers? @relation(fields: [author_adminuser_id], references: [id], onDelete: Cascade)
  
  recursive community_platform_comments[] @relation("recursive")
  community_platform_comment_votes community_platform_comment_votes[]
  
  @@index([post_id, created_at])
  @@index([parent_comment_id])
  @@index([author_memberuser_id])
  @@index([author_guestuser_id])
  @@index([author_adminuser_id])
}

/// Tracks per-user vote state for each comment. Each record represents the
/// current vote (upvote, downvote, or none) by a single user (can be member,
/// guest, or admin) on a given comment. Maximum of one vote state per (user,
/// comment) pair is enforced. Cannot be used to vote on own comment,
/// enforced by application. Used to calculate comment scores.
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_comment_votes {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The comment this vote is associated with. References {@link
  /// community_platform_comments.id}.
  comment_id String
  
  /// The member user who cast the vote. References {@link
  /// community_platform_memberusers.id}. Null unless vote by a member user.
  voter_memberuser_id String?
  
  /// The guest user who cast the vote. References {@link
  /// community_platform_guestusers.id}. Null unless vote by a guest user.
  voter_guestuser_id String?
  
  /// The admin user who cast the vote. References {@link
  /// community_platform_adminusers.id}. Null unless vote by an admin user.
  voter_adminuser_id String?
  
  /// Vote state: must be one of 'upvote', 'downvote', or 'none'. Business
  /// logic ensures at most one vote per user/comment.
  vote_type String
  
  /// Timestamp when the vote was created.
  created_at DateTime
  
  /// Timestamp when the vote was last updated.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  comment community_platform_comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  voterMember community_platform_memberusers? @relation(fields: [voter_memberuser_id], references: [id], onDelete: Cascade)
  voterGuest community_platform_guestusers? @relation(fields: [voter_guestuser_id], references: [id], onDelete: Cascade)
  voterAdmin community_platform_adminusers? @relation(fields: [voter_adminuser_id], references: [id], onDelete: Cascade)
  
  @@index([voter_memberuser_id])
  @@index([voter_guestuser_id])
  @@index([voter_adminuser_id])
  
  @@unique([comment_id, voter_memberuser_id], map: "community_platform_comment_votes_comment_id_voter_memb_4c2dd838")
  @@unique([comment_id, voter_guestuser_id], map: "community_platform_comment_votes_comment_id_voter_gues_c44df4d8")
  @@unique([comment_id, voter_adminuser_id], map: "community_platform_comment_votes_comment_id_voter_admi_285fe175")
  @@index([comment_id])
}