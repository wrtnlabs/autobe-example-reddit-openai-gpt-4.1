/// Posts table storing all primary content items (threads, questions, etc.).
/// Contains title and body, references to community and author, and temporal
/// fields for auditing. Supports soft delete for business rule compliance.
/// Each post must reference a valid community and author (either member or
/// admin). Used for feed queries, full-text search, and direct management by
/// users. Related entities include {@link community_platform_communities}
/// for the containing group and {@link community_platform_memberusers} or
/// {@link community_platform_adminusers} for authorship.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_posts {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged community's {@link community_platform_communities.id}. Required
  /// for enforcing post ownership to a specific community.
  community_platform_community_id String
  
  /// Authored member user's {@link community_platform_memberusers.id}. Exactly
  /// one of author_memberuser_id or author_adminuser_id must be set. Used when
  /// the post author is a regular member user.
  author_memberuser_id String?
  
  /// Authored admin user's {@link community_platform_adminusers.id}. Exactly
  /// one of author_memberuser_id or author_adminuser_id must be set. Used when
  /// the post author is an admin user.
  author_adminuser_id String?
  
  /// Post title. Must be between 5 and 120 characters as enforced by business
  /// rules.
  title String
  
  /// Post body content. Must be between 10 to 10,000 characters. Plain text
  /// with only line breaks allowed.
  body String
  
  /// Optional author display name (0â€“32 chars). Displays 'Anonymous' if empty
  /// as per system rule.
  author_display_name String?
  
  /// Creation timestamp of the post.
  created_at DateTime
  
  /// Last updated timestamp of the post.
  updated_at DateTime
  
  /// Soft deletion timestamp. Null if not deleted, otherwise indicates
  /// deletion time.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  community community_platform_communities @relation(fields: [community_platform_community_id], references: [id], onDelete: Cascade)
  memberAuthor community_platform_memberusers? @relation(fields: [author_memberuser_id], references: [id], onDelete: Cascade)
  adminAuthor community_platform_adminusers? @relation(fields: [author_adminuser_id], references: [id], onDelete: Cascade)
  
  community_platform_post_votes community_platform_post_votes[]
  community_platform_post_moderation_logs community_platform_post_moderation_logs[]
  community_platform_comments community_platform_comments[]
  
  @@index([author_memberuser_id])
  @@index([author_adminuser_id])
  
  @@unique([community_platform_community_id, title], map: "community_platform_posts_community_platform_community__f0743395")
  @@index([created_at])
  @@index([community_platform_community_id, created_at], map: "community_platform_posts_community_platform_community__4df12ea5")
}

/// Supporting table capturing voting state (upvote, downvote, none) for each
/// user and post. Only one row exists per user+post combination. Used for
/// aggregator queries on score calculation for posts and enforcing
/// one-vote-per-user logic. Foreign keys reference {@link
/// community_platform_posts}, {@link community_platform_memberusers}, and
/// {@link community_platform_adminusers}.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_post_votes {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Related post's {@link community_platform_posts.id}.
  community_platform_post_id String
  
  /// Voting member user's {@link community_platform_memberusers.id}. One of
  /// voter_memberuser_id or voter_adminuser_id must be set.
  voter_memberuser_id String?
  
  /// Voting admin user's {@link community_platform_adminusers.id}. One of
  /// voter_memberuser_id or voter_adminuser_id must be set.
  voter_adminuser_id String?
  
  /// Vote state for post by user: 'upvote', 'downvote', or 'none'. Only one
  /// allowed per post per user. Null indicates an explicit removal (optional
  /// for soft deleted votes).
  vote_state String
  
  /// Vote creation timestamp.
  created_at DateTime
  
  /// Vote last updated timestamp (toggle logic).
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  memberVoter community_platform_memberusers? @relation(fields: [voter_memberuser_id], references: [id], onDelete: Cascade)
  adminVoter community_platform_adminusers? @relation(fields: [voter_adminuser_id], references: [id], onDelete: Cascade)
  
  @@index([voter_memberuser_id])
  @@index([voter_adminuser_id])
  
  @@unique([community_platform_post_id, voter_memberuser_id], map: "community_platform_post_votes_community_platform_post__d63b215a")
  @@unique([community_platform_post_id, voter_adminuser_id], map: "community_platform_post_votes_community_platform_post__d63b6bb4")
  @@index([community_platform_post_id])
  @@index([created_at])
}

/// Table recording moderation actions on posts (edit, delete, restore, etc.)
/// for legal/accountability compliance. Each event is linked to a post,
/// performed by an admin user, and stores the action type, reason, and
/// timestamp. Used for audit trails and recovery/business rule enforcement.
/// Related to {@link community_platform_posts} and {@link
/// community_platform_adminusers}.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_post_moderation_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Target post's {@link community_platform_posts.id}.
  community_platform_post_id String
  
  /// Admin user performing the moderation action {@link
  /// community_platform_adminusers.id}.
  performed_adminuser_id String
  
  /// Moderation action type (e.g., 'edit', 'delete', 'restore').
  action_type String
  
  /// Explanation/reason provided for moderation action. Up to 255 chars.
  action_reason String?
  
  /// Timestamp of the moderation event.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  adminModerator community_platform_adminusers @relation(fields: [performed_adminuser_id], references: [id], onDelete: Cascade)
  
  @@index([community_platform_post_id], map: "community_platform_post_moderation_logs_community_plat_23e8a1a7")
  @@index([performed_adminuser_id], map: "community_platform_post_moderation_logs_performed_admi_c032c320")
  @@index([created_at])
}