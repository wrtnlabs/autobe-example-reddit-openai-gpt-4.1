/// Records all administrative actions performed by admins within the
/// platform, including create, delete, suspend, restore operations across
/// all major entities (communities, posts, comments, users). This provides a
/// full audit trail for moderation, enables accountability, and supports
/// moderation escalations and investigations. References both the admin
/// performing the action and the affected entity type and ID.
///
/// @namespace Moderation
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_admin_actions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Admin user's {@link community_platform_admins.id} who performed this
  /// action.
  admin_id String @db.Uuid
  
  /// The type of moderation action taken (e.g., delete_post, suspend_user,
  /// remove_comment, restore_community, ban_member). Always a single word or
  /// snake_case identifier.
  action_type String
  
  /// Entity type affected by this admin action (e.g., community, post,
  /// comment, user, membership).
  target_entity String
  
  /// ID of the affected entity. Used for linking to the specific community,
  /// post, comment, or user involved in the action.
  target_entity_id String @db.Uuid
  
  /// Reason or rationale for the admin action as provided by the admin (e.g.,
  /// spam, abusive behavior, ToS violation, appeal approval, etc).
  reason String?
  
  /// Outcome/result of the admin action (e.g., success, error, restored,
  /// overridden).
  result String
  
  /// Timestamp when the admin action was performed.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  admin community_platform_admins @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  
  community_platform_appeals community_platform_appeals[]
  
  @@index([admin_id, created_at])
  @@index([target_entity, target_entity_id], map: "community_platform_admin_actions_target_entity_target__f80f4112")
  @@index([reason(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Comprehensive append-only audit trail capturing all critical moderation,
/// escalation, and administrative actions for compliance and traceability.
/// Stores cross-entity context, responsible actors (admin/member), JSON
/// payloads of action metadata, and outcome. This table provides immutable
/// historical records for all business-sensitive moderation and admin
/// events. Used for forensic and regulatory processes.
///
/// @namespace Moderation
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_audit_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Reference to the admin involved in this audit event. Can be null for
  /// system-level or automated events. {@link community_platform_admins.id}
  admin_id String? @db.Uuid
  
  /// Reference to the member user involved in this audit event, if applicable.
  /// Can be null if no member involved. {@link community_platform_members.id}
  member_id String? @db.Uuid
  
  /// Type of audit event (e.g., admin_action, system_appeal, policy_override,
  /// escalation, data_access).
  event_type String
  
  /// Impacted business entity (community, post, comment, user, appeal, vote,
  /// etc).
  entity_type String
  
  /// ID of the entity involved in this audit event.
  entity_id String @db.Uuid
  
  /// Raw JSON string containing structured event metadata, parameters, and
  /// contextual payload for audit review.
  metadata_json String?
  
  /// Final result or status of this event (e.g., success, error, reverted,
  /// escalated).
  result String
  
  /// Timestamp for when this audit log entry was recorded.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  admin community_platform_admins? @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  member community_platform_members? @relation(fields: [member_id], references: [id], onDelete: Cascade)
  
  @@index([member_id])
  
  @@index([admin_id, created_at])
  @@index([entity_type, entity_id])
  @@index([event_type, created_at])
  @@index([metadata_json(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Stores user-initiated appeals and requests for review of moderation/admin
/// actions. Connects to the specific action or audit log being appealed,
/// tracks appeal status, decision, and communications between appellant
/// (member) and reviewing admin. Used for dispute resolution, process
/// accountability, and transparency.
///
/// @namespace Moderation
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_appeals {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// The member who is appealing the moderation/admin event. {@link
  /// community_platform_members.id}
  member_id String @db.Uuid
  
  /// Reference to the admin action being appealed (may also be fulfilled from
  /// audit logs if more granular trace is needed). {@link
  /// community_platform_admin_actions.id}
  admin_action_id String @db.Uuid
  
  /// Status of the appeal (e.g., submitted, under_review, resolved, rejected,
  /// reversed).
  appeal_status String
  
  /// Detailed decision rationale or explanation from the reviewing admin (or
  /// automated process).
  decision_reason String?
  
  /// Admin who reviewed the appeal and made the decision, if already
  /// processed. Null while pending. {@link community_platform_admins.id}
  admin_id String? @db.Uuid
  
  /// Timestamp when the appeal was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp of most recent status update or communication regarding the
  /// appeal.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  member community_platform_members @relation(fields: [member_id], references: [id], onDelete: Cascade)
  adminAction community_platform_admin_actions @relation(fields: [admin_action_id], references: [id], onDelete: Cascade)
  
  @@index([member_id, created_at])
  @@index([admin_action_id])
  @@index([appeal_status, updated_at])
  @@index([decision_reason(ops: raw("gin_trgm_ops"))], type: Gin)
}