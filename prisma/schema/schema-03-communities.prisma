/// Main sub-community entity. Represents each named, top-level discussion
/// group (sub-community) on the platform. Contains immutable name (unique,
/// alphanumeric, hyphen/underscore), category (FK), owner/creator (FK),
/// description, logo/banner URIs, created_at/updated_at timestamps, and
/// optional community-wide rules. Supports unique name constraint and
/// category covariates. Directly managed (create/read/update/delete) by
/// users and admins. Referenced by memberships, rules, and posts. {@link
/// community_platform_community_memberships}, {@link
/// community_platform_community_rules}.
///
/// @namespace Communities
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_communities {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Category reference. {@link community_platform_categories.id}.
  category_id String @db.Uuid
  
  /// Owner/creator reference. {@link community_platform_members.id}.
  owner_id String @db.Uuid
  
  /// Immutable, unique, human-readable community name. 3-32 characters,
  /// alphanumeric, hyphen, underscore. Uniqueness enforced case-insensitively.
  /// Not editable after creation.
  name String
  
  /// Optional display title of the community. Up to 64 characters. Editable by
  /// owner or admin.
  display_title String?
  
  /// Optional summary description for the community, up to 200 characters.
  description String?
  
  /// Optional URI for the community's logo image. Max 5MB.
  logo_uri String? @db.VarChar(80000)
  
  /// Optional URI for the community's banner image. Max 5MB.
  banner_uri String? @db.VarChar(80000)
  
  /// Timestamp: when the community was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp: when the community was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp: when the community was soft-deleted, else null.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  category community_platform_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  owner community_platform_members @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  
  community_platform_community_memberships community_platform_community_memberships[]
  community_platform_recent_communities community_platform_recent_communities[]
  community_platform_community_rules community_platform_community_rules[]
  community_platform_posts community_platform_posts[]
  community_platform_search_views community_platform_search_views[]
  
  @@unique([name])
  @@index([category_id])
  @@index([owner_id])
  @@index([display_title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([description(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Junction table tracking many-to-many membership between users and
/// communities. Records each join event. Used to determine who has joined
/// which community for personalized feeds, permissions, and UI state. Does
/// not contain historic membership (no history retention on leave).
/// Existence of a row means current active membership. Composite unique
/// constraint ensures user can join a community only once. Members and
/// communities are both referenced. {@link community_platform_members.id},
/// {@link community_platform_communities.id}.
///
/// @namespace Communities
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_community_memberships {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Member reference (user who joins). {@link community_platform_members.id}.
  member_id String @db.Uuid
  
  /// Community being joined. {@link community_platform_communities.id}.
  community_id String @db.Uuid
  
  /// Timestamp when member joined community. Joining is always explicit user
  /// action; no implicit or historic membership tracking.
  joined_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  member community_platform_members @relation(fields: [member_id], references: [id], onDelete: Cascade)
  community community_platform_communities @relation(fields: [community_id], references: [id], onDelete: Cascade)
  
  @@unique([member_id, community_id], map: "community_platform_community_memberships_member_id_com_70068f2b")
  @@index([community_id])
  @@index([member_id])
}

/// Tracks the recency of each member's interaction with communities (e.g.,
/// for sidebar 'recent communities' UI). Serves as a many-to-many support
/// junction, records most recent visit or activity to a community by each
/// member. Not a full audit trail, nor a membership log. Ensures for each
/// (member, community) the most recent row is retained. Managed for UI
/// purposes, not historical record. Composite member/community unique index.
/// {@link community_platform_members.id}, {@link
/// community_platform_communities.id}.
///
/// @namespace Communities
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_recent_communities {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Member reference. {@link community_platform_members.id}.
  member_id String @db.Uuid
  
  /// Community reference. {@link community_platform_communities.id}.
  community_id String @db.Uuid
  
  /// Timestamp when this member last visited/engaged with this community.
  /// Updated on every user interaction that should update recency UI state.
  touched_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  member community_platform_members @relation(fields: [member_id], references: [id], onDelete: Cascade)
  community community_platform_communities @relation(fields: [community_id], references: [id], onDelete: Cascade)
  
  @@unique([member_id, community_id], map: "community_platform_recent_communities_member_id_commun_bb0c614e")
  @@index([touched_at])
  @@index([member_id])
  @@index([community_id])
}

/// Stores each community's optional multi-line rules (up to 10 lines, each
/// up to 50 characters). Exists only in context of a parent community. Each
/// row is a single rule line, foreign-keyed to community. Editable by
/// community owner and admins only. Managed together with the parent
/// community and not independently. Enforces 3NF and flexible rule
/// management. {@link community_platform_communities.id}.
///
/// @namespace Communities
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_community_rules {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Community to which this rule belongs. {@link
  /// community_platform_communities.id}.
  community_id String @db.Uuid
  
  /// Order of rule line (0-based, must be between 0â€“9; max 10 rules per
  /// community enforced at app level).
  rule_index Int @db.Integer
  
  /// Single rule line (max 50 characters, no linebreaks).
  rule_line String
  
  //----
  // RELATIONS
  //----
  community community_platform_communities @relation(fields: [community_id], references: [id], onDelete: Cascade)
  
  @@unique([community_id, rule_index])
  @@index([community_id])
  @@index([rule_line(ops: raw("gin_trgm_ops"))], type: Gin)
}