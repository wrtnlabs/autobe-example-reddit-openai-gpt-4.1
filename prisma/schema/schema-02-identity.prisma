/// Guest/anonymous visitor audit entity. Stores analytics and audit trail
/// data for non-authenticated users (guests) who browse the platform before
/// sign-up or login. Used to track activity, unique identifiers (e.g.,
/// cookie or device), and optional metadata for analytics purposes. Not
/// managed directly by any user. Not linked to business content entities
/// such as posts or communities. Cascade deletion is not required. Only
/// subsidiary, not intended for API endpoints beyond analytics/audit log
/// queries.
///
/// @namespace Identity
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_guests {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Pseudonymous analytics identifier for the guest (e.g., cookie/session ID
  /// or device fingerprint).
  guest_identifier String
  
  /// IP address of the guest at session creation, for anonymized tracking and
  /// abuse mitigation.
  ip_address String?
  
  /// User agent or browser/device fingerprint string for analytics.
  user_agent String?
  
  /// Entity creation timestamp (when first seen).
  created_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp (nullable when active).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  @@unique([guest_identifier])
  @@index([created_at])
}

/// Registered member identity table. Stores all account, authentication, and
/// profile data for regular users who sign up, log in, and perform
/// interactive actions on the platform. Directly managed by member-facing
/// APIs (sign-up, update, password change, delete, etc.). Has strong unique
/// email constraint and separate hashed password. May be linked to sessions,
/// password resets, and community content through FKs from other tables.
/// Members may be promoted to admin via a separate admin entity (not
/// polymorphic).
///
/// @namespace Identity
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_members {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Login email address, unique and required for account. Used as the main
  /// authentication identifier.
  email String
  
  /// Optional display name (shown as post/comment author); if not set,
  /// defaults to 'Anonymous'. Max 32 chars.
  display_name String?
  
  /// Hashed password value (never raw password). Required for logins, must
  /// conform to secure algorithm (e.g., bcrypt, argon2).
  password_hash String
  
  /// Whether the member account is currently active (not banned/deleted/locked
  /// for security).
  is_active Boolean
  
  /// Timestamp of last successful login for this member. Allows multi-device
  /// logins to update independently.
  last_login_at DateTime? @db.Timestamptz
  
  /// Timestamp of account creation.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp of last account update. Must be updated on profile or
  /// credential change.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-deletion timestamp. Null if active, set when deleted for business
  /// audit trail.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  community_platform_sessions community_platform_sessions[]
  community_platform_password_resets community_platform_password_resets[]
  community_platform_communities community_platform_communities[]
  community_platform_community_memberships community_platform_community_memberships[]
  community_platform_recent_communities community_platform_recent_communities[]
  community_platform_posts community_platform_posts[]
  community_platform_post_snapshots community_platform_post_snapshots[]
  community_platform_post_reports community_platform_post_reports[]
  community_platform_comments community_platform_comments[]
  community_platform_comment_snapshots community_platform_comment_snapshots[]
  community_platform_comment_reports community_platform_comment_reports[]
  community_platform_votes community_platform_votes[]
  community_platform_vote_snapshots community_platform_vote_snapshots[]
  community_platform_audit_logs community_platform_audit_logs[]
  community_platform_appeals community_platform_appeals[]
  community_platform_search_queries community_platform_search_queries[]
  
  @@unique([email])
  @@index([display_name])
  @@index([created_at])
}

/// Administrative user entity. Stores privileged user accounts with full
/// moderation rights and system-level access. Not polymorphic with members;
/// admin accounts are managed separately for rigorous privilege control,
/// auditability, and rollback of admin actions. Includes unique email,
/// password hash (distinct from member), privilege metadata, and suspension
/// state. Directly managed via dedicated admin APIs. All admin actions are
/// fully audited in other tables. Cascade deletion/banning disables admin
/// access, not member (and vice versa).
///
/// @namespace Identity
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_admins {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Login email address for admin account. Uniquely identifies admin login;
  /// separate from member email uniqueness constraint.
  email String
  
  /// Formal name for admin, displayed in audit logs, notifications, and
  /// moderation actions.
  display_name String?
  
  /// Secure hash of admin password. Used only for admin role logins, separate
  /// from member hashes.
  password_hash String
  
  /// Account active status; false disables all admin login/privilege. Admin
  /// status is not inherited from member.
  is_active Boolean
  
  /// Date and time of last authenticated admin login.
  last_login_at DateTime? @db.Timestamptz
  
  /// Whether this admin account has super-admin privileges (can manage other
  /// admins, system policies, etc.).
  is_super_admin Boolean
  
  /// Account creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp of last admin account update.
  updated_at DateTime @db.Timestamptz
  
  /// Soft deletion timestamp for audit trail; null if active.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  community_platform_sessions community_platform_sessions[]
  community_platform_password_resets community_platform_password_resets[]
  community_platform_post_reports community_platform_post_reports[]
  community_platform_comment_reports community_platform_comment_reports[]
  community_platform_admin_actions community_platform_admin_actions[]
  community_platform_audit_logs community_platform_audit_logs[]
  community_platform_search_queries community_platform_search_queries[]
  
  @@unique([email])
  @@index([display_name])
  @@index([created_at])
}

/// Session token management entity. Stores all active and expired JWT
/// sessions for both members and admins. Enables multi-device,
/// multi-platform logins per user. Tracks refresh token, expiration,
/// device/client fingerprint, and invalidation state. Holds references to
/// either a member or admin (never both, always at least one). Soft
/// deletion/invalidation removes session access without removing audit
/// trail. Used for 'log out everywhere' and session review features.
/// User-facing APIs allow reviewing and invalidating own sessions.
///
/// @namespace Identity
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_sessions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Belonged member's {@link community_platform_members.id} if session is for
  /// a member. Nullable when session belongs to admin.
  community_platform_member_id String? @db.Uuid
  
  /// Belonged admin's {@link community_platform_admins.id} if session is for
  /// an admin. Nullable for member sessions.
  community_platform_admin_id String? @db.Uuid
  
  /// Issued JWT token string (access or refresh). Used for session validation
  /// and revocation. Uniquely identifies the session on this device/browser.
  jwt_token String
  
  /// Refresh token (if issued). Required for session renewal logic,
  /// invalidated upon logout or expiry.
  refresh_token String
  
  /// Device/browser fingerprint for this session. Used to help identify
  /// physical device or client type.
  device_fingerprint String?
  
  /// When the session (token) will expire and become invalid.
  expires_at DateTime @db.Timestamptz
  
  /// If set, indicates time of forced session invalidation (logout everywhere,
  /// password reset, etc.).
  invalidated_at DateTime? @db.Timestamptz
  
  /// Timestamp of session creation/signup or fresh login.
  created_at DateTime @db.Timestamptz
  
  /// Soft deletion timestamp for audit trail. Null if still valid/visible.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  member community_platform_members? @relation(fields: [community_platform_member_id], references: [id], onDelete: Cascade)
  admin community_platform_admins? @relation(fields: [community_platform_admin_id], references: [id], onDelete: Cascade)
  
  @@unique([jwt_token])
  @@unique([refresh_token])
  @@index([community_platform_member_id])
  @@index([community_platform_admin_id])
  @@index([device_fingerprint])
  @@index([expires_at])
}

/// Password reset request entity. Stores secure password reset tokens and
/// request audit trails for both member and admin accounts. Controls reset
/// workflow, expiration, and repeat/reset cooldown logic. References either
/// a member or admin, with exclusive constraint that only one of the two is
/// set for each row. Resets can be invalidated as part of security flow.
/// Used by forgot password workflows and reset email handling. APIs do not
/// allow direct row manipulation except via password reset flows.
///
/// @namespace Identity
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_password_resets {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Targeted member's {@link community_platform_members.id} for whose
  /// password is being reset. Nullable if admin.
  community_platform_member_id String? @db.Uuid
  
  /// Targeted admin's {@link community_platform_admins.id} for whose password
  /// is being reset. Nullable if member.
  community_platform_admin_id String? @db.Uuid
  
  /// One-time use password reset token, emailed to user and valid for single
  /// use. Must be cryptographically random, unique, and securely generated.
  /// Used to identify/reset process.
  reset_token String
  
  /// Expiration timestamp for the reset token. After this, resets are rejected
  /// until a new request is made.
  expires_at DateTime @db.Timestamptz
  
  /// Timestamp when token was used and password updated. Null if unused.
  used_at DateTime? @db.Timestamptz
  
  /// Timestamp of password reset request creation.
  created_at DateTime @db.Timestamptz
  
  /// Soft deletion timestamp; for audit only, not for API use.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  member community_platform_members? @relation(fields: [community_platform_member_id], references: [id], onDelete: Cascade, map: "community_platform_password_resets_community_platform__e164abc9")
  admin community_platform_admins? @relation(fields: [community_platform_admin_id], references: [id], onDelete: Cascade, map: "community_platform_password_resets_community_platform__220d3990")
  
  @@unique([reset_token])
  @@index([community_platform_member_id], map: "community_platform_password_resets_community_platform__502c33ce")
  @@index([community_platform_admin_id], map: "community_platform_password_resets_community_platform__a9103987")
  @@index([expires_at])
}