/// Tracks every user search event, recording query string, performer (if
/// authenticated), context, and search type. Used for analytics, abuse
/// detection, personalization, and auditing. Linked to {@link
/// community_platform_members.id} or {@link community_platform_admins.id} if
/// performed by authenticated users; for guests, performer may be null.
/// Critical for monitoring search trends and supporting account-linked query
/// history.
///
/// @namespace Search
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_search_queries {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Searcher’s {@link community_platform_members.id}. Nullable; present if
  /// search is performed by an authenticated member.
  member_id String? @db.Uuid
  
  /// Searcher’s {@link community_platform_admins.id}. Nullable; present if
  /// search is performed by an authenticated admin.
  admin_id String? @db.Uuid
  
  /// Original user-entered search string. Supports full-text analysis and
  /// personalization. Maximum length 2000 characters.
  query_text String
  
  /// Type of entity searched: 'post', 'community', or 'comment'. Used for
  /// analytics and segmentation. Enum constraint enforced at application.
  search_type String
  
  /// Timestamp when the search was performed. Enables time-bounded reports and
  /// user context recreation.
  performed_at DateTime @db.Timestamptz
  
  /// Search context or page (e.g. 'home', 'explore', 'sidebar'). Supports
  /// analytics on entrypoints. Up to 64 chars. Optional.
  context String?
  
  /// IP address or anonymized token for audit/abuse detection. Optional,
  /// usually recorded for guest or security analysis. Recommended max 128
  /// chars.
  ip String?
  
  /// Record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Last update timestamp for the search query record.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-deletion timestamp for GDPR/compliance. Null if not deleted.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  member community_platform_members? @relation(fields: [member_id], references: [id], onDelete: Cascade)
  admin community_platform_admins? @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  
  @@index([admin_id])
  
  @@index([member_id, performed_at])
  @@index([query_text, search_type])
  @@index([performed_at])
  @@index([query_text(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Materialized or denormalized search data to support fast search result
/// lookup, ranking, and analytics. Can include precomputed or indexed
/// content blobs for full-text search optimization, faceted filtering, and
/// result scoring. Not user-managed; refreshed by system jobs or triggers.
/// Aggregates and indexes content from other business tables for search
/// speed.
///
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_search_views {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Referenced community's {@link community_platform_communities.id}. Relates
  /// aggregated search data to its community.
  community_id String? @db.Uuid
  
  /// Referenced post's {@link community_platform_posts.id}. Null if this row
  /// aggregates a community or comment search index only.
  post_id String? @db.Uuid
  
  /// Referenced comment's {@link community_platform_comments.id}. Populated
  /// only for comment search index rows.
  comment_id String? @db.Uuid
  
  /// Precomputed, denormalized, or concatenated (title/body/author) content
  /// for GIN/trigram search. Used for ultra-fast search matching.
  search_blob String
  
  /// Indicates which entity this record indexes: 'post', 'community', or
  /// 'comment'. Used to distinguish aggregated index type.
  search_type String
  
  /// Optional, system-maintained search ranking/relevance score for result
  /// ordering. Can be null if not computed yet.
  score Float? @db.DoublePrecision
  
  /// Record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Last update timestamp for this materialized view row.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-deletion timestamp for row lifecycle management. Null if not deleted.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  community community_platform_communities? @relation(fields: [community_id], references: [id], onDelete: Cascade)
  post community_platform_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment community_platform_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  
  @@index([community_id, search_type])
  @@index([post_id, search_type])
  @@index([comment_id, search_type])
  @@index([search_blob(ops: raw("gin_trgm_ops"))], type: Gin)
}